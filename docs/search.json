[{"path":"/articles/Demonstration.html","id":"data-wrangling-and-visualization","dir":"Articles","previous_headings":"","what":"Data wrangling and visualization","title":"Demonstration","text":"First, selected data year 2010 created dummy variable indicate whether record holiday months (December January). plot shows trend weekly gross 2010 2020.  figure shows mean weekly box office gross, average ticket price, percent theatre capacity individual shows 2010 2020.","code":"library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union library(lubridate) #>  #> Attaching package: 'lubridate' #> The following objects are masked from 'package:base': #>  #>     date, intersect, setdiff, union library(purrr) library(ggplot2)  df <- grosses %>%   mutate(year = year(week_ending),          month = month(week_ending),          is_dec_or_jan = ifelse(month %in% c(12, 1), 1, 0)) %>%   select(-week_number, -performances, -previews, -seats_sold, -seats_in_theatre,           -potential_gross, -top_ticket_price, -show) %>%   filter(year >= 2010, complete.cases(.)) %>%   mutate(theatre = as.factor(theatre)) ggplot(df, aes(x = week_ending, y = weekly_gross_overall/100000)) +   geom_line() +    labs(title = \"Weekly Gross Over Time (per $100, 000)\",        x = \"Week Ending\",        y = \"Weekly Gross Overall (per $100, 000)\",        caption = \"Data Source: Broadway Grosses\") +   scale_x_date(date_breaks = \"1 year\", date_labels = \"%Y\") +   theme_minimal() library(tidyr) df_theatre <- df %>%   select(theatre, weekly_gross, avg_ticket_price, pct_capacity) %>%   split(.$theatre) means <- map_dfr(df_theatre, ~ colMeans(select(.x, -1), na.rm = TRUE), .id = \"theatre\") %>%   arrange(desc(weekly_gross))  means_long <- means %>%   pivot_longer(-theatre, names_to = \"Metric\", values_to = \"value\") %>%   mutate(Metric = recode(Metric,                          weekly_gross = \"Weekly Gross\",                          avg_ticket_price = \"Average Ticket Price\",                          pct_capacity = \"Percent Capacity\"))  ggplot(means_long, aes(x = theatre, y = value, fill = Metric)) +   geom_bar(stat = \"identity\", position = position_dodge()) +   facet_wrap(~ Metric, scales = \"free_y\", nrow = 3) +   labs(title = \"Mean Theatre Metrics\", x = \"Theatres\", y = \"Value\") +   theme(     axis.text.x = element_blank(),       axis.ticks.x = element_blank(),       legend.position = \"bottom\"   )"},{"path":"/articles/Demonstration.html","id":"try-out-mcmcpack","dir":"Articles","previous_headings":"","what":"Try out MCMCpack","title":"Demonstration","text":"Next, tried Bayesian linear regression using Markov Chain Monte Carlo sampling algorithm three predictors: average ticket price, percent theatre capacity, whether happens holiday months. Weak priors used beta sigma^2. Sub-models also fitted compared full model based Bayes factor select best model. surprisingly, best model full model highest posterior probability model. three predictors significant based posterior distributions. Finally, plotted fitted values using Bayesian estimated coefficients true values weekly gross evaluate performance.","code":"library(MCMCpack) #> Loading required package: coda #> Loading required package: MASS #>  #> Attaching package: 'MASS' #> The following object is masked from 'package:dplyr': #>  #>     select #> ## #> ## Markov Chain Monte Carlo Package (MCMCpack) #> ## Copyright (C) 2003-2023 Andrew D. Martin, Kevin M. Quinn, and Jong Hee Park #> ## #> ## Support provided by the U.S. National Science Foundation #> ## (Grants SES-0350646 and SES-0350613) #> ##  numeric_predictors <- c(\"avg_ticket_price\", \"pct_capacity\") df_bayes <- df %>%   modify_at(vars(one_of(numeric_predictors)), ~ as.vector(scale(.))) #> Warning: Using `vars()` in .at was deprecated in purrr 1.0.0. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was #> generated.     ## MCMCpack # Define predictor combinations predictor_combinations <- list(   c(\"avg_ticket_price\"),   c(\"pct_capacity\"),   c(\"is_dec_or_jan\"),   c(\"avg_ticket_price\", \"pct_capacity\"),   c(\"avg_ticket_price\", \"is_dec_or_jan\"),   c(\"pct_capacity\", \"is_dec_or_jan\"),   c(\"avg_ticket_price\", \"pct_capacity\", \"is_dec_or_jan\") )  model_summaries <- list() models <- list()  # Fit models and store summaries in the list for (combo in predictor_combinations) {   formula <- as.formula(paste(\"weekly_gross ~\", paste(combo, collapse = \" + \")))   model <- MCMCregress(formula, data = df_bayes, B0 = 10e-8,                        mcmc = 10000, marginal.likelihood=\"Chib95\")   summary <- summary(model)   models[[paste(combo, collapse = \"_\")]] <- model   model_summaries[[paste(combo, collapse = \"_\")]] <- summary }  sub1 <- models$avg_ticket_price sub2 <- models$pct_capacity sub3 <- models$is_dec_or_jan sub4 <- models$avg_ticket_price_pct_capacity sub5 <- models$avg_ticket_price_is_dec_or_jan sub6 <- models$pct_capacity_is_dec_or_jan full <- models$avg_ticket_price_pct_capacity_is_dec_or_jan  BF <- BayesFactor(sub1, sub2, sub3, sub4, sub5, sub6, full) PostProbMod(BF) #>          sub1          sub2          sub3          sub4          sub5  #>  8.737520e-94 2.373981e-149 4.478599e-212  4.214932e-21  4.594342e-75  #>          sub6          full  #> 2.793475e-131  1.000000e+00 full <- MCMCregress(weekly_gross ~ avg_ticket_price + pct_capacity + is_dec_or_jan, data = df_bayes) summary(full) #>  #> Iterations = 1001:11000 #> Thinning interval = 1  #> Number of chains = 1  #> Sample size per chain = 10000  #>  #> 1. Empirical mean and standard deviation for each variable, #>    plus standard error of the mean: #>  #>                       Mean        SD  Naive SE Time-series SE #> (Intercept)      8.696e+05 2.672e+03 2.672e+01      2.672e+01 #> avg_ticket_price 3.424e+05 2.904e+03 2.904e+01      2.904e+01 #> pct_capacity     1.462e+05 2.851e+03 2.851e+01      2.775e+01 #> is_dec_or_jan    1.896e+04 6.368e+03 6.368e+01      6.111e+01 #> sigma2           9.456e+10 1.053e+09 1.053e+07      1.071e+07 #>  #> 2. Quantiles for each variable: #>  #>                       2.5%       25%       50%       75%     97.5% #> (Intercept)      8.644e+05 8.678e+05 8.696e+05 8.713e+05 8.749e+05 #> avg_ticket_price 3.367e+05 3.405e+05 3.424e+05 3.444e+05 3.481e+05 #> pct_capacity     1.405e+05 1.443e+05 1.462e+05 1.481e+05 1.518e+05 #> is_dec_or_jan    6.582e+03 1.466e+04 1.896e+04 2.326e+04 3.138e+04 #> sigma2           9.253e+10 9.384e+10 9.455e+10 9.527e+10 9.667e+10 estimates <- map(as.data.frame(full), mean) df_bayes$fitted <- estimates$`(Intercept)` +                     estimates$avg_ticket_price * df_bayes$avg_ticket_price +                    estimates$pct_capacity * df_bayes$pct_capacity +                    estimates$is_dec_or_jan * df_bayes$is_dec_or_jan ggplot(data = df_bayes, aes(x = weekly_gross, y = fitted)) +   geom_point() +   geom_abline(slope = 1, intercept = 0, color = \"blue\", linetype = \"dashed\") +   labs(title = \"True value of weekly gross against fitted using Bayesian estimated coefficients\",         x = \"True value\",         y = \"Fitted value\") +   theme_minimal()"},{"path":"/articles/Demonstration.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Demonstration","text":"simple analysis, average ticket price, percentage theatre capacity (.e., attendence), whether shows holiday months can predict weekly box office gross Broadway shows. Bayesian approach provides another point view validate assumption.","code":""},{"path":"/articles/Demonstration.html","id":"functions","dir":"Articles","previous_headings":"","what":"Functions","title":"Demonstration","text":"dplyr: mutate(), select(), filter(), arrange(), recode() tidyr: pivot_longer() lubridate: year(), month() purr: map_dfr(), modify_at(), map() Plot: geom_line(), geom_bar(), geom_point(), geom_abline(), facet_wrap() Package: MCMCregress(), BayesFactor(), PostProbMod()","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jong Hee Park. Maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Andrew D. Martin, Kevin M. Quinn, Jong Hee Park (2011). MCMCpack: Markov Chain Monte Carlo R. Journal Statistical Software. 42(9): 1-21. DOI 10.18637/jss.v042.i09.","code":"@Article{,   title = {{MCMCpack}: Markov Chain Monte Carlo in {R}},   author = {Andrew D. Martin and Kevin M. Quinn and Jong Hee Park},   journal = {Journal of Statistical Software},   year = {2011},   volume = {42},   number = {9},   pages = {22},   doi = {10.18637/jss.v042.i09}, }"},{"path":[]},{"path":"/index.html","id":"website-basics","dir":"","previous_headings":"MCMCpack package","what":"Website basics","title":"Markov Chain Monte Carlo (MCMC) Package","text":"Package source: https://github.com/cran/MCMCpack Package website: Change website theme lux set navigation bar height 100 pixels. Specify font displaying code set primary color theme (e.g, hyperlink mousehover color) bronze. Add vignette contributor table contents side bar homepage. Add website designer footnote. Reorder elements navigation bar add twitter link right corner.","code":""},{"path":[]},{"path":"/index.html","id":"package-development","dir":"","previous_headings":"MCMCpack package > Authors","what":"Package development:","title":"Markov Chain Monte Carlo (MCMC) Package","text":"Andrew D. Martin admart@umich.edu Kevin M. Quinn kmq@umich.edu Jong Hee Park jongheepark@snu.ac.kr","code":""},{"path":"/index.html","id":"vignette-and-website-creation","dir":"","previous_headings":"MCMCpack package > Authors","what":"Vignette and website creation:","title":"Markov Chain Monte Carlo (MCMC) Package","text":"Jianing Yao jyao37@jhmi.edu","code":""},{"path":"/index.html","id":"package-description","dir":"","previous_headings":"MCMCpack package","what":"Package description","title":"Markov Chain Monte Carlo (MCMC) Package","text":"MCMCpack (Markov Chain Monte Carlo Package) contains functions perform Bayesian inference using posterior simulation number statistical models. simulation done compiled C++ written Scythe Statistical Library Version 1.0.3. models return ‘coda’ mcmc objects can summarized using ‘coda’ package. useful utility functions density functions, pseudo-random number generators statistical distributions, general purpose Metropolis sampling algorithm, tools visualization provided.","code":""},{"path":"/index.html","id":"major-functions","dir":"","previous_headings":"MCMCpack package","what":"(Major) Functions","title":"Markov Chain Monte Carlo (MCMC) Package","text":"Note: functions common models usage listed . full list exported functions, please refer manual.","code":""},{"path":[]},{"path":"/index.html","id":"mcbinomialbeta-monte-carlo-simulation-from-a-binomial-likelihood-with-a-beta-prior","dir":"","previous_headings":"MCMCpack package > Examples","what":"MCbinomialbeta: Monte Carlo Simulation from a Binomial Likelihood with a Beta Prior","title":"Markov Chain Monte Carlo (MCMC) Package","text":"","code":"posterior <- MCbinomialbeta(3,12,mc=5000) summary(posterior) plot(posterior) grid <- seq(0,1,0.01) plot(grid, dbeta(grid, 1, 1), type=\"l\", col=\"red\", lwd=3, ylim=c(0,3.6),      xlab=\"pi\", ylab=\"density\") lines(density(posterior), col=\"blue\", lwd=3) legend(.75, 3.6, c(\"prior\", \"posterior\"), lwd=3, col=c(\"red\", \"blue\"))"},{"path":"/index.html","id":"mcmcregress-markov-chain-monte-carlo-for-gaussian-linear-regression","dir":"","previous_headings":"MCMCpack package > Examples","what":"MCMCregress: Markov Chain Monte Carlo for Gaussian Linear Regression","title":"Markov Chain Monte Carlo (MCMC) Package","text":"","code":"line <- list(X = c(-2,-1,0,1,2), Y = c(1,3,3,3,5)) posterior <- MCMCregress(Y~X, b0=0, B0 = 0.1, sigma.mu = 5, sigma.var = 25, data=line, verbose=1000) plot(posterior) raftery.diag(posterior) summary(posterior)"},{"path":"/index.html","id":"compilation","dir":"","previous_headings":"MCMCpack package","what":"Compilation","title":"Markov Chain Monte Carlo (MCMC) Package","text":"package (along Scythe) uses C++ Standard Template Library (STL). suggest using GCC compiler 4.0 greater. current package tested using GCC 4.0 Linux MacOS X. Many thanks Dan Pemstein helping sorts C++ issues, Kurt Hornik Fritz Leisch help debugging well service R community. also grateful Brian Ripley provided C++ patches fix number clang Solaris issues.","code":""},{"path":"/index.html","id":"acknowledgments","dir":"","previous_headings":"MCMCpack package","what":"Acknowledgments","title":"Markov Chain Monte Carlo (MCMC) Package","text":"gratefully acknowledge support : National Science Foundation, Program Methodology, Measurement, Statistics, Grants SES-0350646 SES-0350613 Washington University, Department Political Science, Weidenbaum Center Economy, Government, Public Policy (http://wc.wustl.edu), Center Empirical Research Law (http://cerl.wustl.edu) Harvard University, Department Government Institute Quantitative Social Sciences (http://iq.harvard.edu) Neither National Science Foundation, Washington University, Harvard University bear responsibility content package. Please contact Jong Hee Park jongheepark@snu.ac.kr problems questions. – Jong Hee Park, Ph.D. Associate Professor Dept. Political Science International Relations Seoul National University Email: jongheepark@snu.ac.kr WWW: http://jhp.snu.ac.kr","code":""},{"path":"/reference/BayesFactor.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an object of class BayesFactor from MCMCpack output — BayesFactor","title":"Create an object of class BayesFactor from MCMCpack output — BayesFactor","text":"function creates object class BayesFactor MCMCpack output.","code":""},{"path":"/reference/BayesFactor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an object of class BayesFactor from MCMCpack output — BayesFactor","text":"","code":"BayesFactor(...)  is.BayesFactor(BF)"},{"path":"/reference/BayesFactor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an object of class BayesFactor from MCMCpack output — BayesFactor","text":"... MCMCpack output objects. class mcmc logmarglike attribute. follows, let M denote total number models compared. BF object checked membership class BayesFactor.","code":""},{"path":"/reference/BayesFactor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an object of class BayesFactor from MCMCpack output — BayesFactor","text":"object class BayesFactor. BayesFactor object four attributes. : BF.mat \\(M   \\times M\\) matrix element \\(,j\\) contains Bayes   factor model \\(\\) relative model \\(j\\);  BF.log.mat \\(M \\times M\\) matrix element  \\(,j\\) contains natural log Bayes factor model  \\(\\) relative model \\(j\\); BF.logmarglike  \\(M\\) vector containing log marginal likelihoods models   1 \\(M\\); BF.call \\(M\\) element list   containing calls used fit models 1 \\(M\\).","code":""},{"path":[]},{"path":"/reference/BayesFactor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an object of class BayesFactor from MCMCpack output — BayesFactor","text":"","code":"if (FALSE) { data(birthwt)  model1 <- MCMCregress(bwt~age+lwt+as.factor(race) + smoke + ht,                      data=birthwt, b0=c(2700, 0, 0, -500, -500,                                         -500, -500),                      B0=c(1e-6, .01, .01, 1.6e-5, 1.6e-5, 1.6e-5,                           1.6e-5), c0=10, d0=4500000,                      marginal.likelihood=\"Chib95\", mcmc=10000)  model2 <- MCMCregress(bwt~age+lwt+as.factor(race) + smoke,                      data=birthwt, b0=c(2700, 0, 0, -500, -500,                                         -500),                      B0=c(1e-6, .01, .01, 1.6e-5, 1.6e-5, 1.6e-5),                      c0=10, d0=4500000,                      marginal.likelihood=\"Chib95\", mcmc=10000)  model3 <- MCMCregress(bwt~as.factor(race) + smoke + ht,                      data=birthwt, b0=c(2700, -500, -500,                                         -500, -500),                      B0=c(1e-6, 1.6e-5, 1.6e-5, 1.6e-5,                           1.6e-5), c0=10, d0=4500000,                      marginal.likelihood=\"Chib95\", mcmc=10000)  BF <- BayesFactor(model1, model2, model3) print(BF)  }"},{"path":"/reference/Dirichlet.html","id":null,"dir":"Reference","previous_headings":"","what":"The Dirichlet Distribution — Dirichlet","title":"The Dirichlet Distribution — Dirichlet","text":"Density function random generation Dirichlet distribution.","code":""},{"path":"/reference/Dirichlet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Dirichlet Distribution — Dirichlet","text":"","code":"ddirichlet(x, alpha)  rdirichlet(n, alpha)"},{"path":"/reference/Dirichlet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Dirichlet Distribution — Dirichlet","text":"x vector containing single deviate matrix containing one random deviate per row. alpha Vector shape parameters, matrix shape parameters corresponding number draw. n Number random vectors generate.","code":""},{"path":"/reference/Dirichlet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Dirichlet Distribution — Dirichlet","text":"ddirichlet gives density. rdirichlet returns matrix n rows, containing single Dirichlet random deviate.","code":""},{"path":"/reference/Dirichlet.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Dirichlet Distribution — Dirichlet","text":"Dirichlet distribution multidimensional generalization beta distribution.","code":""},{"path":[]},{"path":"/reference/Dirichlet.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The Dirichlet Distribution — Dirichlet","text":"Code taken Greg's Miscellaneous Functions (gregmisc).  code based code posted Ben Bolker R-News 15 Dec 2000.","code":""},{"path":"/reference/Dirichlet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Dirichlet Distribution — Dirichlet","text":"","code":"density <- ddirichlet(c(.1,.2,.7), c(1,1,1))   draws <- rdirichlet(20, c(1,1,1) )"},{"path":"/reference/Euro2016.html","id":null,"dir":"Reference","previous_headings":"","what":"Euro 2016 data — Euro2016","title":"Euro 2016 data — Euro2016","text":"Data head--head outcomes 2016 UEFA European Football Championship.","code":""},{"path":"/reference/Euro2016.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Euro 2016 data — Euro2016","text":"dataframe contains head--head results Euro 2016. includes results group stage knock-rounds. dummy.rater artificial \"dummy\" rater equal 1 matches. Included Euro2016 can used directly MCMCpack's models pairwise comparisons. team1 home team team2 away team winner winner match. NA draw.","code":""},{"path":"/reference/Euro2016.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Euro 2016 data — Euro2016","text":"https://en.wikipedia.org/wiki/UEFA_Euro_2016","code":""},{"path":"/reference/HDPHMMnegbin.html","id":null,"dir":"Reference","previous_headings":"","what":"Markov Chain Monte Carlo for sticky HDP-HMM with a Negative\nBinomial outcome distribution — HDPHMMnegbin","title":"Markov Chain Monte Carlo for sticky HDP-HMM with a Negative\nBinomial outcome distribution — HDPHMMnegbin","text":"function generates sample posterior distribution (sticky) HDP-HMM Negative Binomial outcome distribution (Fox et al, 2011). user supplies data priors, sample posterior distribution returned mcmc object, can subsequently analyzed functions provided coda package.","code":""},{"path":"/reference/HDPHMMnegbin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Markov Chain Monte Carlo for sticky HDP-HMM with a Negative\nBinomial outcome distribution — HDPHMMnegbin","text":"","code":"HDPHMMnegbin(   formula,   data = parent.frame(),   K = 10,   b0 = 0,   B0 = 1,   a.theta = 50,   b.theta = 5,   a.alpha = 1,   b.alpha = 0.1,   a.gamma = 1,   b.gamma = 0.1,   e = 2,   f = 2,   g = 10,   burnin = 1000,   mcmc = 1000,   thin = 1,   verbose = 0,   seed = NA,   beta.start = NA,   P.start = NA,   rho.start = NA,   rho.step,   nu.start = NA,   gamma.start = 0.5,   theta.start = 0.98,   ak.start = 100,   ... )"},{"path":"/reference/HDPHMMnegbin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Markov Chain Monte Carlo for sticky HDP-HMM with a Negative\nBinomial outcome distribution — HDPHMMnegbin","text":"formula Model formula. data Data frame. K number regimes consideration. larger hypothesized number regimes data. Note sampler likely visit fewer K regimes. b0 prior mean \\(\\beta\\).  can either scalar column vector dimension equal number betas. takes scalar value, value serve prior mean betas. B0 prior precision \\(\\beta\\).  can either scalar square matrix dimensions equal number betas.  takes scalar value, value times identity matrix serves prior precision beta. Default value 0 equivalent improper uniform prior beta. .theta, b.theta Paramaters Beta prior \\(\\theta\\), captures strength self-transition bias. .alpha, b.alpha Shape scale parameters Gamma distribution \\(\\alpha + \\kappa\\). .gamma, b.gamma Shape scale parameters Gamma distribution \\(\\gamma\\). e hyperprior distribution \\(\\rho\\) See details. f hyperprior distribution \\(\\rho\\). See details. g hyperprior distribution \\(\\rho\\). See details. burnin number burn-iterations sampler. mcmc number Metropolis iterations sampler. thin thinning interval used simulation.  number mcmc iterations must divisible value. verbose switch determines whether progress sampler printed screen.  verbose greater 0 iteration number, current beta vector, Metropolis acceptance rate printed screen every verboseth iteration. seed seed random number generator.  NA, Mersenne Twister generator used default seed 12345; integer passed used seed Mersenne twister.  user can also pass list length two use L'Ecuyer random number generator, suitable parallel computation.  first element list L'Ecuyer seed, vector length six NA (NA default seed rep(12345,6) used).  second element list positive substream number. See MCMCpack specification details. beta.start starting value \\(\\beta\\) vector.  can either scalar column vector dimension equal number betas. takes scalar value, value serve starting value betas.  default value NA use maximum likelihood estimate \\(\\beta\\) starting value   regimes. P.start Initial transition matrix regimes. K K matrix. provided, default value place theta.start along diagonal rest mass even distributed within rows. rho.start starting value \\(\\rho\\) variable. can either scalar column vector dimension equal number regimes. value scalar, used regimes. default value vector ones. rho.step Tuning parameter slice sampling approach sampling \\(rho\\). Determines size step-used find correct slice draw . Lower values accurate, take longer (fixed searching limit). Default 0.1. nu.start starting values random effect, \\(\\nu\\). default value vector ones. theta.start, ak.start, gamma.start Scalar starting values \\(\\theta\\), \\(\\alpha + \\kappa\\), \\(\\gamma\\) parameters. ... arguments passed.","code":""},{"path":"/reference/HDPHMMnegbin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Markov Chain Monte Carlo for sticky HDP-HMM with a Negative\nBinomial outcome distribution — HDPHMMnegbin","text":"mcmc object contains posterior sample.  object can summarized functions provided coda package.","code":""},{"path":"/reference/HDPHMMnegbin.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Markov Chain Monte Carlo for sticky HDP-HMM with a Negative\nBinomial outcome distribution — HDPHMMnegbin","text":"HDPHMMnegbin simulates posterior distribution sticky HDP-HMM Negative Binomial outcome distribution, allowing multiple, arbitrary changepoints model. details model discussed Blackwell (2017). implementation based weak-limit approximation, large, though finite number regimes can switched . Unlike changepoint models MCMCpack, HDP-HMM approach allows state sequence return previous visited states. model takes following form, show fixed-limit version: $$y_t \\sim \\mathcal{P}oisson(\\nu_t\\mu_t)$$ $$\\mu_t = x_t ' \\beta_m,\\;\\; m = 1, \\ldots, M$$ $$\\nu_t \\sim \\mathcal{G}amma(\\rho_m, \\rho_m)$$ \\(M\\) upper bound number states \\(\\beta_m\\) \\(\\rho_m\\) parameters state \\(m\\) \\(t\\). transition probabilities states assumed follow heirarchical Dirichlet process: $$\\pi_m \\sim \\mathcal{D}irichlet(\\alpha\\delta_1, \\ldots, \\alpha\\delta_j + \\kappa, \\ldots, \\alpha\\delta_M)$$ $$\\delta \\sim \\mathcal{D}irichlet(\\gamma/M, \\ldots, \\gamma/M)$$ \\(\\kappa\\) value sticky parameter  encourages self-transitions. sampler follows Fox et al (2011)  parameterizes priors \\(\\alpha + \\kappa\\)  \\(\\theta = \\kappa/(\\alpha + \\kappa)\\), latter  representing degree self-transition bias. Gamma priors  assumed \\((\\alpha + \\kappa)\\) \\(\\gamma\\). assume Gaussian distribution prior \\(\\beta\\): $$\\beta_m \\sim \\mathcal{N}(b_0,B_0^{-1}),\\;\\; m = 1, \\ldots, M$$ overdispersion parameters prior following form: $$f(\\rho_m|e,f,g) \\propto \\rho^{e-1}(\\rho + g)^{-(e+f)}$$ model simulated via blocked Gibbs conditonal states. \\(\\beta\\) simulated via auxiliary mixture sampling method Fuerhwirth-Schanetter et al. (2009). \\(\\rho\\) updated via slice sampling. \\(\\nu_i\\) updated (conjugate) full conditional, also Gamma. states updated Fox et al (2011), supplemental materials.","code":""},{"path":"/reference/HDPHMMnegbin.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Markov Chain Monte Carlo for sticky HDP-HMM with a Negative\nBinomial outcome distribution — HDPHMMnegbin","text":"Andrew D. Martin, Kevin M. Quinn, Jong Hee Park. 2011. ``MCMCpack: Markov Chain Monte Carlo R.'', Journal Statistical Software. 42(9): 1-21.  doi:10.18637/jss.v042.i09 . Daniel Pemstein, Kevin M. Quinn, Andrew D. Martin.  2007.  Scythe Statistical Library 1.0. http://scythe.lsa.umich.edu. Sylvia Fruehwirth-Schnatter, Rudolf Fruehwirth, Leonhard Held,     Havard Rue. 2009. ``Improved auxiliary mixture sampling     hierarchical models non-Gaussian data'', Statistics     Computing 19(4): 479-492.   <doi:10.1007/s11222-008-9109-4> Matthew Blackwell. 2017. ``Game Changers: Detecting Shifts   Overdispersed Count Data,'' Political Analysis   26(2), 230-239. <doi:10.1017/pan.2017.42> Emily B. Fox, Erik B. Sudderth, Michael . Jordan, Alan S.   Willsky. 2011.. ``sticky HDP-HMM application speaker   diarization.'' Annals Applied Statistics, 5(2A),   1020-1056. <doi:10.1214/10-AOAS395>","code":""},{"path":[]},{"path":"/reference/HDPHMMnegbin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Markov Chain Monte Carlo for sticky HDP-HMM with a Negative\nBinomial outcome distribution — HDPHMMnegbin","text":"","code":"if (FALSE) {    n <- 150    reg <- 3    true.s <- gl(reg, n/reg, n)    rho.true <- c(1.5, 0.5, 3)    b1.true <- c(1, -2, 2)    x1 <- runif(n, 0, 2)    nu.true <- rgamma(n, rho.true[true.s], rho.true[true.s])    mu <- nu.true * exp(1 + x1 * b1.true[true.s])    y <- rpois(n, mu)     posterior <- HDPHMMnegbin(y ~ x1, K = 10, verbose = 1000,                           e = 2, f = 2, g = 10,                           a.theta = 100, b.theta = 1,                           b0 = rep(0, 2), B0 = (1/9) * diag(2),                           rho.step = rep(0.75, times = 10),                           seed = list(NA, 2),                           theta.start = 0.95, gamma.start = 10,                           ak.start = 10)     plotHDPChangepoint(posterior, ylab=\"Density\", start=1)    }"},{"path":"/reference/HDPHMMpoisson.html","id":null,"dir":"Reference","previous_headings":"","what":"Markov Chain Monte Carlo for sticky HDP-HMM with a Poisson\noutcome distribution — HDPHMMpoisson","title":"Markov Chain Monte Carlo for sticky HDP-HMM with a Poisson\noutcome distribution — HDPHMMpoisson","text":"function generates sample posterior distribution (sticky) HDP-HMM Poisson outcome distribution (Fox et al, 2011). user supplies data priors, sample posterior distribution returned mcmc object, can subsequently analyzed functions provided coda package.","code":""},{"path":"/reference/HDPHMMpoisson.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Markov Chain Monte Carlo for sticky HDP-HMM with a Poisson\noutcome distribution — HDPHMMpoisson","text":"","code":"HDPHMMpoisson(   formula,   data = parent.frame(),   K = 10,   b0 = 0,   B0 = 1,   a.alpha = 1,   b.alpha = 0.1,   a.gamma = 1,   b.gamma = 0.1,   a.theta = 50,   b.theta = 5,   burnin = 1000,   mcmc = 1000,   thin = 1,   verbose = 0,   seed = NA,   beta.start = NA,   P.start = NA,   gamma.start = 0.5,   theta.start = 0.98,   ak.start = 100,   ... )"},{"path":"/reference/HDPHMMpoisson.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Markov Chain Monte Carlo for sticky HDP-HMM with a Poisson\noutcome distribution — HDPHMMpoisson","text":"formula Model formula. data Data frame. K number regimes consideration. larger hypothesized number regimes data. Note sampler likely visit fewer K regimes. b0 prior mean \\(\\beta\\).  can either scalar column vector dimension equal number betas. takes scalar value, value serve prior mean betas. B0 prior precision \\(\\beta\\).  can either scalar square matrix dimensions equal number betas.  takes scalar value, value times identity matrix serves prior precision beta. Default value 0 equivalent improper uniform prior beta. .alpha, b.alpha Shape scale parameters Gamma distribution \\(\\alpha + \\kappa\\). .gamma, b.gamma Shape scale parameters Gamma distribution \\(\\gamma\\). .theta, b.theta Paramaters Beta prior \\(\\theta\\), captures strength self-transition bias. burnin number burn-iterations sampler. mcmc number Metropolis iterations sampler. thin thinning interval used simulation.  number mcmc iterations must divisible value. verbose switch determines whether progress sampler printed screen.  verbose greater 0 iteration number, current beta vector, Metropolis acceptance rate printed screen every verboseth iteration. seed seed random number generator.  NA, Mersenne Twister generator used default seed 12345; integer passed used seed Mersenne twister.  user can also pass list length two use L'Ecuyer random number generator, suitable parallel computation.  first element list L'Ecuyer seed, vector length six NA (NA default seed rep(12345,6) used).  second element list positive substream number. See MCMCpack specification details. beta.start starting value \\(\\beta\\) vector.  can either scalar column vector dimension equal number betas. takes scalar value, value serve starting value betas.  default value NA use maximum likelihood estimate \\(\\beta\\) starting value   regimes. P.start Initial transition matrix regimes. K K matrix. provided, default value place theta.start along diagonal rest mass even distributed within rows. theta.start, ak.start, gamma.start Scalar starting values \\(\\theta\\), \\(\\alpha + \\kappa\\), \\(\\gamma\\) parameters. ... arguments passed.","code":""},{"path":"/reference/HDPHMMpoisson.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Markov Chain Monte Carlo for sticky HDP-HMM with a Poisson\noutcome distribution — HDPHMMpoisson","text":"mcmc object contains posterior sample.  object can summarized functions provided coda package.","code":""},{"path":"/reference/HDPHMMpoisson.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Markov Chain Monte Carlo for sticky HDP-HMM with a Poisson\noutcome distribution — HDPHMMpoisson","text":"HDPHMMpoisson simulates posterior distribution sticky HDP-HMM Poisson outcome distribution, allowing multiple, arbitrary changepoints model. details model discussed Blackwell (2017). implementation based weak-limit approximation, large, though finite number regimes can switched . Unlike changepoint models MCMCpack, HDP-HMM approach allows state sequence return previous visited states. model takes following form, show fixed-limit version: $$y_t \\sim \\mathcal{P}oisson(\\mu_t)$$ $$\\mu_t = x_t ' \\beta_m,\\;\\; m = 1, \\ldots, M$$ \\(M\\) upper bound number states \\(\\beta_m\\) parameters state \\(m\\) \\(t\\). transition probabilities states assumed follow heirarchical Dirichlet process: $$\\pi_m \\sim \\mathcal{D}irichlet(\\alpha\\delta_1, \\ldots, \\alpha\\delta_j + \\kappa, \\ldots, \\alpha\\delta_M)$$ $$\\delta \\sim \\mathcal{D}irichlet(\\gamma/M, \\ldots, \\gamma/M)$$ \\(\\kappa\\) value sticky parameter  encourages self-transitions. sampler follows Fox et al (2011)  parameterizes priors \\(\\alpha + \\kappa\\)  \\(\\theta = \\kappa/(\\alpha + \\kappa)\\), latter  representing degree self-transition bias. Gamma priors  assumed \\((\\alpha + \\kappa)\\) \\(\\gamma\\). assume Gaussian distribution prior \\(\\beta\\): $$\\beta_m \\sim \\mathcal{N}(b_0,B_0^{-1}),\\;\\; m = 1, \\ldots, M$$ model simulated via blocked Gibbs conditonal states. \\(\\beta\\) simulated via auxiliary mixture sampling method Fuerhwirth-Schanetter et al. (2009). states updated Fox et al (2011), supplemental materials.","code":""},{"path":"/reference/HDPHMMpoisson.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Markov Chain Monte Carlo for sticky HDP-HMM with a Poisson\noutcome distribution — HDPHMMpoisson","text":"Andrew D. Martin, Kevin M. Quinn, Jong Hee Park. 2011. ``MCMCpack: Markov Chain Monte Carlo R.'', Journal Statistical Software. 42(9): 1-21.  doi:10.18637/jss.v042.i09 . Daniel Pemstein, Kevin M. Quinn, Andrew D. Martin.  2007.  Scythe Statistical Library 1.0. http://scythe.lsa.umich.edu. Sylvia Fruehwirth-Schnatter, Rudolf Fruehwirth, Leonhard Held,     Havard Rue. 2009. ``Improved auxiliary mixture sampling     hierarchical models non-Gaussian data'', Statistics     Computing 19(4): 479-492.     <doi:10.1007/s11222-008-9109-4> Matthew Blackwell. 2017. ``Game Changers: Detecting Shifts   Overdispersed Count Data,'' Political Analysis   26(2), 230-239. <doi:10.1017/pan.2017.42> Emily B. Fox, Erik B. Sudderth, Michael . Jordan, Alan S.   Willsky. 2011.. ``sticky HDP-HMM application speaker   diarization.'' Annals Applied Statistics, 5(2A),   1020-1056. <doi:10.1214/10-AOAS395>","code":""},{"path":[]},{"path":"/reference/HDPHMMpoisson.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Markov Chain Monte Carlo for sticky HDP-HMM with a Poisson\noutcome distribution — HDPHMMpoisson","text":"","code":"if (FALSE) {    n <- 150    reg <- 3    true.s <- gl(reg, n/reg, n)    b1.true <- c(1, -2, 2)    x1 <- runif(n, 0, 2)    mu <- exp(1 + x1 * b1.true[true.s])    y <- rpois(n, mu)     posterior <- HDPHMMpoisson(y ~ x1, K = 10, verbose = 1000,                           a.theta = 100, b.theta = 1,                           b0 = rep(0, 2), B0 = (1/9) * diag(2),                           seed = list(NA, 2),                           theta.start = 0.95, gamma.start = 10,                           ak.start = 10)     plotHDPChangepoint(posterior, ylab=\"Density\", start=1)    }"},{"path":"/reference/HDPHSMMnegbin.html","id":null,"dir":"Reference","previous_headings":"","what":"Markov Chain Monte Carlo for HDP-HSMM with a Negative\nBinomial outcome distribution — HDPHSMMnegbin","title":"Markov Chain Monte Carlo for HDP-HSMM with a Negative\nBinomial outcome distribution — HDPHSMMnegbin","text":"function generates sample posterior distribution Hidden Semi-Markov Model Heirarchical Dirichlet Process Negative Binomial outcome distribution (Johnson Willsky, 2013).  user supplies data priors, sample posterior distribution returned mcmc object, can subsequently analyzed functions provided coda package.","code":""},{"path":"/reference/HDPHSMMnegbin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Markov Chain Monte Carlo for HDP-HSMM with a Negative\nBinomial outcome distribution — HDPHSMMnegbin","text":"","code":"HDPHSMMnegbin(   formula,   data = parent.frame(),   K = 10,   b0 = 0,   B0 = 1,   a.alpha = 1,   b.alpha = 0.1,   a.gamma = 1,   b.gamma = 0.1,   a.omega,   b.omega,   e = 2,   f = 2,   g = 10,   r = 1,   burnin = 1000,   mcmc = 1000,   thin = 1,   verbose = 0,   seed = NA,   beta.start = NA,   P.start = NA,   rho.start = NA,   rho.step,   nu.start = NA,   omega.start = NA,   gamma.start = 0.5,   alpha.start = 100,   ... )"},{"path":"/reference/HDPHSMMnegbin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Markov Chain Monte Carlo for HDP-HSMM with a Negative\nBinomial outcome distribution — HDPHSMMnegbin","text":"formula Model formula. data Data frame. K number regimes consideration. larger hypothesized number regimes data. Note sampler likely visit fewer K regimes. b0 prior mean \\(\\beta\\).  can either scalar column vector dimension equal number betas. takes scalar value, value serve prior mean betas. B0 prior precision \\(\\beta\\).  can either scalar square matrix dimensions equal number betas.  takes scalar value, value times identity matrix serves prior precision beta. Default value 0 equivalent improper uniform prior beta. .alpha, b.alpha Shape scale parameters Gamma distribution \\(\\alpha\\). .gamma, b.gamma Shape scale parameters Gamma distribution \\(\\gamma\\). .omega, b.omega Paramaters Beta prior \\(\\omega\\), determines regime length distribution, Negative Binomial, parameters r omega. e hyperprior distribution \\(\\rho\\) See details. f hyperprior distribution \\(\\rho\\). See details. g hyperprior distribution \\(\\rho\\). See details. r Parameter Negative Binomial prior regime durations. target number successful trials. Must strictly positive. Higher values increase variance duration distributions. burnin number burn-iterations sampler. mcmc number Metropolis iterations sampler. thin thinning interval used simulation.  number mcmc iterations must divisible value. verbose switch determines whether progress sampler printed screen.  verbose greater 0 iteration number, current beta vector, Metropolis acceptance rate printed screen every verboseth iteration. seed seed random number generator.  NA, Mersenne Twister generator used default seed 12345; integer passed used seed Mersenne twister.  user can also pass list length two use L'Ecuyer random number generator, suitable parallel computation.  first element list L'Ecuyer seed, vector length six NA (NA default seed rep(12345,6) used).  second element list positive substream number. See MCMCpack specification details. beta.start starting value \\(\\beta\\) vector.  can either scalar column vector dimension equal number betas. takes scalar value, value serve starting value betas.  default value NA use maximum likelihood estimate \\(\\beta\\) starting value   regimes. P.start Initial transition matrix regimes. K K matrix. provided, default value uniform transition distributions. rho.start starting value \\(\\rho\\) variable. can either scalar column vector dimension equal number regimes. value scalar, used regimes. default value vector ones. rho.step Tuning parameter slice sampling approach sampling \\(rho\\). Determines size step-used find correct slice draw . Lower values accurate, take longer (fixed searching limit). Default 0.1. nu.start starting values random effect, \\(\\nu\\). default value vector ones. omega.start vector starting values probability success parameter Negative Binomial distribution governs duration distributions. alpha.start, gamma.start Scalar starting values \\(\\alpha\\), \\(\\gamma\\) parameters. ... arguments passed.","code":""},{"path":"/reference/HDPHSMMnegbin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Markov Chain Monte Carlo for HDP-HSMM with a Negative\nBinomial outcome distribution — HDPHSMMnegbin","text":"mcmc object contains posterior sample.  object can summarized functions provided coda package.","code":""},{"path":"/reference/HDPHSMMnegbin.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Markov Chain Monte Carlo for HDP-HSMM with a Negative\nBinomial outcome distribution — HDPHSMMnegbin","text":"HDPHSMMnegbin simulates posterior distribution HDP-HSMM Negative Binomial outcome distribution, allowing multiple, arbitrary changepoints model. details model discussed Johnson & Willsky (2013). implementation based weak-limit approximation, large, though finite number regimes can switched . Unlike changepoint models MCMCpack, HDP-HSMM approach allows state sequence return previous visited states. model takes following form, show fixed-limit version: $$y_t \\sim \\mathcal{P}oisson(\\nu_t\\mu_t)$$ $$\\mu_t = x_t ' \\beta_k,\\;\\; k = 1, \\ldots, K$$ $$\\nu_t \\sim \\mathcal{G}amma(\\rho_k, \\rho_k)$$ \\(K\\) upper bound number states \\(\\beta_k\\) \\(\\rho_k\\) parameters state \\(k\\) \\(t\\). HDP-HSMM, super-state sequence , given observation, drawn transition distribution duration drawn duration distribution determin long state stay active. duration, new super-state drawn transition distribution, self-transitions  disallowed. transition probabilities states assumed follow heirarchical Dirichlet process: $$\\pi_k \\sim \\mathcal{D}irichlet(\\alpha\\delta_1, \\ldots , \\alpha\\delta_K)$$ $$\\delta \\sim \\mathcal{D}irichlet(\\gamma/K, \\ldots, \\gamma/K)$$ algorithm , \\(\\pi\\) vectors modified remove self-transitions discussed . unique duration distribution regime following parameters: $$D_k \\sim \\mathcal{N}egBin(r, \\omega_k)$$ $$\\omega_k \\sim \\mathcal{B}eta(a_{\\omega,k}, b_{\\omega, k})$$ assume Gaussian distribution prior \\(\\beta\\): $$\\beta_k \\sim \\mathcal{N}(b_0,B_0^{-1}),\\;\\; m = 1, \\ldots, K$$ overdispersion parameters prior following form: $$f(\\rho_k|e,f,g) \\propto \\rho^{e-1}(\\rho + g)^{-(e+f)}$$ model simulated via blocked Gibbs conditonal states. \\(\\beta\\) simulated via auxiliary mixture sampling method Fuerhwirth-Schanetter et al. (2009). \\(\\rho\\) updated via slice sampling. \\(\\nu_t\\) updated (conjugate) full conditional, also Gamma. states durations drawn Johnson & Willsky (2013).","code":""},{"path":"/reference/HDPHSMMnegbin.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Markov Chain Monte Carlo for HDP-HSMM with a Negative\nBinomial outcome distribution — HDPHSMMnegbin","text":"Andrew D. Martin, Kevin M. Quinn, Jong Hee Park. 2011. ``MCMCpack: Markov Chain Monte Carlo R.'', Journal Statistical Software. 42(9): 1-21.  doi:10.18637/jss.v042.i09 . Daniel Pemstein, Kevin M. Quinn, Andrew D. Martin.  2007.  Scythe Statistical Library 1.0. http://scythe.lsa.umich.edu. Sylvia Fruehwirth-Schnatter, Rudolf Fruehwirth, Leonhard Held,     Havard Rue. 2009. ``Improved auxiliary mixture sampling     hierarchical models non-Gaussian data'', Statistics     Computing 19(4): 479-492.     <doi:10.1007/s11222-008-9109-4> Matthew Blackwell. 2017. ``Game Changers: Detecting Shifts   Overdispersed Count Data,'' Political Analysis   26(2), 230-239. <doi:10.1017/pan.2017.42> Matthew J. Johnson Alan S. Willsky. 2013. ``Bayesian Nonparametric Hidden Semi-Markov Models.'' Journal Machine Learning Research, 14(Feb), 673-701.","code":""},{"path":[]},{"path":"/reference/HDPHSMMnegbin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Markov Chain Monte Carlo for HDP-HSMM with a Negative\nBinomial outcome distribution — HDPHSMMnegbin","text":"","code":"if (FALSE) {    n <- 150    reg <- 3    true.s <- gl(reg, n/reg, n)    rho.true <- c(1.5, 0.5, 3)    b1.true <- c(1, -2, 2)    x1 <- runif(n, 0, 2)    nu.true <- rgamma(n, rho.true[true.s], rho.true[true.s])    mu <- nu.true * exp(1 + x1 * b1.true[true.s])    y <- rpois(n, mu)     posterior <- HDPHSMMnegbin(y ~ x1, K = 10, verbose = 1000,                           e = 2, f = 2, g = 10,                           b0 = 0, B0 = 1/9,                           a.omega = 1, b.omega = 100, r = 1,                           rho.step = rep(0.75, times = 10),                           seed = list(NA, 2),                           omega.start = 0.05, gamma.start = 10,                           alpha.start = 5)     plotHDPChangepoint(posterior, ylab=\"Density\", start=1)    }"},{"path":"/reference/HMMpanelFE.html","id":null,"dir":"Reference","previous_headings":"","what":"Markov Chain Monte Carlo for the Hidden Markov Fixed-effects Model — HMMpanelFE","title":"Markov Chain Monte Carlo for the Hidden Markov Fixed-effects Model — HMMpanelFE","text":"HMMpanelFE generates sample posterior distribution fixed-effects model varying individual effects model discussed Park (2011).  code works balanced unbalanced panel data long missing data middle group.  model uses multivariate Normal prior fixed effects parameters varying individual effects, Inverse-Gamma prior residual error variance, Beta prior transition probabilities. user supplies data priors, sample posterior distribution returned mcmc object, can subsequently analyzed functions provided coda package.","code":""},{"path":"/reference/HMMpanelFE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Markov Chain Monte Carlo for the Hidden Markov Fixed-effects Model — HMMpanelFE","text":"","code":"HMMpanelFE(   subject.id,   y,   X,   m,   mcmc = 1000,   burnin = 1000,   thin = 1,   verbose = 0,   b0 = 0,   B0 = 0.001,   c0 = 0.001,   d0 = 0.001,   delta0 = 0,   Delta0 = 0.001,   a = NULL,   b = NULL,   seed = NA,   ... )"},{"path":"/reference/HMMpanelFE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Markov Chain Monte Carlo for the Hidden Markov Fixed-effects Model — HMMpanelFE","text":"subject.id numeric vector indicating group number. start 1. y response variable. X model matrix excluding constant. m vector break numbers subject panel. mcmc number MCMC iterations burn-. burnin number burn-iterations sampler. thin thinning interval used simulation.  number MCMC iterations must divisible value. verbose switch determines whether progress sampler printed screen.  verbose greater 0, iteration number posterior density samples printed screen every verboseth iteration. b0 prior mean \\(\\beta\\).  can either scalar column vector dimension equal number betas. takes scalar value, value serve prior mean betas. B0 prior precision \\(\\beta\\).  can either scalar square matrix dimensions equal number betas.  takes scalar value, value times identity matrix serves prior precision beta. Default value 0 equivalent improper uniform prior beta. c0 \\(c_0/2\\) shape parameter inverse Gamma prior \\(\\sigma^2\\) (variance disturbances). amount information inverse Gamma prior something like \\(c_0\\) pseudo-observations. d0 \\(d_0/2\\) scale parameter inverse Gamma prior \\(\\sigma^2\\) (variance disturbances). constructing inverse Gamma prior, \\(d_0\\) acts like sum squared errors \\(c_0\\) pseudo-observations. delta0 prior mean \\(\\alpha\\). Delta0 prior precision \\(\\alpha\\). \\(\\) shape1 beta prior transition probabilities.  default, expected duration computed corresponding b values assigned. expected duration sample period divided number states. b \\(b\\) shape2 beta prior transition probabilities.  default, expected duration computed corresponding b values assigned. expected duration sample period divided number states. seed seed random number generator.  NA, current R system seed used. ... arguments passed","code":""},{"path":"/reference/HMMpanelFE.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Markov Chain Monte Carlo for the Hidden Markov Fixed-effects Model — HMMpanelFE","text":"mcmc object contains posterior sample.   object can summarized functions provided coda   package.  object contains attribute sigma storage   matrix contains time-varying residual variance, attribute  state storage matrix contains posterior samples   hidden states, attribute delta storage matrix   containing time-varying intercepts.","code":""},{"path":"/reference/HMMpanelFE.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Markov Chain Monte Carlo for the Hidden Markov Fixed-effects Model — HMMpanelFE","text":"HMMpanelFE simulates fixed-effect hidden Markov pbject level: $$\\varepsilon_{} \\sim \\mathcal{N}(\\alpha_{im}, \\sigma^2_{im})$$ assume standard, semi-conjugate priors: $$\\beta \\sim \\mathcal{N}(b_0,B_0^{-1})$$ : $$\\sigma^{-2} \\sim \\mathcal{G}amma(c_0/2, d_0/2)$$ : $$\\alpha \\sim \\mathcal{N}(delta_0,Delta_0^{-1})$$ \\(\\beta\\), \\(\\alpha\\) \\(\\sigma^{-2}\\) assumed priori independent. : $$p_{mm} \\sim \\mathcal{B}eta(, b),\\;\\; m = 1, \\ldots, M$$ \\(M\\) number states. OLS estimates used starting values.","code":""},{"path":"/reference/HMMpanelFE.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Markov Chain Monte Carlo for the Hidden Markov Fixed-effects Model — HMMpanelFE","text":"Jong Hee Park, 2012. ``Unified Method Dynamic   Cross-Sectional Heterogeneity: Introducing Hidden Markov Panel   Models.''  American Journal Political Science.56:   1040-1054. <doi: 10.1111/j.1540-5907.2012.00590.x> Siddhartha Chib. 1998. ``Estimation comparison multiple   change-point models.'' Journal Econometrics. 86: 221-241.   <doi: 10.1016/S0304-4076(97)00115-2> Andrew D. Martin, Kevin M. Quinn, Jong Hee Park. 2011.   ``MCMCpack: Markov Chain Monte Carlo R.'', Journal Statistical   Software. 42(9): 1-21.  doi:10.18637/jss.v042.i09 .","code":""},{"path":"/reference/HMMpanelFE.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Markov Chain Monte Carlo for the Hidden Markov Fixed-effects Model — HMMpanelFE","text":"","code":"if (FALSE) {   ## data generating   set.seed(1974)   N <- 30   T <- 80   NT <- N*T    ## true parameter values   true.beta <- c(1, 1)   true.sigma <- 3   x1 <- rnorm(NT)   x2 <- runif(NT, 2, 4)    ## group-specific breaks   break.point = rep(T/2, N); break.sigma=c(rep(1, N));   break.list <- rep(1, N)    X <- as.matrix(cbind(x1, x2), NT, );   y <- rep(NA, NT)   id  <-  rep(1:N, each=NT/N)   K <-  ncol(X);   true.beta <- as.matrix(true.beta, K, 1)    ## compute the break probability   ruler <- c(1:T)   W.mat <- matrix(NA, T, N)   for (i in 1:N){     W.mat[, i] <- pnorm((ruler-break.point[i])/break.sigma[i])   }   Weight <- as.vector(W.mat)    ## draw time-varying individual effects and sample y   j = 1   true.sigma.alpha <- 30   true.alpha1 <- true.alpha2 <- rep(NA, N)   for (i in 1:N){     Xi <- X[j:(j+T-1), ]     true.mean <- Xi  %*% true.beta     weight <- Weight[j:(j+T-1)]     true.alpha1[i] <- rnorm(1, 0, true.sigma.alpha)     true.alpha2[i] <- -1*true.alpha1[i]     y[j:(j+T-1)] <- ((1-weight)*true.mean + (1-weight)*rnorm(T, 0, true.sigma) +             (1-weight)*true.alpha1[i]) +             (weight*true.mean + weight*rnorm(T, 0, true.sigma) + weight*true.alpha2[i])     j <- j + T   }    ## extract the standardized residuals from the OLS with fixed-effects   FEols <- lm(y ~ X + as.factor(id) -1 )   resid.all <- rstandard(FEols)   time.id <- rep(1:80, N)    ## model fitting   G <- 100   BF <- testpanelSubjectBreak(subject.id=id, time.id=time.id,          resid= resid.all, max.break=3, minimum = 10,          mcmc=G, burnin = G, thin=1, verbose=G,          b0=0, B0=1/100, c0=2, d0=2, Time = time.id)    ## get the estimated break numbers   estimated.breaks <- make.breaklist(BF, threshold=3)    ## model fitting   out <- HMMpanelFE(subject.id = id, y, X=X, m =  estimated.breaks,              mcmc=G, burnin=G, thin=1, verbose=G,              b0=0, B0=1/100, c0=2, d0=2, delta0=0, Delta0=1/100)    ## print out the slope estimate   ## true values are 1 and 1   summary(out)    ## compare them with the result from the constant fixed-effects   summary(FEols) }"},{"path":"/reference/HMMpanelRE.html","id":null,"dir":"Reference","previous_headings":"","what":"Markov Chain Monte Carlo for the Hidden Markov Random-effects Model — HMMpanelRE","title":"Markov Chain Monte Carlo for the Hidden Markov Random-effects Model — HMMpanelRE","text":"HMMpanelRE generates sample posterior distribution hidden Markov random-effects model discussed Park (2011). code works panel data starting point.  sampling panel parameters based Algorithm 2 Chib Carlin (1999). model uses multivariate Normal prior fixed effects parameters varying individual effects, Inverse-Wishart prior random-effects parameters, Inverse-Gamma prior residual error variance, Beta prior transition probabilities.  user supplies data priors, sample posterior distribution returned mcmc object, can subsequently analyzed functions provided coda package.","code":""},{"path":"/reference/HMMpanelRE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Markov Chain Monte Carlo for the Hidden Markov Random-effects Model — HMMpanelRE","text":"","code":"HMMpanelRE(   subject.id,   time.id,   y,   X,   W,   m = 1,   mcmc = 1000,   burnin = 1000,   thin = 1,   verbose = 0,   b0 = 0,   B0 = 0.001,   c0 = 0.001,   d0 = 0.001,   r0,   R0,   a = NULL,   b = NULL,   seed = NA,   beta.start = NA,   sigma2.start = NA,   D.start = NA,   P.start = NA,   marginal.likelihood = c(\"none\", \"Chib95\"),   ... )"},{"path":"/reference/HMMpanelRE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Markov Chain Monte Carlo for the Hidden Markov Random-effects Model — HMMpanelRE","text":"subject.id numeric vector indicating group number. start 1. time.id numeric vector indicating time unit. start 1. y dependent variable X model matrix fixed-effects W model matrix random-effects. W subset X. m number changepoints. mcmc number MCMC iterations burn-. burnin number burn-iterations sampler. thin thinning interval used simulation.  number MCMC iterations must divisible value. verbose switch determines whether progress sampler printed screen.  verbose greater 0, iteration number posterior density samples printed screen every verboseth iteration. b0 prior mean \\(\\beta\\).  can either scalar column vector dimension equal number betas. takes scalar value, value serve prior mean betas. B0 prior precision \\(\\beta\\).  can either scalar square matrix dimensions equal number betas.  takes scalar value, value times identity matrix serves prior precision beta. Default value 0 equivalent improper uniform prior beta. c0 \\(c_0/2\\) shape parameter inverse Gamma prior \\(\\sigma^2\\) (variance disturbances). amount information inverse Gamma prior something like \\(c_0\\) pseudo-observations. d0 \\(d_0/2\\) scale parameter inverse Gamma prior \\(\\sigma^2\\) (variance disturbances). constructing inverse Gamma prior, \\(d_0\\) acts like sum squared errors \\(c_0\\) pseudo-observations. r0 shape parameter Inverse-Wishart prior variance matrix random effects. Set r=q uninformative prior q number random effects R0 scale matrix Inverse-Wishart prior variance matrix random effects. must square q-dimension matrix. Use plausible variance regarding random effects diagonal R. \\(\\) shape1 beta prior transition probabilities.  default, expected duration computed corresponding b values assigned. expected duration sample period divided number states. b \\(b\\) shape2 beta prior transition probabilities.  default, expected duration computed corresponding b values assigned. expected duration sample period divided number states. seed seed random number generator.  NA, current R system seed used. beta.start starting values beta vector. can either scalar column vector dimension equal number betas.  default value NA use draws Uniform distribution boundary data starting value. scalar, value serve starting value mean betas. covariate, log value means used. sigma2.start starting values \\(\\sigma^2\\). can either scalar column vector dimension equal number states. D.start starting values beta vector. can either scalar column vector dimension equal number betas. default value NA use draws Uniform distribution boundary data starting value. scalar, value serve starting value mean betas. covariate, log value means used. P.start starting values transition matrix. user provide square matrix dimension equal number states. default, draws Beta(0.9, 0.1) used construct proper transition matrix raw except last raw. marginal.likelihood marginal likelihood calculated?  Options : none case marginal likelihood calculated Chib95 case method Chib (1995) used. ... arguments passed","code":""},{"path":"/reference/HMMpanelRE.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Markov Chain Monte Carlo for the Hidden Markov Random-effects Model — HMMpanelRE","text":"mcmc object contains posterior sample.   object can summarized functions provided coda   package.  object contains attribute prob.state storage matrix contains probability \\(state_i\\)   period, log-marginal likelihood model   (logmarglike).","code":""},{"path":"/reference/HMMpanelRE.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Markov Chain Monte Carlo for the Hidden Markov Random-effects Model — HMMpanelRE","text":"HMMpanelRE simulates random-effect hidden Markov panel model introduced Park (2011). model takes following form: $$y_i = X_i \\beta_m + W_i b_i + \\varepsilon_i\\;\\; m = 1, \\ldots, M$$ group \\(\\) \\(k_i\\) observations.  Random-effects parameters assumed time-varying system level: $$b_i \\sim \\mathcal{N}_q(0, D_m)$$ $$\\varepsilon_i \\sim \\mathcal{N}(0, \\sigma^2_m I_{k_i})$$ errors: assume standard, conjugate priors: $$\\beta \\sim \\mathcal{N}_p(b0, B0)$$ : $$\\sigma^{2} \\sim \\mathcal{IG}amma(c0/2, d0/2)$$ : $$D \\sim \\mathcal{IW}ishart(r0, R0)$$ See Chib Carlin (1999) details. : $$p_{mm} \\sim \\mathcal{B}eta(, b),\\;\\; m = 1, \\ldots, M$$ \\(M\\) number states. NOTE: provide default parameters priors precision matrix random effects. fitting one models, utmost importance choose prior reflects prior beliefs random effects. Using dwish rwish functions might useful choosing values.","code":""},{"path":"/reference/HMMpanelRE.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Markov Chain Monte Carlo for the Hidden Markov Random-effects Model — HMMpanelRE","text":"Jong Hee Park, 2012. ``Unified Method Dynamic   Cross-Sectional Heterogeneity: Introducing Hidden Markov Panel   Models.''  American Journal Political Science.56:   1040-1054. <doi: 10.1111/j.1540-5907.2012.00590.x> Siddhartha Chib. 1998. ``Estimation comparison multiple   change-point models.'' Journal Econometrics. 86:   221-241. <doi: 10.1016/S0304-4076(97)00115-2> Andrew D. Martin, Kevin M. Quinn, Jong Hee Park. 2011. ``MCMCpack: Markov Chain Monte Carlo R.'', Journal Statistical Software.  42(9): 1-21. doi:10.18637/jss.v042.i09 .","code":""},{"path":"/reference/HMMpanelRE.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Markov Chain Monte Carlo for the Hidden Markov Random-effects Model — HMMpanelRE","text":"","code":"if (FALSE) {   ## data generating   set.seed(1977)   Q <- 3   true.beta1   <-  c(1, 1, 1) ; true.beta2   <-  c(-1, -1, -1)   true.sigma2 <-  c(2, 5); true.D1 <- diag(.5, Q); true.D2 <- diag(2.5, Q)   N=30; T=100;   NT <- N*T   x1 <- runif(NT, 1, 2)   x2 <- runif(NT, 1, 2)   X <- cbind(1, x1, x2);   W <- X;   y <- rep(NA, NT)    ## true break numbers are one and at the center   break.point = rep(T/2, N); break.sigma=c(rep(1, N));   break.list <- rep(1, N)   id  <-  rep(1:N, each=NT/N)   K <-  ncol(X);   ruler <- c(1:T)    ## compute the weight for the break   W.mat <- matrix(NA, T, N)   for (i in 1:N){     W.mat[, i] <- pnorm((ruler-break.point[i])/break.sigma[i])   }   Weight <- as.vector(W.mat)    ## data generating by weighting two means and variances   j = 1   for (i in 1:N){     Xi <- X[j:(j+T-1), ]     Wi <- W[j:(j+T-1), ]     true.V1 <- true.sigma2[1]*diag(T) + Wi%*%true.D1%*%t(Wi)     true.V2 <- true.sigma2[2]*diag(T) + Wi%*%true.D2%*%t(Wi)     true.mean1 <- Xi%*%true.beta1     true.mean2 <- Xi%*%true.beta2     weight <- Weight[j:(j+T-1)]     y[j:(j+T-1)] <- (1-weight)*true.mean1 + (1-weight)*chol(true.V1)%*%rnorm(T) +       weight*true.mean2 + weight*chol(true.V2)%*%rnorm(T)     j <- j + T   }   ## model fitting   subject.id <- c(rep(1:N, each=T))   time.id <- c(rep(1:T, N))    ## model fitting   G <- 100   b0  <- rep(0, K) ; B0  <- solve(diag(100, K))   c0  <- 2; d0  <- 2   r0  <- 5; R0  <- diag(c(1, 0.1, 0.1))   subject.id <- c(rep(1:N, each=T))   time.id <- c(rep(1:T, N))   out1 <- HMMpanelRE(subject.id, time.id, y, X, W, m=1,                      mcmc=G, burnin=G, thin=1, verbose=G,                      b0=b0, B0=B0, c0=c0, d0=d0, r0=r0, R0=R0)    ## latent state changes   plotState(out1)    ## print mcmc output   summary(out1)    }"},{"path":"/reference/InvGamma.html","id":null,"dir":"Reference","previous_headings":"","what":"The Inverse Gamma Distribution — InvGamma","title":"The Inverse Gamma Distribution — InvGamma","text":"Density function random generation inverse gamma distribution.","code":""},{"path":"/reference/InvGamma.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Inverse Gamma Distribution — InvGamma","text":"","code":"dinvgamma(x, shape, scale = 1)  rinvgamma(n, shape, scale = 1)"},{"path":"/reference/InvGamma.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Inverse Gamma Distribution — InvGamma","text":"x Scalar location evaluate density. shape Scalar shape parameter. scale Scalar scale parameter (default value one). n Number draws distribution.","code":""},{"path":"/reference/InvGamma.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Inverse Gamma Distribution — InvGamma","text":"dinvgamma evaluates density x. rinvgamma takes n draws inverse Gamma distribution. parameterization consistent Gamma Distribution stats package.","code":""},{"path":"/reference/InvGamma.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Inverse Gamma Distribution — InvGamma","text":"inverse gamma random variable shape \\(\\) scale \\(b\\) mean \\(\\frac{b}{-1}\\) (assuming \\(>1\\)) variance \\(\\frac{b^2}{(-1)^2(-2)}\\) (assuming \\(>2\\)).","code":""},{"path":"/reference/InvGamma.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The Inverse Gamma Distribution — InvGamma","text":"Andrew Gelman, John B. Carlin, Hal S. Stern, Donald B. Rubin. 2004. Bayesian Data Analysis. 2nd Edition. Boca Raton: Chapman & Hall.","code":""},{"path":[]},{"path":"/reference/InvGamma.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Inverse Gamma Distribution — InvGamma","text":"","code":"density <- dinvgamma(4.2, 1.1) draws <- rinvgamma(10, 3.2)"},{"path":"/reference/InvWishart.html","id":null,"dir":"Reference","previous_headings":"","what":"The Inverse Wishart Distribution — InvWishart","title":"The Inverse Wishart Distribution — InvWishart","text":"Density function random generation Inverse Wishart distribution.","code":""},{"path":"/reference/InvWishart.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Inverse Wishart Distribution — InvWishart","text":"","code":"riwish(v, S)  diwish(W, v, S)"},{"path":"/reference/InvWishart.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Inverse Wishart Distribution — InvWishart","text":"v Degrees freedom (scalar). S Scale matrix \\((p \\times p)\\). W Positive definite matrix W \\((p \\times p)\\).","code":""},{"path":"/reference/InvWishart.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Inverse Wishart Distribution — InvWishart","text":"diwish evaluates density positive definite matrix W. riwish generates one random draw distribution.","code":""},{"path":"/reference/InvWishart.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Inverse Wishart Distribution — InvWishart","text":"mean inverse Wishart random variable v degrees freedom scale matrix S \\((v-p-1)^{-1}S\\).","code":""},{"path":"/reference/InvWishart.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Inverse Wishart Distribution — InvWishart","text":"","code":"density <- diwish(matrix(c(2,-.3,-.3,4),2,2), 3, matrix(c(1,.3,.3,1),2,2)) draw <- riwish(3, matrix(c(1,.3,.3,1),2,2))"},{"path":"/reference/MCMCSVDreg.html","id":null,"dir":"Reference","previous_headings":"","what":"Markov Chain Monte Carlo for SVD Regression — MCMCSVDreg","title":"Markov Chain Monte Carlo for SVD Regression — MCMCSVDreg","text":"function generates sample posterior distribution linear regression model Gaussian errors design matrix decomposed singular value decomposition.sampling done via Gibbs sampling algorithm.  user supplies data priors, sample posterior distribution returned mcmc object, can subsequently analyzed functions provided coda package.","code":""},{"path":"/reference/MCMCSVDreg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Markov Chain Monte Carlo for SVD Regression — MCMCSVDreg","text":"","code":"MCMCSVDreg(   formula,   data = NULL,   burnin = 1000,   mcmc = 10000,   thin = 1,   verbose = 0,   seed = NA,   tau2.start = 1,   g0 = 0,   a0 = 0.001,   b0 = 0.001,   c0 = 2,   d0 = 2,   w0 = 1,   beta.samp = FALSE,   intercept = TRUE,   ... )"},{"path":"/reference/MCMCSVDreg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Markov Chain Monte Carlo for SVD Regression — MCMCSVDreg","text":"formula Model formula. Predictions returned elements y coded NA. data Data frame. burnin number burn-iterations sampler. mcmc number MCMC iterations burnin. thin thinning interval used simulation.  number MCMC iterations must divisible value. verbose switch determines whether progress sampler printed screen.  verbose greater 0 iteration number, \\(\\beta\\) vector, error variance printed screen every verboseth iteration. seed seed random number generator.  NA, Mersenne Twister generator used default seed 12345; integer passed used seed Mersenne twister.  user can also pass list length two use L'Ecuyer random number generator, suitable parallel computation.  first element list L'Ecuyer seed, vector length six NA (NA default seed rep(12345,6) used).  second element list positive substream number. See MCMCpack specification details. tau2.start starting values \\(\\tau^2\\) vector. Can either scalar vector. scalar passed value starting value elements \\(\\tau^2\\). g0 prior mean \\(\\gamma\\).  can either scalar column vector dimension equal number gammas. takes scalar value, value serve prior mean betas. a0 \\(a_0/2\\) shape parameter inverse Gamma prior \\(\\sigma^2\\) (variance disturbances). amount information inverse Gamma prior something like \\(a_0\\) pseudo-observations. b0 \\(b_0/2\\) scale parameter inverse Gamma prior \\(\\sigma^2\\) (variance disturbances). constructing inverse Gamma prior, \\(b_0\\) acts like sum squared errors \\(a_0\\) pseudo-observations. c0 \\(c_0/2\\) shape parameter inverse Gamma prior \\(\\tau_i^2\\). d0 \\(d_0/2\\) scale parameter inverse Gamma prior \\(\\tau_i^2\\). w0 prior probability \\(\\gamma_i = 0\\).  Can either scalar \\(N\\) vector \\(N\\) number observations. beta.samp Logical indicating whether sampled elements beta stored returned. intercept Logical indicating whether original design matrix include constant term. ... arguments passed","code":""},{"path":"/reference/MCMCSVDreg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Markov Chain Monte Carlo for SVD Regression — MCMCSVDreg","text":"mcmc object contains posterior sample.    object can summarized functions provided coda   package.","code":""},{"path":"/reference/MCMCSVDreg.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Markov Chain Monte Carlo for SVD Regression — MCMCSVDreg","text":"model takes following form: $$y = X \\beta + \\varepsilon$$ errors assumed iid Gaussian: $$\\varepsilon_{} \\sim \\mathcal{N}(0, \\sigma^2)$$ Let \\(N\\) denote number rows \\(X\\) \\(P\\) number columns \\(X\\). Unlike standard regression setup \\(N >> P\\) case \\(P >> N\\). deal problem singular value decomposition \\(X'\\) performed: \\(X' = ADF\\) regression model becomes $$y = F'D \\gamma + \\varepsilon$$ \\(\\gamma = ' \\beta\\) assume following priors: $$\\sigma^{-2} \\sim \\mathcal{G}amma(a_0/2, b_0/2)$$ $$\\tau^{-2} \\sim \\mathcal{G}amma(c_0/2, d_0/2)$$ $$\\gamma_i \\sim w0_i \\delta_0 + (1-w0_i) \\mathcal{N}(g0_i, \\sigma^2 \\tau_i^2/ d_i^2)$$ \\(\\delta_0\\) unit point mass 0 \\(d_i\\) \\(\\)th diagonal element \\(D\\).","code":""},{"path":"/reference/MCMCSVDreg.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Markov Chain Monte Carlo for SVD Regression — MCMCSVDreg","text":"Mike West, Josheph Nevins, Jeffrey Marks, Rainer Spang,   Harry Zuzan. 2000. ``DNA Microarray Data Analysis   Regression Modeling Genetic Expression   Profiling.\" Duke ISDS working paper. Gottardo, Raphael, Adrian Raftery. 2004. ``Markov chain Monte Carlo mixtures singular distributions.'' Statistics Department, University Washington, Technical Report 470. Andrew D. Martin, Kevin M. Quinn, Jong Hee Park. 2011. ``MCMCpack: Markov Chain Monte Carlo R.'', Journal Statistical Software.  42(9): 1-21. doi:10.18637/jss.v042.i09 . Daniel Pemstein, Kevin M. Quinn, Andrew D. Martin.  2007. Scythe Statistical Library 1.0. http://scythe.lsa.umich.edu. Martyn Plummer, Nicky Best, Kate Cowles, Karen Vines. 2006. ``Output Analysis Diagnostics MCMC (CODA)'', R News. 6(1): 7-11. https://CRAN.R-project.org/doc/Rnews/Rnews_2006-1.pdf.","code":""},{"path":[]},{"path":"/reference/MCMCbinaryChange.html","id":null,"dir":"Reference","previous_headings":"","what":"Markov Chain Monte Carlo for a Binary Multiple Changepoint Model — MCMCbinaryChange","title":"Markov Chain Monte Carlo for a Binary Multiple Changepoint Model — MCMCbinaryChange","text":"function generates sample posterior distribution binary model multiple changepoints. function uses Markov chain Monte Carlo method Chib (1998).  user supplies data priors, sample posterior distribution returned mcmc object, can subsequently analyzed functions provided coda package.","code":""},{"path":"/reference/MCMCbinaryChange.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Markov Chain Monte Carlo for a Binary Multiple Changepoint Model — MCMCbinaryChange","text":"","code":"MCMCbinaryChange(   data,   m = 1,   c0 = 1,   d0 = 1,   a = NULL,   b = NULL,   burnin = 10000,   mcmc = 10000,   thin = 1,   verbose = 0,   seed = NA,   phi.start = NA,   P.start = NA,   marginal.likelihood = c(\"none\", \"Chib95\"),   ... )"},{"path":"/reference/MCMCbinaryChange.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Markov Chain Monte Carlo for a Binary Multiple Changepoint Model — MCMCbinaryChange","text":"data data. m number changepoints. c0 \\(c_0\\) shape1 parameter Beta prior \\(\\phi\\) (mean). d0 \\(d_0\\) shape2 parameter Beta prior \\(\\phi\\) (mean). \\(\\) shape1 beta prior transition probabilities.  default, expected duration computed corresponding b values assigned. expected duration sample period divided number states. b \\(b\\) shape2 beta prior transition probabilities.  default, expected duration computed corresponding b values assigned. expected duration sample period divided number states. burnin number burn-iterations sampler. mcmc number MCMC iterations burn-. thin thinning interval used simulation.  number MCMC iterations must divisible value. verbose switch determines whether progress sampler printed screen.  verbose greater 0, iteration number posterior density samples printed screen every verboseth iteration. seed seed random number generator.  NA, current R system seed used. phi.start starting values mean. default value NA use draws Uniform distribution. P.start starting values transition matrix. user provide square matrix dimension equal number states. default, draws Beta(0.9, 0.1) used construct proper transition matrix raw except last raw. marginal.likelihood marginal likelihood calculated?  Options : none case marginal likelihood calculated, Chib95 case method Chib (1995) used. ... arguments passed","code":""},{"path":"/reference/MCMCbinaryChange.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Markov Chain Monte Carlo for a Binary Multiple Changepoint Model — MCMCbinaryChange","text":"mcmc object contains posterior sample.    object can summarized functions provided coda   package.  object contains attribute prob.state storage matrix contains probability \\(state_i\\)   period, log-marginal likelihood model   (logmarglike).","code":""},{"path":"/reference/MCMCbinaryChange.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Markov Chain Monte Carlo for a Binary Multiple Changepoint Model — MCMCbinaryChange","text":"MCMCbinaryChange simulates posterior distribution binary model multiple changepoints. model takes following form: $$Y_t \\sim \\mathcal{B}ernoulli(\\phi_i),\\;\\; = 1, \\ldots, k$$ \\(k\\) number states. assume Beta priors \\(\\phi_{}\\) transition probabilities: $$\\phi_i \\sim \\mathcal{B}eta(c_0, d_0)$$ : $$p_{mm} \\sim \\mathcal{B}eta{}{b},\\;\\; m = 1, \\ldots, k$$ \\(M\\) number states.","code":""},{"path":"/reference/MCMCbinaryChange.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Markov Chain Monte Carlo for a Binary Multiple Changepoint Model — MCMCbinaryChange","text":"Jong Hee Park. 2011. ``Changepoint Analysis Binary   Ordinal Probit Models: Application Bank Rate Policy   Interwar Gold Standard.\"   Political Analysis. 19: 188-204.   <doi:10.1093/pan/mpr007> Andrew D. Martin, Kevin M. Quinn, Jong Hee Park. 2011. ``MCMCpack: Markov Chain Monte Carlo R.'', Journal Statistical Software.  42(9): 1-21. doi:10.18637/jss.v042.i09 . Siddhartha Chib. 1995. ``Marginal Likelihood Gibbs Output.''  Journal American Statistical Association. 90: 1313-1321. <doi: 10.1080/01621459.1995.10476635>","code":""},{"path":[]},{"path":"/reference/MCMCbinaryChange.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Markov Chain Monte Carlo for a Binary Multiple Changepoint Model — MCMCbinaryChange","text":"","code":"if (FALSE) {     set.seed(19173)     true.phi<- c(0.5, 0.8, 0.4)      ## two breaks at c(80, 180)     y1 <- rbinom(80, 1,  true.phi[1])     y2 <- rbinom(100, 1, true.phi[2])     y3 <- rbinom(120, 1, true.phi[3])     y  <- as.ts(c(y1, y2, y3))      model0 <- MCMCbinaryChange(y, m=0, c0=2, d0=2, mcmc=100, burnin=100, verbose=50,             marginal.likelihood = \"Chib95\")     model1 <- MCMCbinaryChange(y, m=1, c0=2, d0=2, mcmc=100, burnin=100, verbose=50,             marginal.likelihood = \"Chib95\")     model2 <- MCMCbinaryChange(y, m=2, c0=2, d0=2, mcmc=100, burnin=100, verbose=50,             marginal.likelihood = \"Chib95\")     model3 <- MCMCbinaryChange(y, m=3, c0=2, d0=2, mcmc=100, burnin=100, verbose=50,             marginal.likelihood = \"Chib95\")     model4 <- MCMCbinaryChange(y, m=4, c0=2, d0=2, mcmc=100, burnin=100, verbose=50,             marginal.likelihood = \"Chib95\")     model5 <- MCMCbinaryChange(y, m=5, c0=2, d0=2, mcmc=100, burnin=100, verbose=50,             marginal.likelihood = \"Chib95\")      print(BayesFactor(model0, model1, model2, model3, model4, model5))      ## plot two plots in one screen     par(mfrow=c(attr(model2, \"m\") + 1, 1), mai=c(0.4, 0.6, 0.3, 0.05))     plotState(model2, legend.control = c(1, 0.6))     plotChangepoint(model2, verbose = TRUE, ylab=\"Density\", start=1, overlay=TRUE)      }"},{"path":"/reference/MCMCdynamicEI.html","id":null,"dir":"Reference","previous_headings":"","what":"Markov Chain Monte Carlo for Quinn's Dynamic Ecological Inference Model — MCMCdynamicEI","title":"Markov Chain Monte Carlo for Quinn's Dynamic Ecological Inference Model — MCMCdynamicEI","text":"MCMCdynamicEI used fit Quinn's dynamic ecological inference model partially observed 2 x 2 contingency tables.","code":""},{"path":"/reference/MCMCdynamicEI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Markov Chain Monte Carlo for Quinn's Dynamic Ecological Inference Model — MCMCdynamicEI","text":"","code":"MCMCdynamicEI(   r0,   r1,   c0,   c1,   burnin = 5000,   mcmc = 50000,   thin = 1,   verbose = 0,   seed = NA,   W = 0,   a0 = 0.825,   b0 = 0.0105,   a1 = 0.825,   b1 = 0.0105,   ... )"},{"path":"/reference/MCMCdynamicEI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Markov Chain Monte Carlo for Quinn's Dynamic Ecological Inference Model — MCMCdynamicEI","text":"r0 \\((ntables \\times 1)\\) vector row sums row 0. r1 \\((ntables \\times 1)\\) vector row sums row 1. c0 \\((ntables \\times 1)\\) vector column sums column 0. c1 \\((ntables \\times 1)\\) vector column sums column 1. burnin number burn-scans sampler. mcmc number mcmc scans saved. thin thinning interval used simulation.  number mcmc iterations must divisible value. verbose switch determines whether progress sampler printed screen.  verbose greater 0 every verboseth iteration printed screen. seed seed random number generator.  NA, Mersenne Twister generator used default seed 12345; integer passed used seed Mersenne twister.  user can also pass list length two use L'Ecuyer random number generator, suitable parallel computation.  first element list L'Ecuyer seed, vector length six NA (NA default seed rep(12345,6) used).  second element list positive substream number. See MCMCpack specification details. W Weight (precision) matrix structuring temporal dependence among elements \\(\\theta_{0}\\) \\(\\theta_{1}\\). default value 0 construct weight matrix corresponds random walk priors \\(\\theta_{0}\\) \\(\\theta_{1}\\). default assumes tables equally spaced throughout time elements \\(r0\\), \\(r1\\), \\(c0\\), \\(c1\\) temporally ordered. a0 a0/2 shape parameter inverse-gamma prior \\(\\sigma^2_0\\) parameter. b0 b0/2 scale parameter inverse-gamma prior \\(\\sigma^2_0\\) parameter. a1 a1/2 shape parameter inverse-gamma prior \\(\\sigma^2_1\\) parameter. b1 b1/2 scale parameter inverse-gamma prior \\(\\sigma^2_1\\) parameter. ... arguments passed","code":""},{"path":"/reference/MCMCdynamicEI.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Markov Chain Monte Carlo for Quinn's Dynamic Ecological Inference Model — MCMCdynamicEI","text":"mcmc object contains sample posterior   distribution.  object can summarized functions   provided coda package.","code":""},{"path":"/reference/MCMCdynamicEI.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Markov Chain Monte Carlo for Quinn's Dynamic Ecological Inference Model — MCMCdynamicEI","text":"Consider following partially observed 2 2 contingency table unit \\(t\\) \\(t=1,\\ldots,ntables\\): \\(r_{0t}\\), \\(r_{1t}\\), \\(c_{0t}\\), \\(c_{1t}\\), \\(N_t\\) non-negative integers observed. interior cell entries observed. assumed \\(Y_{0t}|r_{0t} \\sim \\mathcal{B}inomial(r_{0t}, p_{0t})\\) \\(Y_{1t}|r_{1t} \\sim \\mathcal{B}inomial(r_{1t}, p_{1t})\\).  Let \\(\\theta_{0t} = log(p_{0t}/(1-p_{0t}))\\), \\(\\theta_{1t} = log(p_{1t}/(1-p_{1t}))\\). following prior distributions assumed: $$p(\\theta_0|\\sigma^2_0) \\propto \\sigma_0^{-ntables} \\exp \\left(-\\frac{1}{2\\sigma^2_0} \\theta'_{0} P \\theta_{0}\\right)$$ $$p(\\theta_1|\\sigma^2_1) \\propto \\sigma_1^{-ntables} \\exp \\left(-\\frac{1}{2\\sigma^2_1} \\theta'_{1} P \\theta_{1}\\right)$$ \\(P_{ts}\\) = \\(-W_{ts}\\) \\(t\\) equal \\(s\\) \\(P_{tt}\\) = \\(\\sum_{s \\ne t}W_{ts}\\).  \\(\\theta_{0t}\\) assumed priori independent \\(\\theta_{1t}\\) t.  addition, following hyperpriors assumed: \\(\\sigma^2_0 \\sim \\mathcal{IG}(a_0/2, b_0/2)\\), \\(\\sigma^2_1 \\sim \\mathcal{IG}(a_1/2, b_1/2)\\). Inference centers \\(p_0\\), \\(p_1\\), \\(\\sigma^2_0\\), \\(\\sigma^2_1\\).  Univariate slice sampling (Neal, 2003) together Gibbs sampling used sample posterior distribution.","code":""},{"path":"/reference/MCMCdynamicEI.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Markov Chain Monte Carlo for Quinn's Dynamic Ecological Inference Model — MCMCdynamicEI","text":"Kevin Quinn. 2004. ``Ecological Inference Presence Temporal Dependence.\" Ecological Inference: New Methodological Strategies. Gary King, Ori Rosen, Martin . Tanner (eds.). New York: Cambridge University Press. Andrew D. Martin, Kevin M. Quinn, Jong Hee Park. 2011.  ``MCMCpack: Markov Chain Monte Carlo R'', Journal Statistical Software. 42(9): 1-21.  doi:10.18637/jss.v042.i09 . Radford Neal. 2003. ``Slice Sampling\" (discussion). Annals Statistics, 31: 705-767. Daniel Pemstein, Kevin M. Quinn, Andrew D. Martin.  2007.  Scythe Statistical Library 1.0. http://scythe.lsa.umich.edu. Martyn Plummer, Nicky Best, Kate Cowles, Karen Vines. 2006.  ``Output Analysis Diagnostics MCMC (CODA)'', R News. 6(1): 7-11. https://CRAN.R-project.org/doc/Rnews/Rnews_2006-1.pdf. Jonathan C. Wakefield. 2004. ``Ecological Inference 2 x 2 Tables.'' Journal Royal Statistical Society, Series . 167(3): 385445.","code":""},{"path":[]},{"path":"/reference/MCMCdynamicEI.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Markov Chain Monte Carlo for Quinn's Dynamic Ecological Inference Model — MCMCdynamicEI","text":"","code":"if (FALSE) { ## simulated data example 1 set.seed(3920) n <- 100 r0 <- rpois(n, 2000) r1 <- round(runif(n, 100, 4000)) p0.true <- pnorm(-1.5 + 1:n/(n/2)) p1.true <- pnorm(1.0 - 1:n/(n/4)) y0 <- rbinom(n, r0, p0.true) y1 <- rbinom(n, r1, p1.true) c0 <- y0 + y1 c1 <- (r0+r1) - c0  ## plot data dtomogplot(r0, r1, c0, c1, delay=0.1)  ## fit dynamic model post1 <- MCMCdynamicEI(r0,r1,c0,c1, mcmc=40000, thin=5, verbose=100,                     seed=list(NA, 1))  ## fit exchangeable hierarchical model post2 <- MCMChierEI(r0,r1,c0,c1, mcmc=40000, thin=5, verbose=100,                     seed=list(NA, 2))  p0meanDyn <- colMeans(post1)[1:n] p1meanDyn <- colMeans(post1)[(n+1):(2*n)] p0meanHier <- colMeans(post2)[1:n] p1meanHier <- colMeans(post2)[(n+1):(2*n)]  ## plot truth and posterior means pairs(cbind(p0.true, p0meanDyn, p0meanHier, p1.true, p1meanDyn, p1meanHier))   ## simulated data example 2 set.seed(8722) n <- 100 r0 <- rpois(n, 2000) r1 <- round(runif(n, 100, 4000)) p0.true <- pnorm(-1.0 + sin(1:n/(n/4))) p1.true <- pnorm(0.0 - 2*cos(1:n/(n/9))) y0 <- rbinom(n, r0, p0.true) y1 <- rbinom(n, r1, p1.true) c0 <- y0 + y1 c1 <- (r0+r1) - c0  ## plot data dtomogplot(r0, r1, c0, c1, delay=0.1)  ## fit dynamic model post1 <- MCMCdynamicEI(r0,r1,c0,c1, mcmc=40000, thin=5, verbose=100,                     seed=list(NA, 1))  ## fit exchangeable hierarchical model post2 <- MCMChierEI(r0,r1,c0,c1, mcmc=40000, thin=5, verbose=100,                     seed=list(NA, 2))  p0meanDyn <- colMeans(post1)[1:n] p1meanDyn <- colMeans(post1)[(n+1):(2*n)] p0meanHier <- colMeans(post2)[1:n] p1meanHier <- colMeans(post2)[(n+1):(2*n)]  ## plot truth and posterior means pairs(cbind(p0.true, p0meanDyn, p0meanHier, p1.true, p1meanDyn, p1meanHier))    }"},{"path":"/reference/MCMCdynamicIRT1d.html","id":null,"dir":"Reference","previous_headings":"","what":"Markov Chain Monte Carlo for Dynamic One Dimensional Item Response\nTheory Model — MCMCdynamicIRT1d_b","title":"Markov Chain Monte Carlo for Dynamic One Dimensional Item Response\nTheory Model — MCMCdynamicIRT1d_b","text":"function generates sample posterior distribution dynamic one dimensional item response theory (IRT) model, Normal random walk priors subject abilities (ideal points), multivariate Normal priors item parameters. user supplies data priors, sample posterior distribution returned mcmc object, can subsequently analyzed functions provided coda package.","code":""},{"path":"/reference/MCMCdynamicIRT1d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Markov Chain Monte Carlo for Dynamic One Dimensional Item Response\nTheory Model — MCMCdynamicIRT1d_b","text":"","code":"MCMCdynamicIRT1d_b(   datamatrix,   item.time.map,   theta.constraints = list(),   burnin = 1000,   mcmc = 20000,   thin = 1,   verbose = 0,   seed = NA,   theta.start = NA,   alpha.start = NA,   beta.start = NA,   tau2.start = 1,   a0 = 0,   A0 = 0.1,   b0 = 0,   B0 = 0.1,   c0 = -1,   d0 = -1,   e0 = 0,   E0 = 1,   store.ability = TRUE,   store.item = TRUE,   ... )  MCMCdynamicIRT1d(   datamatrix,   item.time.map,   theta.constraints = list(),   burnin = 1000,   mcmc = 20000,   thin = 1,   verbose = 0,   seed = NA,   theta.start = NA,   alpha.start = NA,   beta.start = NA,   tau2.start = 1,   a0 = 0,   A0 = 0.1,   b0 = 0,   B0 = 0.1,   c0 = -1,   d0 = -1,   e0 = 0,   E0 = 1,   store.ability = TRUE,   store.item = TRUE,   ... )"},{"path":"/reference/MCMCdynamicIRT1d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Markov Chain Monte Carlo for Dynamic One Dimensional Item Response\nTheory Model — MCMCdynamicIRT1d_b","text":"datamatrix matrix data.  Must 0, 1, missing values.  rows datamatrix correspond subjects columns correspond items. item.time.map vector relates item time period.  element item.time.map gives time period corresponding column datamatrix. assumed minimum value item.time.map 1. theta.constraints list specifying possible simple equality inequality constraints ability parameters. typical entry list one three forms: varname=c constrain ability parameter subject named varname equal c, varname=\"+\" constrain ability parameter subject named varname positive, varname=\"-\" constrain ability parameter subject named varname negative. x matrix without row names defaults names ``V1\",``V2\", ... , etc used. See Rivers (2003) thorough discussion identification IRT models. burnin number burn-iterations sampler. mcmc number Gibbs iterations sampler. thin thinning interval used simulation.  number Gibbs iterations must divisible value. verbose switch determines whether progress sampler printed screen.  verbose greater 0 every verboseth iteration printed screen. seed seed random number generator.  NA, Mersenne Twister generator used default seed 12345; integer passed used seed Mersenne twister.  user can also pass list length two use L'Ecuyer random number generator, suitable parallel computation.  first element list L'Ecuyer seed, vector length six NA (NA default seed rep(12345,6) used).  second element list positive substream number. See MCMCpack specification details. theta.start starting values subject abilities (ideal points). can either scalar column vector dimension equal number voters.  takes scalar value, value serve starting value thetas.  default value NA choose starting values based eigenvalue-eigenvector decomposition aggreement score matrix formed datamatrix. alpha.start starting values \\(\\alpha\\) difficulty parameters. can either scalar column vector dimension equal number items.  takes scalar value, value serve starting value alphas.  default value NA set starting values based series probit regressions condition starting values theta. beta.start starting values \\(\\beta\\) discrimination parameters. can either scalar column vector dimension equal number items.  takes scalar value, value serve starting value betas.  default value NA set starting values based series probit regressions condition starting values theta. tau2.start starting values evolution variances (variance random walk increments ability parameters / ideal points. Order corresponds rows datamatrix. a0 vector containing prior mean difficulty parameters \\(\\alpha\\). many elements items / roll calls. Order corresponds columns datamatrix. scalar passed assumed elements a0 equal scalar. A0 vector containing prior precision (inverse variance) difficulty parameters \\(\\alpha\\). many elements items / roll calls. Order corresponds columns datamatrix. scalar passed assumed elements A0 equal scalar. b0 vector containing prior mean discrimination parameters \\(\\beta\\). many elements items / roll calls. Order corresponds columns datamatrix. scalar passed assumed elements b0 equal scalar. B0 vector containing prior precision (inverse variance) discrimination parameters \\(\\beta\\). many elements items / roll calls. Order corresponds columns datamatrix. scalar passed assumed elements B0 equal scalar. c0 \\(c_{0/2}\\) shape parameter inverse Gamma prior \\(\\tau^2\\) (variance random walk increments).  amount information inverse Gamma prior something like \\(c_0\\) pseudo-observations. c0 can either vector element subject scalar. c0 negative \\(\\tau^2\\) estimated-- values tau2.start used throughout sampling. d0 \\(d_{0/2}\\) scale parameter inverse Gamma prior \\(\\tau^2\\) (variance random walk increments).  constructing inverse Gamma prior, \\(d_0\\) acts like sum squared errors \\(c_0\\) pseudo-observations. d0 can either vector element subject scalar. d0 negative \\(\\tau^2\\) estimated-- values tau2.start used throughout sampling. e0 vector containing prior mean initial ability parameter / ideal point subject. many elements subjects. Order corresponds rows datamatrix. scalar passed assumed elements e0 equal scalar. E0 vector containing prior variance initial ability parameter / ideal point subject. many elements subjects. Order corresponds rows datamatrix. scalar passed assumed elements E0 equal scalar. store.ability switch determines whether store ability parameters posterior analysis. NOTE: situations many individuals storing ability parameters takes enormous amount memory, store.ability TRUE chain thinned heavily, applications small number individuals.  default, item parameters stored. store.item switch determines whether store item parameters posterior analysis.  NOTE: situations many items storing item parameters takes enormous amount memory, store.item FALSE chain thinned heavily, applications small number items.  default, item parameters stored. ... arguments passed","code":""},{"path":"/reference/MCMCdynamicIRT1d.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Markov Chain Monte Carlo for Dynamic One Dimensional Item Response\nTheory Model — MCMCdynamicIRT1d_b","text":"mcmc object contains posterior sample.   object can summarized functions provided coda   package.","code":""},{"path":"/reference/MCMCdynamicIRT1d.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Markov Chain Monte Carlo for Dynamic One Dimensional Item Response\nTheory Model — MCMCdynamicIRT1d_b","text":"MCMCdynamicIRT1d simulates posterior distribution using algorithm Martin Quinn (2002). simulation proper done compiled C++ code maximize efficiency.  Please consult coda documentation comprehensive list functions can used analyze posterior sample. model takes following form. assume subject subject ability (ideal point) denoted \\(\\theta_{j,t}\\) (\\(j\\) indexes subjects \\(t\\) indexes time periods) item difficulty parameter \\(\\alpha_i\\) discrimination parameter \\(\\beta_i\\). observed choice subject \\(j\\) item \\(\\) observed data matrix \\((\\times J)\\). assume choice dictated unobserved utility: $$z_{,j,t} = -\\alpha_i + \\beta_i \\theta_{j,t} + \\varepsilon_{,j,t}$$ disturbances assumed distributed standard Normal. parameters interest subject abilities (ideal points) item parameters. assume following priors.  subject abilities (ideal points): $$\\theta_{j,t} \\sim \\mathcal{N}(\\theta_{j,t-1}, \\tau^2_j)$$ $$\\theta_{j,0} \\sim \\mathcal{N}(e0, E0)$$. evolution variance following prior: $$\\tau^2_j \\sim \\mathcal{IG}(c0/2, d0/2)$$. item parameters standard model, prior : $$\\alpha_i \\sim \\mathcal{N}(a0, A0^{-1})$$ $$\\beta_i \\sim \\mathcal{N}(b0, B0^{-1})$$. model identified proper priors item parameters constraints placed ability parameters. case measurement models, make sure plenty free memory, especially storing item parameters.","code":""},{"path":"/reference/MCMCdynamicIRT1d.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Markov Chain Monte Carlo for Dynamic One Dimensional Item Response\nTheory Model — MCMCdynamicIRT1d_b","text":"Andrew D. Martin Kevin M. Quinn. 2002. \"Dynamic Ideal Point Estimation via Markov Chain Monte Carlo U.S. Supreme Court, 1953-1999.\" Political Analysis. 10: 134-153. <doi:10.1093/pan/10.2.134> Andrew D. Martin, Kevin M. Quinn, Jong Hee Park. 2011.  ``MCMCpack: Markov Chain Monte Carlo R.'', Journal Statistical Software. 42(9): 1-21.  doi:10.18637/jss.v042.i09 .","code":""},{"path":[]},{"path":"/reference/MCMCdynamicIRT1d.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Markov Chain Monte Carlo for Dynamic One Dimensional Item Response\nTheory Model — MCMCdynamicIRT1d_b","text":"Kevin M. Quinn","code":""},{"path":"/reference/MCMCdynamicIRT1d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Markov Chain Monte Carlo for Dynamic One Dimensional Item Response\nTheory Model — MCMCdynamicIRT1d_b","text":"","code":"if (FALSE) {   data(Rehnquist)    ## assign starting values   theta.start <- rep(0, 9)   theta.start[2] <- -3 ## Stevens   theta.start[7] <- 2  ## Thomas    out <- MCMCdynamicIRT1d(t(Rehnquist[,1:9]),                           item.time.map=Rehnquist$time,                           theta.start=theta.start,                           mcmc=50000, burnin=20000, thin=5,                           verbose=500, tau2.start=rep(0.1, 9),                           e0=0, E0=1,                           a0=0, A0=1,                           b0=0, B0=1, c0=-1, d0=-1,                           store.item=FALSE,                           theta.constraints=list(Stevens=\"-\", Thomas=\"+\"))    summary(out)   }"},{"path":"/reference/MCMCfactanal.html","id":null,"dir":"Reference","previous_headings":"","what":"Markov Chain Monte Carlo for Normal Theory Factor Analysis Model — MCMCfactanal","title":"Markov Chain Monte Carlo for Normal Theory Factor Analysis Model — MCMCfactanal","text":"function generates sample posterior distribution normal theory factor analysis model. Normal priors assumed factor loadings factor scores inverse Gamma priors assumed uniquenesses. user supplies data parameters prior distributions, sample posterior distribution returned mcmc object, can subsequently analyzed functions provided coda package.","code":""},{"path":"/reference/MCMCfactanal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Markov Chain Monte Carlo for Normal Theory Factor Analysis Model — MCMCfactanal","text":"","code":"MCMCfactanal(   x,   factors,   lambda.constraints = list(),   data = NULL,   burnin = 1000,   mcmc = 20000,   thin = 1,   verbose = 0,   seed = NA,   lambda.start = NA,   psi.start = NA,   l0 = 0,   L0 = 0,   a0 = 0.001,   b0 = 0.001,   store.scores = FALSE,   std.var = TRUE,   ... )"},{"path":"/reference/MCMCfactanal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Markov Chain Monte Carlo for Normal Theory Factor Analysis Model — MCMCfactanal","text":"x Either formula numeric matrix containing manifest variables. factors number factors fitted. lambda.constraints List lists specifying possible simple equality inequality constraints factor loadings. typical entry list one three forms: varname=list(d,c) constrain dth loading variable named varname equal c, varname=list(d,\"+\") constrain dth loading variable named varname positive, varname=list(d, \"-\") constrain dth loading variable named varname negative. x matrix without column names defaults names ``V1\",``V2\", ... , etc used. data data frame. burnin number burn-iterations sampler. mcmc number iterations sampler. thin thinning interval used simulation.  number iterations must divisible value. verbose switch determines whether progress sampler printed screen.  verbose greater 0 iteration number factor loadings uniquenesses printed screen every verboseth iteration. seed seed random number generator.  NA, Mersenne Twister generator used default seed 12345; integer passed used seed Mersenne twister.  user can also pass list length two use L'Ecuyer random number generator, suitable parallel computation.  first element list L'Ecuyer seed, vector length six NA (NA default seed rep(12345,6) used).  second element list positive substream number. See MCMCpack specification details. lambda.start Starting values factor loading matrix Lambda. lambda.start set scalar starting value unconstrained loadings set scalar. lambda.start matrix dimensions Lambda lambda.start matrix used starting values (except equality-constrained elements). lambda.start set NA (default) starting values unconstrained elements set 0, starting values inequality constrained elements set either 0.5 -0.5 depending nature constraints. psi.start Starting values uniquenesses. psi.start set scalar starting value diagonal elements Psi set value. psi.start \\(k\\)-vector (\\(k\\) number manifest variables) staring value Psi psi.start main diagonal. psi.start set NA (default) starting values uniquenesses set 0.5. l0 means independent Normal prior factor loadings. Can either scalar matrix dimensions Lambda. L0 precisions (inverse variances) independent Normal prior factor loadings. Can either scalar matrix dimensions Lambda. a0 Controls shape inverse Gamma prior uniqueness. actual shape parameter set a0/2. Can either scalar \\(k\\)-vector. b0 Controls scale inverse Gamma prior uniquenesses. actual scale parameter set b0/2. Can either scalar \\(k\\)-vector. store.scores switch determines whether store factor scores posterior analysis.  NOTE: takes enormous amount memory, used chain thinned heavily, applications small number observations.  default, factor scores stored. std.var TRUE (default) manifest variables rescaled zero mean unit variance. Otherwise, manifest variables rescaled zero mean retain observed variances. ... arguments passed","code":""},{"path":"/reference/MCMCfactanal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Markov Chain Monte Carlo for Normal Theory Factor Analysis Model — MCMCfactanal","text":"mcmc object contains sample posterior distribution. object can summarized functions provided coda package.","code":""},{"path":"/reference/MCMCfactanal.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Markov Chain Monte Carlo for Normal Theory Factor Analysis Model — MCMCfactanal","text":"model takes following form: $$x_i = \\Lambda \\phi_i + \\epsilon_i$$ $$\\epsilon_i \\sim \\mathcal{N}(0,\\Psi)$$ \\(x_i\\) \\(k\\)-vector observed variables specific observation \\(\\), \\(\\Lambda\\) \\(k \\times d\\) matrix factor loadings, \\(\\phi_i\\) \\(d\\)-vector latent factor scores, \\(\\Psi\\) diagonal, positive definite matrix. Traditional factor analysis texts refer diagonal elements \\(\\Psi\\) uniquenesses. implementation used assumes independent conjugate priors element \\(\\Lambda\\) \\(\\phi_i\\), diagonal element \\(\\Psi\\). specifically assume: $$\\Lambda_{ij} \\sim \\mathcal{N}(l_{0_{ij}}, L_{0_{ij}}^{-1}), =1,\\ldots,k, j=1,\\ldots,d$$ $$\\phi_i \\sim \\mathcal{N}(0, ), =1,\\dots,n$$ $$\\Psi_{ii} \\sim \\mathcal{IG}(a_{0_i}/2, b_{0_i}/2), =1,\\ldots,k$$ MCMCfactanal simulates posterior distribution using standard Gibbs sampling. simulation proper done compiled C++ code maximize efficiency.  Please consult coda documentation comprehensive list functions can used analyze posterior sample. case measurement models, make sure plenty free memory, especially storing scores.","code":""},{"path":"/reference/MCMCfactanal.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Markov Chain Monte Carlo for Normal Theory Factor Analysis Model — MCMCfactanal","text":"Andrew D. Martin, Kevin M. Quinn, Jong Hee Park. 2011. ``MCMCpack: Markov Chain Monte Carlo R.'', Journal Statistical Software. 42(9): 1-21.  doi:10.18637/jss.v042.i09 . Daniel Pemstein, Kevin M. Quinn, Andrew D. Martin.  2007.  Scythe Statistical Library 1.0. http://scythe.lsa.umich.edu. Martyn Plummer, Nicky Best, Kate Cowles, Karen Vines. 2006.  ``Output Analysis Diagnostics MCMC (CODA)'', R News. 6(1): 7-11. https://CRAN.R-project.org/doc/Rnews/Rnews_2006-1.pdf.","code":""},{"path":[]},{"path":"/reference/MCMCfactanal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Markov Chain Monte Carlo for Normal Theory Factor Analysis Model — MCMCfactanal","text":"","code":"if (FALSE) {    ### An example using the formula interface    data(swiss)    posterior <- MCMCfactanal(~Agriculture+Examination+Education+Catholic                     +Infant.Mortality, factors=2,                     lambda.constraints=list(Examination=list(1,\"+\"),                        Examination=list(2,\"-\"), Education=c(2,0),                        Infant.Mortality=c(1,0)),                     verbose=0, store.scores=FALSE, a0=1, b0=0.15,                     data=swiss, burnin=5000, mcmc=50000, thin=20)    plot(posterior)    summary(posterior)     ### An example using the matrix interface    Y <- cbind(swiss$Agriculture, swiss$Examination,               swiss$Education, swiss$Catholic,               swiss$Infant.Mortality)    colnames(Y) <- c(\"Agriculture\", \"Examination\", \"Education\", \"Catholic\",                     \"Infant.Mortality\")    post <- MCMCfactanal(Y, factors=2,                         lambda.constraints=list(Examination=list(1,\"+\"),                           Examination=list(2,\"-\"), Education=c(2,0),                           Infant.Mortality=c(1,0)),                         verbose=0, store.scores=FALSE, a0=1, b0=0.15,                         burnin=5000, mcmc=50000, thin=20)    }"},{"path":"/reference/MCMChierEI.html","id":null,"dir":"Reference","previous_headings":"","what":"Markov Chain Monte Carlo for Wakefield's Hierarchial Ecological Inference\nModel — MCMChierEI","title":"Markov Chain Monte Carlo for Wakefield's Hierarchial Ecological Inference\nModel — MCMChierEI","text":"`MCMChierEI' used fit Wakefield's hierarchical ecological inference model partially observed 2 x 2 contingency tables.","code":""},{"path":"/reference/MCMChierEI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Markov Chain Monte Carlo for Wakefield's Hierarchial Ecological Inference\nModel — MCMChierEI","text":"","code":"MCMChierEI(   r0,   r1,   c0,   c1,   burnin = 5000,   mcmc = 50000,   thin = 1,   verbose = 0,   seed = NA,   m0 = 0,   M0 = 2.287656,   m1 = 0,   M1 = 2.287656,   a0 = 0.825,   b0 = 0.0105,   a1 = 0.825,   b1 = 0.0105,   ... )"},{"path":"/reference/MCMChierEI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Markov Chain Monte Carlo for Wakefield's Hierarchial Ecological Inference\nModel — MCMChierEI","text":"r0 \\((ntables \\times 1)\\) vector row sums row 0. r1 \\((ntables \\times 1)\\) vector row sums row 1. c0 \\((ntables \\times 1)\\) vector column sums column 0. c1 \\((ntables \\times 1)\\) vector column sums column 1. burnin number burn-scans sampler. mcmc number mcmc scans saved. thin thinning interval used simulation.  number mcmc iterations must divisible value. verbose switch determines whether progress sampler printed screen. verbose greater 0 every verboseth iteration printed screen. seed seed random number generator.  NA, Mersenne Twister generator used default seed 12345; integer passed used seed Mersenne twister.  user can also pass list length two use L'Ecuyer random number generator, suitable parallel computation.  first element list L'Ecuyer seed, vector length six NA (NA default seed rep(12345,6) used).  second element list positive substream number. See MCMCpack specification details. m0 Prior mean \\(\\mu_0\\) parameter. M0 Prior variance \\(\\mu_0\\) parameter. m1 Prior mean \\(\\mu_1\\) parameter. M1 Prior variance \\(\\mu_1\\) parameter. a0 a0/2 shape parameter inverse-gamma prior \\(\\sigma^2_0\\) parameter. b0 b0/2 scale parameter inverse-gamma prior \\(\\sigma^2_0\\) parameter. a1 a1/2 shape parameter inverse-gamma prior \\(\\sigma^2_1\\) parameter. b1 b1/2 scale parameter inverse-gamma prior \\(\\sigma^2_1\\) parameter. ... arguments passed","code":""},{"path":"/reference/MCMChierEI.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Markov Chain Monte Carlo for Wakefield's Hierarchial Ecological Inference\nModel — MCMChierEI","text":"mcmc object contains sample posterior   distribution.  object can summarized functions   provided coda package.","code":""},{"path":"/reference/MCMChierEI.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Markov Chain Monte Carlo for Wakefield's Hierarchial Ecological Inference\nModel — MCMChierEI","text":"Consider following partially observed 2 2 contingency table unit \\(t\\) \\(t=1,\\ldots,ntables\\): \\(r_{0t}\\), \\(r_{1t}\\), \\(c_{0t}\\), \\(c_{1t}\\), \\(N_t\\) non-negative integers observed. interior cell entries observed. assumed \\(Y_{0t}|r_{0t} \\sim \\mathcal{B}inomial(r_{0t}, p_{0t})\\) \\(Y_{1t}|r_{1t} \\sim \\mathcal{B}inomial(r_{1t}, p_{1t})\\).  Let \\(\\theta_{0t} = log(p_{0t}/(1-p_{0t}))\\), \\(\\theta_{1t} = log(p_{1t}/(1-p_{1t}))\\). following prior distributions assumed: \\(\\theta_{0t} \\sim \\mathcal{N}(\\mu_0, \\sigma^2_0)\\), \\(\\theta_{1t} \\sim \\mathcal{N}(\\mu_1, \\sigma^2_1)\\).  \\(\\theta_{0t}\\) assumed priori independent \\(\\theta_{1t}\\) t.  addition, assume following hyperpriors: \\(\\mu_0 \\sim \\mathcal{N}(m_0, M_0)\\), \\(\\mu_1 \\sim \\mathcal{N}(m_1, M_1)\\), \\(\\sigma^2_0 \\sim \\mathcal{IG}(a_0/2, b_0/2)\\), \\(\\sigma^2_1 \\sim \\mathcal{IG}(a_1/2, b_1/2)\\). default priors chosen make implied prior distribution \\(p_{0}\\) \\(p_{1}\\) approximately uniform (0,1). Inference centers \\(p_0\\), \\(p_1\\), \\(\\mu_0\\), \\(\\mu_1\\), \\(\\sigma^2_0\\), \\(\\sigma^2_1\\).  Univariate slice sampling (Neal, 2003) along Gibbs sampling used sample posterior distribution. See Section 5.4 Wakefield (2003) discussion priors used .  MCMChierEI departs Wakefield model mu0 mu1 assumed drawn independent normal distributions whereas Wakefield assumes drawn logistic distributions.","code":""},{"path":"/reference/MCMChierEI.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Markov Chain Monte Carlo for Wakefield's Hierarchial Ecological Inference\nModel — MCMChierEI","text":"Jonathan C. Wakefield. 2004. ``Ecological Inference 2 x 2 Tables.'' Journal Royal Statistical Society, Series . 167(3): 385445. Radford Neal. 2003. ``Slice Sampling\" (discussion). Annals Statistics, 31: 705-767. Andrew D. Martin, Kevin M. Quinn, Jong Hee Park. 2011.  ``MCMCpack: Markov Chain Monte Carlo R.'', Journal Statistical Software. 42(9): 1-21.  doi:10.18637/jss.v042.i09 . Daniel Pemstein, Kevin M. Quinn, Andrew D. Martin.  2007.  Scythe Statistical Library 1.0. http://scythe.lsa.umich.edu. Martyn Plummer, Nicky Best, Kate Cowles, Karen Vines. 2006.  ``Output Analysis Diagnostics MCMC (CODA)'', R News. 6(1): 7-11. https://CRAN.R-project.org/doc/Rnews/Rnews_2006-1.pdf.","code":""},{"path":[]},{"path":"/reference/MCMChierEI.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Markov Chain Monte Carlo for Wakefield's Hierarchial Ecological Inference\nModel — MCMChierEI","text":"","code":"if (FALSE) { ## simulated data example set.seed(3920) n <- 100 r0 <- round(runif(n, 400, 1500)) r1 <- round(runif(n, 100, 4000)) p0.true <- pnorm(rnorm(n, m=0.5, s=0.25)) p1.true <- pnorm(rnorm(n, m=0.0, s=0.10)) y0 <- rbinom(n, r0, p0.true) y1 <- rbinom(n, r1, p1.true) c0 <- y0 + y1 c1 <- (r0+r1) - c0  ## plot data tomogplot(r0, r1, c0, c1)  ## fit exchangeable hierarchical model post <- MCMChierEI(r0,r1,c0,c1, mcmc=40000, thin=5, verbose=100,                     seed=list(NA, 1))  p0meanHier <- colMeans(post)[1:n] p1meanHier <- colMeans(post)[(n+1):(2*n)]  ## plot truth and posterior means pairs(cbind(p0.true, p0meanHier, p1.true, p1meanHier))    }"},{"path":"/reference/MCMChlogit.html","id":null,"dir":"Reference","previous_headings":"","what":"Markov Chain Monte Carlo for the Hierarchical Binomial Linear Regression\nModel using the logit link function — MCMChlogit","title":"Markov Chain Monte Carlo for the Hierarchical Binomial Linear Regression\nModel using the logit link function — MCMChlogit","text":"MCMChlogit generates sample posterior distribution Hierarchical Binomial Linear Regression Model using logit link function Algorithm 2 Chib Carlin (1999). model uses multivariate Normal prior fixed effects parameters, Inverse-Wishart prior random effects variance matrix, Inverse-Gamma prior variance modelling -dispersion. user supplies data priors, sample posterior distribution returned mcmc object, can subsequently analyzed functions provided coda package.","code":""},{"path":"/reference/MCMChlogit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Markov Chain Monte Carlo for the Hierarchical Binomial Linear Regression\nModel using the logit link function — MCMChlogit","text":"","code":"MCMChlogit(   fixed,   random,   group,   data,   burnin = 5000,   mcmc = 10000,   thin = 10,   verbose = 1,   seed = NA,   beta.start = NA,   sigma2.start = NA,   Vb.start = NA,   mubeta = 0,   Vbeta = 1e+06,   r,   R,   nu = 0.001,   delta = 0.001,   FixOD = 0,   ... )"},{"path":"/reference/MCMChlogit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Markov Chain Monte Carlo for the Hierarchical Binomial Linear Regression\nModel using the logit link function — MCMChlogit","text":"fixed two-sided linear formula form 'y~x1+...+xp' describing fixed-effects part model, response left '~' operator p fixed terms, separated '+' operators, right. Response variable y must 0 1 (Binomial process). random one-sided formula form '~x1+...+xq' specifying model random effects part model, q random terms, separated '+' operators. group String indicating name grouping variable data, defining hierarchical structure model. data data frame containing variables model. burnin number burnin iterations sampler. mcmc number Gibbs iterations sampler. Total number Gibbs iterations equal burnin+mcmc. burnin+mcmc must divisible 10 superior equal 100 progress bar can displayed. thin thinning interval used simulation. number mcmc iterations must divisible value. verbose switch (0,1) determines whether progress sampler printed screen. Default 1: progress bar printed, indicating step (%) reached Gibbs sampler. seed seed random number generator. NA, Mersenne Twister generator used default seed 12345; integer passed used seed Mersenne twister. beta.start starting values \\(\\beta\\) vector. can either scalar p-length vector. default value NA use OLS \\(\\beta\\) estimate corresponding Gaussian Linear Regression without random effects. scalar, value serve starting value mean betas. sigma2.start Scalar starting value residual error variance. default value NA use OLS estimates corresponding Gaussian Linear Regression without random effects. Vb.start starting value variance matrix random effects. must square q-dimension matrix. Default value NA uses identity matrix. mubeta prior mean \\(\\beta\\). can either scalar p-length vector. takes scalar value, value serve prior mean betas. default value 0 use vector zeros uninformative prior. Vbeta prior variance \\(\\beta\\).  can either scalar square p-dimension matrix. takes scalar value, value times identity matrix serves prior variance beta. Default value 1.0E6 use diagonal matrix large variance uninformative flat prior. r shape parameter Inverse-Wishart prior variance matrix random effects. r must superior equal q. Set r=q uninformative prior. See NOTE details R scale matrix Inverse-Wishart prior variance matrix random effects. must square q-dimension matrix. Use plausible variance regarding random effects diagonal R. See NOTE details nu shape parameter Inverse-Gamma prior residual error variance. Default value nu=delta=0.001 uninformative prior. delta rate (1/scale) parameter Inverse-Gamma prior residual error variance. Default value nu=delta=0.001 uninformative prior. FixOD switch (0,1) determines whether variance -dispersion (sigma2) fixed (1) (0). Default 0, parameter sigma2 estimated. FixOD=1, sigma2 fixed value provided sigma2.start. ... arguments passed","code":""},{"path":"/reference/MCMChlogit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Markov Chain Monte Carlo for the Hierarchical Binomial Linear Regression\nModel using the logit link function — MCMChlogit","text":"mcmc mcmc object contains posterior sample. object can summarized functions provided coda package. posterior sample deviance \\(D\\), \\(D=-2\\log(\\prod_i P(y_i|\\theta_i))\\), also provided. theta.pred Predictive posterior mean inverse-logit latent variables. approximation Diggle et al. (2004) used marginalized respect -dispersion terms: $$E[\\theta_i|\\beta,b_i,\\sigma^2]=\\phi^{-1}((X_i\\beta+W_ib_i)/\\sqrt{(16\\sqrt{3}/15\\pi)^2\\sigma^2+1})$$","code":""},{"path":"/reference/MCMChlogit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Markov Chain Monte Carlo for the Hierarchical Binomial Linear Regression\nModel using the logit link function — MCMChlogit","text":"MCMChlogit simulates posterior distribution sample using blocked Gibbs sampler Chib Carlin (1999), Algorithm 2. simulation done compiled C++ code maximize efficiency. Please consult coda documentation comprehensive list functions can used analyze posterior sample. model takes following form: $$y_i \\sim \\mathcal{B}ernoulli(\\theta_i)$$ latent variables \\(\\phi(\\theta_i)\\), \\(\\phi\\) logit link function: $$\\phi(\\theta_i) = X_i \\beta + W_i b_i + \\varepsilon_i$$ group \\(\\) \\(k_i\\) observations. random effects: $$b_i \\sim \\mathcal{N}_q(0,V_b)$$ -dispersion terms: $$\\varepsilon_i \\sim \\mathcal{N}(0, \\sigma^2 I_{k_i})$$ assume standard, conjugate priors: $$\\beta \\sim \\mathcal{N}_p(\\mu_{\\beta},V_{\\beta})$$ : $$\\sigma^{2} \\sim \\mathcal{IG}amma(\\nu, 1/\\delta)$$ : $$V_b \\sim \\mathcal{IW}ishart(r, rR)$$ See Chib Carlin (1999) details. NOTE: provide default parameters priors precision matrix random effects. fitting one models, utmost importance choose prior reflects prior beliefs random effects. Using dwish rwish functions might useful choosing values.","code":""},{"path":"/reference/MCMChlogit.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Markov Chain Monte Carlo for the Hierarchical Binomial Linear Regression\nModel using the logit link function — MCMChlogit","text":"Siddhartha Chib Bradley P. Carlin. 1999. ``MCMC Sampling Hierarchical Longitudinal Models.'' Statistics Computing. 9: 17-26. Daniel Pemstein, Kevin M. Quinn, Andrew D. Martin.  2007.  Scythe Statistical Library 1.0. http://scythe.lsa.umich.edu. Andrew D. Martin Kyle L. Saunders. 2002. ``Bayesian Inference Political Science Panel Data.'' Paper presented 2002 Annual Meeting American Political Science Association. Martyn Plummer, Nicky Best, Kate Cowles, Karen Vines. 2006.  ``Output Analysis Diagnostics MCMC (CODA)'', R News. 6(1): 7-11. https://CRAN.R-project.org/doc/Rnews/Rnews_2006-1.pdf. Diggle P., Heagerty P., Liang K., Zeger S. 2004. ``Analysis Longitudinal Data.'' Oxford University Press, 2sd Edition.","code":""},{"path":[]},{"path":"/reference/MCMChlogit.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Markov Chain Monte Carlo for the Hierarchical Binomial Linear Regression\nModel using the logit link function — MCMChlogit","text":"Ghislain Vieilledent <ghislain.vieilledent@cirad.fr>","code":""},{"path":"/reference/MCMChlogit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Markov Chain Monte Carlo for the Hierarchical Binomial Linear Regression\nModel using the logit link function — MCMChlogit","text":"","code":"if (FALSE) { #======================================== # Hierarchical Binomial Linear Regression #========================================  #== inv.logit function inv.logit <- function(x, min=0, max=1) {     p <- exp(x)/(1+exp(x))     p <- ifelse( is.na(p) & !is.na(x), 1, p ) # fix problems with +Inf     return(p*(max-min)+min) }  #== Generating data  # Constants nobs <- 1000 nspecies <- 20 species <- c(1:nspecies,sample(c(1:nspecies),(nobs-nspecies),replace=TRUE))  # Covariates X1 <- runif(n=nobs,min=-10,max=10) X2 <- runif(n=nobs,min=-10,max=10) X <- cbind(rep(1,nobs),X1,X2) W <- X  # Target parameters # beta beta.target <- matrix(c(0.3,0.2,0.1),ncol=1) # Vb Vb.target <- c(0.5,0.05,0.05) # b b.target <- cbind(rnorm(nspecies,mean=0,sd=sqrt(Vb.target[1])),                   rnorm(nspecies,mean=0,sd=sqrt(Vb.target[2])),                   rnorm(nspecies,mean=0,sd=sqrt(Vb.target[3])))  # Response theta <- vector() Y <- vector() for (n in 1:nobs) {   theta[n] <- inv.logit(X[n,]%*%beta.target+W[n,]%*%b.target[species[n],])   Y[n] <- rbinom(n=1,size=1,prob=theta[n]) }  # Data-set Data <- as.data.frame(cbind(Y,theta,X1,X2,species)) plot(Data$X1,Data$theta)  #== Call to MCMChlogit model <- MCMChlogit(fixed=Y~X1+X2, random=~X1+X2, group=\"species\",               data=Data, burnin=5000, mcmc=1000, thin=1,verbose=1,               seed=NA, beta.start=0, sigma2.start=1,               Vb.start=1, mubeta=0, Vbeta=1.0E6,               r=3, R=diag(c(1,0.1,0.1)), nu=0.001, delta=0.001, FixOD=1)  #== MCMC analysis  # Graphics pdf(\"Posteriors-MCMChlogit.pdf\") plot(model$mcmc) dev.off()  # Summary summary(model$mcmc)  # Predictive posterior mean for each observation model$theta.pred  # Predicted-Observed plot(Data$theta,model$theta.pred) abline(a=0,b=1)  ## #Not run ## #You can also compare with lme4 results ## #== lme4 resolution ## library(lme4) ## model.lme4 <- lmer(Y~X1+X2+(1+X1+X2|species),data=Data,family=\"binomial\") ## summary(model.lme4) ## plot(fitted(model.lme4),model$theta.pred,main=\"MCMChlogit/lme4\") ## abline(a=0,b=1) }"},{"path":"/reference/MCMChpoisson.html","id":null,"dir":"Reference","previous_headings":"","what":"Markov Chain Monte Carlo for the Hierarchical Poisson Linear Regression\nModel using the log link function — MCMChpoisson","title":"Markov Chain Monte Carlo for the Hierarchical Poisson Linear Regression\nModel using the log link function — MCMChpoisson","text":"MCMChpoisson generates sample posterior distribution Hierarchical Poisson Linear Regression Model using log link function Algorithm 2 Chib Carlin (1999). model uses multivariate Normal prior fixed effects parameters, Inverse-Wishart prior random effects variance matrix, Inverse-Gamma prior variance modelling -dispersion. user supplies data priors, sample posterior distribution returned mcmc object, can subsequently analyzed functions provided coda package.","code":""},{"path":"/reference/MCMChpoisson.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Markov Chain Monte Carlo for the Hierarchical Poisson Linear Regression\nModel using the log link function — MCMChpoisson","text":"","code":"MCMChpoisson(   fixed,   random,   group,   data,   burnin = 5000,   mcmc = 10000,   thin = 10,   verbose = 1,   seed = NA,   beta.start = NA,   sigma2.start = NA,   Vb.start = NA,   mubeta = 0,   Vbeta = 1e+06,   r,   R,   nu = 0.001,   delta = 0.001,   FixOD = 0,   ... )"},{"path":"/reference/MCMChpoisson.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Markov Chain Monte Carlo for the Hierarchical Poisson Linear Regression\nModel using the log link function — MCMChpoisson","text":"fixed two-sided linear formula form 'y~x1+...+xp' describing fixed-effects part model, response left '~' operator p fixed terms, separated '+' operators, right. Response variable y must 0 1 (Binomial process). random one-sided formula form '~x1+...+xq' specifying model random effects part model, q random terms, separated '+' operators. group String indicating name grouping variable data, defining hierarchical structure model. data data frame containing variables model. burnin number burnin iterations sampler. mcmc number Gibbs iterations sampler. Total number Gibbs iterations equal burnin+mcmc. burnin+mcmc must divisible 10 superior equal 100 progress bar can displayed. thin thinning interval used simulation. number mcmc iterations must divisible value. verbose switch (0,1) determines whether progress sampler printed screen. Default 1: progress bar printed, indicating step (%) reached Gibbs sampler. seed seed random number generator. NA, Mersenne Twister generator used default seed 12345; integer passed used seed Mersenne twister. beta.start starting values \\(\\beta\\) vector. can either scalar p-length vector. default value NA use OLS \\(\\beta\\) estimate corresponding Gaussian Linear Regression without random effects. scalar, value serve starting value mean betas. sigma2.start Scalar starting value residual error variance. default value NA use OLS estimates corresponding Gaussian Linear Regression without random effects. Vb.start starting value variance matrix random effects. must square q-dimension matrix. Default value NA uses identity matrix. mubeta prior mean \\(\\beta\\). can either scalar p-length vector. takes scalar value, value serve prior mean betas. default value 0 use vector zeros uninformative prior. Vbeta prior variance \\(\\beta\\).  can either scalar square p-dimension matrix. takes scalar value, value times identity matrix serves prior variance beta. Default value 1.0E6 use diagonal matrix large variance uninformative flat prior. r shape parameter Inverse-Wishart prior variance matrix random effects. r must superior equal q. Set r=q uninformative prior. See NOTE details. R scale matrix Inverse-Wishart prior variance matrix random effects. must square q-dimension matrix. Use plausible variance regarding random effects diagonal R. See NOTE details. nu shape parameter Inverse-Gamma prior residual error variance. Default value nu=delta=0.001 uninformative prior. delta rate (1/scale) parameter Inverse-Gamma prior residual error variance. Default value nu=delta=0.001 uninformative prior. FixOD switch (0,1) determines whether variance -dispersion (sigma2) fixed (1) (0). Default 0, parameter sigma2 estimated. FixOD=1, sigma2 fixed value provided sigma2.start. ... arguments passed","code":""},{"path":"/reference/MCMChpoisson.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Markov Chain Monte Carlo for the Hierarchical Poisson Linear Regression\nModel using the log link function — MCMChpoisson","text":"mcmc mcmc object contains posterior sample. object can summarized functions provided coda package. posterior sample deviance \\(D\\), \\(D=-2\\log(\\prod_i P(y_i|\\lambda_i))\\), also provided. lambda.pred Predictive posterior mean exponential latent variables. approximation Diggle et al. (2004) used marginalized respect -dispersion terms: $$E[\\lambda_i|\\beta,b_i,\\sigma^2]=\\phi^{-1}((X_i \\beta+W_i b_i)+0.5 \\sigma^2)$$","code":""},{"path":"/reference/MCMChpoisson.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Markov Chain Monte Carlo for the Hierarchical Poisson Linear Regression\nModel using the log link function — MCMChpoisson","text":"MCMChpoisson simulates posterior distribution sample using blocked Gibbs sampler Chib Carlin (1999), Algorithm 2. simulation done compiled C++ code maximize efficiency. Please consult coda documentation comprehensive list functions can used analyze posterior sample. model takes following form: $$y_i \\sim \\mathcal{P}oisson(\\lambda_i)$$ latent variables \\(\\phi(\\lambda_i)\\), \\(\\phi\\) log link function: $$\\phi(\\lambda_i) = X_i \\beta + W_i b_i + \\varepsilon_i$$ group \\(\\) \\(k_i\\) observations. random effects: $$b_i \\sim \\mathcal{N}_q(0,V_b)$$ -dispersion terms: $$\\varepsilon_i \\sim \\mathcal{N}(0, \\sigma^2 I_{k_i})$$ assume standard, conjugate priors: $$\\beta \\sim \\mathcal{N}_p(\\mu_{\\beta},V_{\\beta})$$ : $$\\sigma^{2} \\sim \\mathcal{IG}amma(\\nu, 1/\\delta)$$ : $$V_b \\sim \\mathcal{IW}ishart(r, rR)$$ See Chib Carlin (1999) details. NOTE: provide default parameters priors precision matrix random effects. fitting one models, utmost importance choose prior reflects prior beliefs random effects. Using dwish rwish functions might useful choosing values.","code":""},{"path":"/reference/MCMChpoisson.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Markov Chain Monte Carlo for the Hierarchical Poisson Linear Regression\nModel using the log link function — MCMChpoisson","text":"Siddhartha Chib Bradley P. Carlin. 1999. ``MCMC Sampling Hierarchical Longitudinal Models.'' Statistics Computing. 9: 17-26. Daniel Pemstein, Kevin M. Quinn, Andrew D. Martin.  2007.  Scythe Statistical Library 1.0. http://scythe.lsa.umich.edu. Andrew D. Martin Kyle L. Saunders. 2002. ``Bayesian Inference Political Science Panel Data.'' Paper presented 2002 Annual Meeting American Political Science Association. Martyn Plummer, Nicky Best, Kate Cowles, Karen Vines. 2006.  ``Output Analysis Diagnostics MCMC (CODA)'', R News. 6(1): 7-11. https://CRAN.R-project.org/doc/Rnews/Rnews_2006-1.pdf.","code":""},{"path":[]},{"path":"/reference/MCMChpoisson.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Markov Chain Monte Carlo for the Hierarchical Poisson Linear Regression\nModel using the log link function — MCMChpoisson","text":"Ghislain Vieilledent <ghislain.vieilledent@cirad.fr>","code":""},{"path":"/reference/MCMChpoisson.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Markov Chain Monte Carlo for the Hierarchical Poisson Linear Regression\nModel using the log link function — MCMChpoisson","text":"","code":"if (FALSE) { #======================================== # Hierarchical Poisson Linear Regression #========================================  #== Generating data  # Constants nobs <- 1000 nspecies <- 20 species <- c(1:nspecies,sample(c(1:nspecies),(nobs-nspecies),replace=TRUE))  # Covariates X1 <- runif(n=nobs,min=-1,max=1) X2 <- runif(n=nobs,min=-1,max=1) X <- cbind(rep(1,nobs),X1,X2) W <- X  # Target parameters # beta beta.target <- matrix(c(0.1,0.1,0.1),ncol=1) # Vb Vb.target <- c(0.05,0.05,0.05) # b b.target <- cbind(rnorm(nspecies,mean=0,sd=sqrt(Vb.target[1])),                   rnorm(nspecies,mean=0,sd=sqrt(Vb.target[2])),                   rnorm(nspecies,mean=0,sd=sqrt(Vb.target[3])))  # Response lambda <- vector() Y <- vector() for (n in 1:nobs) {   lambda[n] <- exp(X[n,]%*%beta.target+W[n,]%*%b.target[species[n],])   Y[n] <- rpois(1,lambda[n]) }  # Data-set Data <- as.data.frame(cbind(Y,lambda,X1,X2,species)) plot(Data$X1,Data$lambda)  #== Call to MCMChpoisson model <- MCMChpoisson(fixed=Y~X1+X2, random=~X1+X2, group=\"species\",               data=Data, burnin=5000, mcmc=1000, thin=1,verbose=1,               seed=NA, beta.start=0, sigma2.start=1,               Vb.start=1, mubeta=0, Vbeta=1.0E6,               r=3, R=diag(c(0.1,0.1,0.1)), nu=0.001, delta=0.001, FixOD=1)  #== MCMC analysis  # Graphics pdf(\"Posteriors-MCMChpoisson.pdf\") plot(model$mcmc) dev.off()  # Summary summary(model$mcmc)  # Predictive posterior mean for each observation model$lambda.pred  # Predicted-Observed plot(Data$lambda,model$lambda.pred) abline(a=0,b=1)  ## #Not run ## #You can also compare with lme4 results ## #== lme4 resolution ## library(lme4) ## model.lme4 <- lmer(Y~X1+X2+(1+X1+X2|species),data=Data,family=\"poisson\") ## summary(model.lme4) ## plot(fitted(model.lme4),model$lambda.pred,main=\"MCMChpoisson/lme4\") ## abline(a=0,b=1) }"},{"path":"/reference/MCMChregress.html","id":null,"dir":"Reference","previous_headings":"","what":"Markov Chain Monte Carlo for the Hierarchical Gaussian Linear Regression\nModel — MCMChregress","title":"Markov Chain Monte Carlo for the Hierarchical Gaussian Linear Regression\nModel — MCMChregress","text":"MCMChregress generates sample posterior distribution Hierarchical Gaussian Linear Regression Model using Algorithm 2 Chib Carlin (1999). model uses multivariate Normal prior fixed effects parameters, Inverse-Wishart prior random effects variance matrix, Inverse-Gamma prior residual error variance. user supplies data priors, sample posterior distribution returned mcmc object, can subsequently analyzed functions provided coda package.","code":""},{"path":"/reference/MCMChregress.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Markov Chain Monte Carlo for the Hierarchical Gaussian Linear Regression\nModel — MCMChregress","text":"","code":"MCMChregress(   fixed,   random,   group,   data,   burnin = 1000,   mcmc = 10000,   thin = 10,   verbose = 1,   seed = NA,   beta.start = NA,   sigma2.start = NA,   Vb.start = NA,   mubeta = 0,   Vbeta = 1e+06,   r,   R,   nu = 0.001,   delta = 0.001,   ... )"},{"path":"/reference/MCMChregress.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Markov Chain Monte Carlo for the Hierarchical Gaussian Linear Regression\nModel — MCMChregress","text":"fixed two-sided linear formula form 'y~x1+...+xp' describing fixed-effects part model, response left '~' operator p fixed terms, separated '+' operators, right. random one-sided formula form '~x1+...+xq' specifying model random effects part model, q random terms, separated '+' operators. group String indicating name grouping variable data, defining hierarchical structure model. data data frame containing variables model. burnin number burnin iterations sampler. mcmc number Gibbs iterations sampler. Total number Gibbs iterations equal burnin+mcmc. burnin+mcmc must divisible 10 superior equal 100 progress bar can displayed. thin thinning interval used simulation. number mcmc iterations must divisible value. verbose switch (0,1) determines whether progress sampler printed screen. Default 1: progress bar printed, indicating step (%) reached Gibbs sampler. seed seed random number generator. NA, Mersenne Twister generator used default seed 12345; integer passed used seed Mersenne twister. beta.start starting values \\(\\beta\\) vector. can either scalar p-length vector. default value NA use OLS \\(\\beta\\) estimate corresponding Gaussian Linear Regression without random effects. scalar, value serve starting value mean betas. sigma2.start Scalar starting value residual error variance. default value NA use OLS estimates corresponding Gaussian Linear Regression without random effects. Vb.start starting value variance matrix random effects. must square q-dimension matrix. Default value NA uses identity matrix. mubeta prior mean \\(\\beta\\). can either scalar p-length vector. takes scalar value, value serve prior mean betas. default value 0 use vector zeros uninformative prior. Vbeta prior variance \\(\\beta\\).  can either scalar square p-dimension matrix. takes scalar value, value times identity matrix serves prior variance beta. Default value 1.0E6 use diagonal matrix large variance uninformative flat prior. r shape parameter Inverse-Wishart prior variance matrix random effects. r must superior equal q. Set r=q uninformative prior. See NOTE details R scale matrix Inverse-Wishart prior variance matrix random effects. must square q-dimension matrix. Use plausible variance regarding random effects diagonal R. See NOTE details nu shape parameter Inverse-Gamma prior residual error variance. Default value nu=delta=0.001 uninformative prior. delta rate (1/scale) parameter Inverse-Gamma prior residual error variance. Default value nu=delta=0.001 uninformative prior. ... arguments passed","code":""},{"path":"/reference/MCMChregress.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Markov Chain Monte Carlo for the Hierarchical Gaussian Linear Regression\nModel — MCMChregress","text":"mcmc mcmc object contains posterior sample. object can summarized functions provided coda package. posterior sample deviance \\(D\\), \\(D=-2\\log(\\prod_i P(y_i|\\beta,b_i,\\sigma^2))\\), also provided. Y.pred Predictive posterior mean observation.","code":""},{"path":"/reference/MCMChregress.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Markov Chain Monte Carlo for the Hierarchical Gaussian Linear Regression\nModel — MCMChregress","text":"MCMChregress simulates posterior distribution sample using blocked Gibbs sampler Chib Carlin (1999), Algorithm 2. simulation done compiled C++ code maximize efficiency. Please consult coda documentation comprehensive list functions can used analyze posterior sample. model takes following form: $$y_i = X_i \\beta + W_i b_i + \\varepsilon_i$$ group \\(\\) \\(k_i\\) observations. random effects: $$b_i \\sim \\mathcal{N}_q(0,V_b)$$ errors: $$\\varepsilon_i \\sim \\mathcal{N}(0, \\sigma^2 I_{k_i})$$ assume standard, conjugate priors: $$\\beta \\sim \\mathcal{N}_p(\\mu_{\\beta},V_{\\beta})$$ : $$\\sigma^{2} \\sim \\mathcal{IG}amma(\\nu, 1/\\delta)$$ : $$V_b \\sim \\mathcal{IW}ishart(r, rR)$$ See Chib Carlin (1999) details. NOTE: provide default parameters priors precision matrix random effects. fitting one models, utmost importance choose prior reflects prior beliefs random effects. Using dwish rwish functions might useful choosing values.","code":""},{"path":"/reference/MCMChregress.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Markov Chain Monte Carlo for the Hierarchical Gaussian Linear Regression\nModel — MCMChregress","text":"Siddhartha Chib Bradley P. Carlin. 1999. ``MCMC Sampling Hierarchical Longitudinal Models.'' Statistics Computing. 9: 17-26. Daniel Pemstein, Kevin M. Quinn, Andrew D. Martin.  2007.  Scythe Statistical Library 1.0. http://scythe.lsa.umich.edu. Andrew D. Martin Kyle L. Saunders. 2002. ``Bayesian Inference Political Science Panel Data.'' Paper presented 2002 Annual Meeting American Political Science Association. Martyn Plummer, Nicky Best, Kate Cowles, Karen Vines. 2006.  ``Output Analysis Diagnostics MCMC (CODA)'', R News. 6(1): 7-11. https://CRAN.R-project.org/doc/Rnews/Rnews_2006-1.pdf.","code":""},{"path":[]},{"path":"/reference/MCMChregress.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Markov Chain Monte Carlo for the Hierarchical Gaussian Linear Regression\nModel — MCMChregress","text":"Ghislain Vieilledent <ghislain.vieilledent@cirad.fr>","code":""},{"path":"/reference/MCMChregress.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Markov Chain Monte Carlo for the Hierarchical Gaussian Linear Regression\nModel — MCMChregress","text":"","code":"if (FALSE) { #======================================== # Hierarchical Gaussian Linear Regression #========================================  #== Generating data  # Constants nobs <- 1000 nspecies <- 20 species <- c(1:nspecies,sample(c(1:nspecies),(nobs-nspecies),replace=TRUE))  # Covariates X1 <- runif(n=nobs,min=0,max=10) X2 <- runif(n=nobs,min=0,max=10) X <- cbind(rep(1,nobs),X1,X2) W <- X  # Target parameters # beta beta.target <- matrix(c(0.1,0.3,0.2),ncol=1) # Vb Vb.target <- c(0.5,0.2,0.1) # b b.target <- cbind(rnorm(nspecies,mean=0,sd=sqrt(Vb.target[1])),                   rnorm(nspecies,mean=0,sd=sqrt(Vb.target[2])),                   rnorm(nspecies,mean=0,sd=sqrt(Vb.target[3]))) # sigma2 sigma2.target <- 0.02  # Response Y <- vector() for (n in 1:nobs) {   Y[n] <- rnorm(n=1,                 mean=X[n,]%*%beta.target+W[n,]%*%b.target[species[n],],                 sd=sqrt(sigma2.target)) }  # Data-set Data <- as.data.frame(cbind(Y,X1,X2,species)) plot(Data$X1,Data$Y)  #== Call to MCMChregress model <- MCMChregress(fixed=Y~X1+X2, random=~X1+X2, group=\"species\",               data=Data, burnin=1000, mcmc=1000, thin=1,verbose=1,               seed=NA, beta.start=0, sigma2.start=1,               Vb.start=1, mubeta=0, Vbeta=1.0E6,               r=3, R=diag(c(1,0.1,0.1)), nu=0.001, delta=0.001)  #== MCMC analysis  # Graphics pdf(\"Posteriors-MCMChregress.pdf\") plot(model$mcmc) dev.off()  # Summary summary(model$mcmc)  # Predictive posterior mean for each observation model$Y.pred  # Predicted-Observed plot(Data$Y,model$Y.pred) abline(a=0,b=1) }"},{"path":"/reference/MCMCirt1d.html","id":null,"dir":"Reference","previous_headings":"","what":"Markov Chain Monte Carlo for One Dimensional Item Response Theory Model — MCMCirt1d","title":"Markov Chain Monte Carlo for One Dimensional Item Response Theory Model — MCMCirt1d","text":"function generates sample posterior distribution one dimensional item response theory (IRT) model, Normal priors subject abilities (ideal points), multivariate Normal priors item parameters.  user supplies data priors, sample posterior distribution returned mcmc object, can subsequently analyzed functions provided coda package.","code":""},{"path":"/reference/MCMCirt1d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Markov Chain Monte Carlo for One Dimensional Item Response Theory Model — MCMCirt1d","text":"","code":"MCMCirt1d(   datamatrix,   theta.constraints = list(),   burnin = 1000,   mcmc = 20000,   thin = 1,   verbose = 0,   seed = NA,   theta.start = NA,   alpha.start = NA,   beta.start = NA,   t0 = 0,   T0 = 1,   ab0 = 0,   AB0 = 0.25,   store.item = FALSE,   store.ability = TRUE,   drop.constant.items = TRUE,   ... )"},{"path":"/reference/MCMCirt1d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Markov Chain Monte Carlo for One Dimensional Item Response Theory Model — MCMCirt1d","text":"datamatrix matrix data.  Must 0, 1, missing values.  rows datamatrix correspond subjects columns correspond items. theta.constraints list specifying possible simple equality inequality constraints ability parameters. typical entry list one three forms: varname=c constrain ability parameter subject named varname equal c, varname=\"+\" constrain ability parameter subject named varname positive, varname=\"-\" constrain ability parameter subject named varname negative. x matrix without row names defaults names ``V1\",``V2\", ... , etc used. See Rivers (2003) thorough discussion identification IRT models. burnin number burn-iterations sampler. mcmc number Gibbs iterations sampler. thin thinning interval used simulation.  number Gibbs iterations must divisible value. verbose switch determines whether progress sampler printed screen.  verbose greater 0 every verboseth iteration printed screen. seed seed random number generator.  NA, Mersenne Twister generator used default seed 12345; integer passed used seed Mersenne twister.  user can also pass list length two use L'Ecuyer random number generator, suitable parallel computation.  first element list L'Ecuyer seed, vector length six NA (NA default seed rep(12345,6) used).  second element list positive substream number. See MCMCpack specification details. theta.start starting values subject abilities (ideal points). can either scalar column vector dimension equal number voters.  takes scalar value, value serve starting value thetas.  default value NA choose starting values based eigenvalue-eigenvector decomposition aggreement score matrix formed datamatrix. alpha.start starting values \\(\\alpha\\) difficulty parameters. can either scalar column vector dimension equal number items.  takes scalar value, value serve starting value alphas.  default value NA set starting values based series probit regressions condition starting values theta. beta.start starting values \\(\\beta\\) discrimination parameters. can either scalar column vector dimension equal number items.  takes scalar value, value serve starting value betas.  default value NA set starting values based series probit regressions condition starting values theta. t0 scalar parameter giving prior mean subject abilities (ideal points). T0 scalar parameter giving prior precision (inverse variance) subject abilities (ideal points). ab0 prior mean (alpha, beta). Can either scalar 2-vector. scalar means set passed value. prior mean assumed across items. AB0 prior precision (alpha, beta).can either ascalar 2 2 matrix. takes scalar value, value times identity matrix serves prior precision. prior precision assumed across items. store.item switch determines whether store item parameters posterior analysis.  NOTE: situations many items storing item parameters takes enormous amount memory, store.item FALSE chain thinned heavily, applications small number items.  default, item parameters stored. store.ability switch determines whether store ability parameters posterior analysis.  NOTE: situations many individuals storing ability parameters takes enormous amount memory, store.ability TRUE chain thinned heavily, applications small number individuals. default, item parameters stored. drop.constant.items switch determines whether items variation deleted fitting model. Default = TRUE. ... arguments passed","code":""},{"path":"/reference/MCMCirt1d.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Markov Chain Monte Carlo for One Dimensional Item Response Theory Model — MCMCirt1d","text":"mcmc object contains sample posterior distribution. object can summarized functions provided coda package.","code":""},{"path":"/reference/MCMCirt1d.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Markov Chain Monte Carlo for One Dimensional Item Response Theory Model — MCMCirt1d","text":"interested fitting K-dimensional item response theory models, rather identify model placing constraints item parameters, please see MCMCirtKd. MCMCirt1d simulates posterior distribution using standard Gibbs sampling using data augmentation (Normal draw subject abilities, multivariate Normal draw item parameters, truncated Normal draw latent utilities). simulation proper done compiled C++ code maximize efficiency.  Please consult coda documentation comprehensive list functions can used analyze posterior sample. model takes following form.  assume subject subject ability (ideal point) denoted \\(\\theta_j\\) item difficulty parameter \\(\\alpha_i\\) discrimination parameter \\(\\beta_i\\).  observed choice subject \\(j\\) item \\(\\) observed data matrix \\((\\times J)\\).  assume choice dictated unobserved utility: $$z_{,j} = -\\alpha_i + \\beta_i \\theta_j + \\varepsilon_{,j}$$ errors assumed distributed standard Normal. parameters interest subject abilities (ideal points) item parameters. assume following priors.  subject abilities (ideal points): $$\\theta_j \\sim \\mathcal{N}(t_{0},T_{0}^{-1})$$ item parameters, prior : $$\\left[\\alpha_i, \\beta_i \\right]' \\sim \\mathcal{N}_2 (ab_{0},AB_{0}^{-1})$$ model identified proper priors item parameters constraints placed ability parameters. case measurement models, make sure plenty free memory, especially storing item parameters.","code":""},{"path":"/reference/MCMCirt1d.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Markov Chain Monte Carlo for One Dimensional Item Response Theory Model — MCMCirt1d","text":"James H. Albert. 1992. ``Bayesian Estimation Normal Ogive Item Response Curves Using Gibbs Sampling.\" Journal Educational Statistics.  17: 251-269. Joshua Clinton, Simon Jackman, Douglas Rivers. 2004. ``Statistical Analysis Roll Call Data.\"  American Political Science Review.  98: 355-370. Valen E. Johnson James H. Albert. 1999. ``Ordinal Data Modeling.\" Springer: New York. Andrew D. Martin, Kevin M. Quinn, Jong Hee Park. 2011.  ``MCMCpack: Markov Chain Monte Carlo R.'', Journal Statistical Software. 42(9): 1-21.  doi:10.18637/jss.v042.i09 . Daniel Pemstein, Kevin M. Quinn, Andrew D. Martin.  2007.  Scythe Statistical Library 1.0. http://scythe.lsa.umich.edu. Martyn Plummer, Nicky Best, Kate Cowles, Karen Vines. 2006.  ``Output Analysis Diagnostics MCMC (CODA)'', R News. 6(1): 7-11. https://CRAN.R-project.org/doc/Rnews/Rnews_2006-1.pdf. Douglas Rivers.  2004.  ``Identification Multidimensional Item-Response Models.\"  Stanford University, typescript.","code":""},{"path":[]},{"path":"/reference/MCMCirt1d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Markov Chain Monte Carlo for One Dimensional Item Response Theory Model — MCMCirt1d","text":"","code":"if (FALSE) {    ## US Supreme Court Example with inequality constraints    data(SupremeCourt)    posterior1 <- MCMCirt1d(t(SupremeCourt),                    theta.constraints=list(Scalia=\"+\", Ginsburg=\"-\"),                    B0.alpha=.2, B0.beta=.2,                    burnin=500, mcmc=100000, thin=20, verbose=500,                    store.item=TRUE)    geweke.diag(posterior1)    plot(posterior1)    summary(posterior1)     ## US Senate Example with equality constraints    data(Senate)    Sen.rollcalls <- Senate[,6:677]    posterior2 <- MCMCirt1d(Sen.rollcalls,                     theta.constraints=list(KENNEDY=-2, HELMS=2),                     burnin=2000, mcmc=100000, thin=20, verbose=500)    geweke.diag(posterior2)    plot(posterior2)    summary(posterior2)    }"},{"path":"/reference/MCMCirtHier1d.html","id":null,"dir":"Reference","previous_headings":"","what":"Markov Chain Monte Carlo for Hierarchical One Dimensional Item Response\nTheory Model, Covariates Predicting Latent Ideal Point (Ability) — MCMCirtHier1d","title":"Markov Chain Monte Carlo for Hierarchical One Dimensional Item Response\nTheory Model, Covariates Predicting Latent Ideal Point (Ability) — MCMCirtHier1d","text":"function generates sample posterior distribution one dimensional item response theory (IRT) model, multivariate Normal priors item parameters, Normal-Inverse Gamma hierarchical prior subject ideal points (abilities).  user supplies item-response data, subject covariates, priors. Note identification strategy obviates constraints used theta MCMCirt1d. sample posterior distribution returned mcmc object, can subsequently analyzed functions provided coda package.","code":""},{"path":"/reference/MCMCirtHier1d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Markov Chain Monte Carlo for Hierarchical One Dimensional Item Response\nTheory Model, Covariates Predicting Latent Ideal Point (Ability) — MCMCirtHier1d","text":"","code":"MCMCirtHier1d(   datamatrix,   Xjdata,   burnin = 1000,   mcmc = 20000,   thin = 1,   verbose = 0,   seed = NA,   theta.start = NA,   a.start = NA,   b.start = NA,   beta.start = NA,   b0 = 0,   B0 = 0.01,   c0 = 0.001,   d0 = 0.001,   ab0 = 0,   AB0 = 0.25,   store.item = FALSE,   store.ability = TRUE,   drop.constant.items = TRUE,   marginal.likelihood = c(\"none\", \"Chib95\"),   px = TRUE,   px_a0 = 10,   px_b0 = 10,   ... )"},{"path":"/reference/MCMCirtHier1d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Markov Chain Monte Carlo for Hierarchical One Dimensional Item Response\nTheory Model, Covariates Predicting Latent Ideal Point (Ability) — MCMCirtHier1d","text":"datamatrix matrix data.  Must 0, 1, missing values.  rows datamatrix correspond subjects columns correspond items. Xjdata data.frame containing second-level predictor covariates ideal points \\(\\theta\\). Predictors modeled linear regression mean vector \\(\\theta\\); posterior sample contains regression coefficients \\(\\beta\\) common variance \\(\\sigma^2\\). See Rivers (2003) thorough discussion identification IRT models. burnin number burn-iterations sampler. mcmc number Gibbs iterations sampler. thin thinning interval used simulation.  number Gibbs iterations must divisible value. verbose switch determines whether progress sampler printed screen. verbose greater 0 every verboseth iteration printed screen. seed seed random number generator.  NA, Mersenne Twister generator used default seed 12345; integer passed used seed Mersenne twister.  user can also pass list length two use L'Ecuyer random number generator, suitable parallel computation.  first element list L'Ecuyer seed, vector length six NA (NA default seed rep(12345,6) used).  second element list positive substream number. See MCMCpack specification details. theta.start starting values subject abilities (ideal points). can either scalar column vector dimension equal number voters.  takes scalar value, value serve starting value thetas.  default value NA choose starting values based eigenvalue-eigenvector decomposition agreement score matrix formed datamatrix. .start starting values \\(\\) difficulty parameters. can either scalar column vector dimension equal number items.  takes scalar value, value serve starting value \\(\\).  default value NA set starting values based series probit regressions condition starting values theta. b.start starting values \\(b\\) discrimination parameters. can either scalar column vector dimension equal number items.  takes scalar value, value serve starting value \\(b\\).  default value NA set starting values based series probit regressions condition starting values theta. beta.start starting values \\(\\beta\\) regression coefficients predict means ideal points \\(\\theta\\). can either scalar column vector length equal number covariates. takes scalar value, value serve starting value betas.  default value NA set starting values based linear regression covariates (either provided generated) theta.start. b0 prior mean \\(\\beta\\). Can either scalar vector length equal number subject covariates. scalar means set passed value. B0 prior precision \\(\\beta\\).  can either scalar square matrix dimensions equal number betas.  takes scalar value, value times identity matrix serves prior precision beta. default proper diffuse value .01 ensures finite marginal likelihood model comparison.  value 0 equivalent improper uniform prior beta. c0 \\(c_0/2\\) shape parameter inverse Gamma prior \\(\\sigma^2\\) (variance \\(\\theta\\)). amount information inverse Gamma prior something like \\(c_0\\) pseudo-observations. d0 \\(d_0/2\\) scale parameter inverse Gamma prior \\(\\sigma^2\\) (variance \\(\\theta\\)). constructing inverse Gamma prior, \\(d_0\\) acts like sum squared errors \\(c_0\\) pseudo-observations. ab0 prior mean (, b). Can either scalar 2-vector. scalar means set passed value. prior mean assumed across items. AB0 prior precision (, b).can either ascalar 2 2 matrix. takes scalar value, value times identity matrix serves prior precision. prior precision assumed across items. store.item switch determines whether store item parameters posterior analysis.  NOTE: situations many items storing item parameters takes enormous amount memory, store.item TRUE chain thinned heavily, applications small number items.  default, item parameters stored. store.ability switch determines whether store ability parameters posterior analysis.  NOTE: situations many individuals storing ability parameters takes enormous amount memory, store.ability TRUE chain thinned heavily, applications small number individuals. default, ability parameters stored. drop.constant.items switch determines whether items variation deleted fitting model. Default = TRUE. marginal.likelihood marginal likelihood second-level model ideal points calculated using method Chib (1995)? stored attribute posterior mcmc object suitable comparison using BayesFactor. px Use Parameter Expansion reduce autocorrelation chain? PX introduces unidentified parameter \\(alpha\\) residual variance latent data (Liu Wu 1999). Default = TRUE px_a0 Prior shape parameter inverse-gamma distribution \\(alpha\\), residual variance latent data. Default=10. px_b0 Prior scale parameter inverse-gamma distribution \\(alpha\\), residual variance latent data. Default = 10 ... arguments passed","code":""},{"path":"/reference/MCMCirtHier1d.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Markov Chain Monte Carlo for Hierarchical One Dimensional Item Response\nTheory Model, Covariates Predicting Latent Ideal Point (Ability) — MCMCirtHier1d","text":"mcmc object contains sample posterior distribution. object can summarized functions provided coda package. marginal.likelihood = \"Chib95\" object attribute logmarglike.","code":""},{"path":"/reference/MCMCirtHier1d.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Markov Chain Monte Carlo for Hierarchical One Dimensional Item Response\nTheory Model, Covariates Predicting Latent Ideal Point (Ability) — MCMCirtHier1d","text":"interested fitting K-dimensional item response theory models, rather identify model placing constraints item parameters, please see MCMCirtKd. MCMCirtHier1d simulates posterior distribution using standard Gibbs sampling using data augmentation (Normal draw subject abilities, multivariate Normal draw (second-level) subject ability predictors, Inverse-Gamma draw (second-level) variance subject abilities, multivariate Normal draw item parameters, truncated Normal draw latent utilities). simulation proper done compiled C++ code maximize efficiency.  Please consult coda documentation comprehensive list functions can used analyze posterior sample. model takes following form.  assume subject subject ability (ideal point) denoted \\(\\theta_j\\) item difficulty parameter \\(a_i\\) discrimination parameter \\(b_i\\).  observed choice subject \\(j\\) item \\(\\) observed data matrix \\((\\times J)\\). assume choice dictated unobserved utility: $$z_{,j} = -\\alpha_i + \\beta_i \\theta_j + \\varepsilon_{,j}$$ errors assumed distributed standard Normal. constitutes measurement level-1 model. subject abilities (ideal points) modeled second level Normal linear predictor subject covariates Xjdata, common variance \\(\\sigma^2\\). parameters interest subject abilities (ideal points), item parameters, second-level coefficients. assume following priors.  subject abilities (ideal points): $$\\theta_j \\sim \\mathcal{N}(\\mu_{\\theta} ,T_{0}^{-1})$$ item parameters, prior : $$\\left[a_i, b_i \\right]' \\sim \\mathcal{N}_2 (ab_{0},AB_{0}^{-1})$$ model identified proper priors item parameters constraints placed ability parameters. case measurement models, make sure plenty free memory, especially storing item parameters.","code":""},{"path":"/reference/MCMCirtHier1d.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Markov Chain Monte Carlo for Hierarchical One Dimensional Item Response\nTheory Model, Covariates Predicting Latent Ideal Point (Ability) — MCMCirtHier1d","text":"James H. Albert. 1992. ``Bayesian Estimation Normal Ogive Item Response Curves Using Gibbs Sampling.\" Journal Educational Statistics.  17: 251--269. Joshua Clinton, Simon Jackman, Douglas Rivers. 2004. ``Statistical Analysis Roll Call Data.\"  American Political Science Review 98: 355--370. Valen E. Johnson James H. Albert. 1999. ``Ordinal Data Modeling.\" Springer: New York. Liu, Jun S. Ying Nian Wu. 1999. ``Parameter Expansion Data Augmentation.'' Journal American Statistical Association 94: 1264--1274. Andrew D. Martin, Kevin M. Quinn, Jong Hee Park. 2011.  ``MCMCpack: Markov Chain Monte Carlo R.'', Journal Statistical Software. 42(9): 1-21.  doi:10.18637/jss.v042.i09 . Daniel Pemstein, Kevin M. Quinn, Andrew D. Martin.  2007.  Scythe Statistical Library 1.0. http://scythe.lsa.umich.edu. Martyn Plummer, Nicky Best, Kate Cowles, Karen Vines. 2006.  ``Output Analysis Diagnostics MCMC (CODA)'', R News. 6(1): 7-11. https://CRAN.R-project.org/doc/Rnews/Rnews_2006-1.pdf. Douglas Rivers.  2004.  ``Identification Multidimensional Item-Response Models.\"  Stanford University, typescript.","code":""},{"path":[]},{"path":"/reference/MCMCirtHier1d.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Markov Chain Monte Carlo for Hierarchical One Dimensional Item Response\nTheory Model, Covariates Predicting Latent Ideal Point (Ability) — MCMCirtHier1d","text":"Michael Malecki, mike@crunch.io, https://github.com/malecki.","code":""},{"path":"/reference/MCMCirtHier1d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Markov Chain Monte Carlo for Hierarchical One Dimensional Item Response\nTheory Model, Covariates Predicting Latent Ideal Point (Ability) — MCMCirtHier1d","text":"","code":"if (FALSE) { data(SupremeCourt)  Xjdata <- data.frame(presparty= c(1,1,0,1,1,1,1,0,0),                      sex= c(0,0,1,0,0,0,0,1,0))  ## Parameter Expansion reduces autocorrelation.   posterior1 <- MCMCirtHier1d(t(SupremeCourt),                    burnin=50000, mcmc=10000, thin=20,                    verbose=10000,                    Xjdata=Xjdata,                    marginal.likelihood=\"Chib95\",        px=TRUE)  ## But, you can always turn it off.   posterior2 <- MCMCirtHier1d(t(SupremeCourt),                    burnin=50000, mcmc=10000, thin=20,                    verbose=10000,                    Xjdata=Xjdata,                    #marginal.likelihood=\"Chib95\",        px=FALSE) ## Note that the hierarchical model has greater autocorrelation than ## the naive IRT model.   posterior0 <- MCMCirt1d(t(SupremeCourt),                         theta.constraints=list(Scalia=\"+\", Ginsburg=\"-\"),                         B0.alpha=.2, B0.beta=.2,                         burnin=50000, mcmc=100000, thin=100, verbose=10000,                         store.item=FALSE)  ## Randomly 10% Missing -- this affects the expansion parameter, increasing ## the variance of the (unidentified) latent parameter alpha.     scMiss <- SupremeCourt    scMiss[matrix(as.logical(rbinom(nrow(SupremeCourt)*ncol(SupremeCourt), 1, .1)),       dim(SupremeCourt))] <- NA     posterior1.miss <- MCMCirtHier1d(t(scMiss),                    burnin=80000, mcmc=10000, thin=20,                    verbose=10000,                    Xjdata=Xjdata,                    marginal.likelihood=\"Chib95\",        px=TRUE)     }"},{"path":"/reference/MCMCirtKd.html","id":null,"dir":"Reference","previous_headings":"","what":"Markov Chain Monte Carlo for K-Dimensional Item Response Theory Model — MCMCirtKd","title":"Markov Chain Monte Carlo for K-Dimensional Item Response Theory Model — MCMCirtKd","text":"function generates sample posterior distribution K-dimensional item response theory (IRT) model, standard normal priors subject abilities (ideal points), normal priors item parameters.  user supplies data priors, sample posterior distribution returned mcmc object, can subsequently analyzed functions provided coda package.","code":""},{"path":"/reference/MCMCirtKd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Markov Chain Monte Carlo for K-Dimensional Item Response Theory Model — MCMCirtKd","text":"","code":"MCMCirtKd(   datamatrix,   dimensions,   item.constraints = list(),   burnin = 1000,   mcmc = 10000,   thin = 1,   verbose = 0,   seed = NA,   alphabeta.start = NA,   b0 = 0,   B0 = 0,   store.item = FALSE,   store.ability = TRUE,   drop.constant.items = TRUE,   ... )"},{"path":"/reference/MCMCirtKd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Markov Chain Monte Carlo for K-Dimensional Item Response Theory Model — MCMCirtKd","text":"datamatrix matrix data.  Must 0, 1, missing values.  dimensionality subjects items. dimensions number dimensions latent space. item.constraints List lists specifying possible equality simple inequality constraints item parameters. typical entry list one three forms: rowname=list(d,c) constrain dth item parameter item named rowname equal c, rowname=list(d,\"+\") constrain dth item parameter item named rowname positive, androwname=list(d, \"-\") constrain dth item parameter item named rowname negative. x matrix without row names defaults names ``V1\", ``V2\", ... , etc used. K dimensional model, first item parameter item \\(\\) difficulty parameter (\\(\\alpha_i\\)), second item parameter discrimation parameter dimension 1 (\\(\\beta_{,1}\\)), third item parameter discrimation parameter dimension 2 (\\(\\beta_{,2}\\)), ..., (K+1)th item parameter discrimation parameter dimension K (\\(\\beta_{,1}\\)).  item difficulty parameters (\\(\\alpha\\)) generally constrained. burnin number burn-iterations sampler. mcmc number iterations sampler. thin thinning interval used simulation.  number iterations must divisible value. verbose switch determines whether progress sampler printed screen.  verbose greater 0 every verboseth iteration printed screen. seed seed random number generator.  NA, Mersenne Twister generator used default seed 12345; integer passed used seed Mersenne twister.  user can also pass list length two use L'Ecuyer random number generator, suitable parallel computation.  first element list L'Ecuyer seed, vector length six NA (NA default seed rep(12345,6) used).  second element list positive substream number. See MCMCpack specification details. alphabeta.start starting values \\(\\alpha\\) \\(\\beta\\) difficulty discrimination parameters. alphabeta.start set scalar starting value unconstrained item parameters set scalar. alphabeta.start matrix dimension \\((K+1) \\times items\\) alphabeta.start matrix used starting values (except equality-constrained elements). alphabeta.start set NA (default) starting values unconstrained elements set values generated series proportional odds logistic regression fits, starting values inequality constrained elements set either 1.0 -1.0 depending nature constraints. b0 prior means \\(\\alpha\\) \\(\\beta\\) difficulty discrimination parameters, stacked items.  scalar passed, used prior mean items. B0 prior precisions (inverse variances) independent normal prior item parameters.  Can either scalar matrix dimension \\((K+1) \\times items\\). store.item switch determines whether store item parameters posterior analysis.  NOTE: applications many items takes enormous amount memory. many items want want store item parameters may want thin chain heavily.  default, item parameters stored. store.ability switch determines whether store subject abilities posterior analysis. NOTE: applications many subjects takes enormous amount memory. many subjects want want store ability parameters may want thin chain heavily. default, ability parameters stored. drop.constant.items switch determines whether items variation deleted fitting model. Default = TRUE. ... arguments passed","code":""},{"path":"/reference/MCMCirtKd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Markov Chain Monte Carlo for K-Dimensional Item Response Theory Model — MCMCirtKd","text":"mcmc object contains posterior sample.  object can summarized functions provided coda package.","code":""},{"path":"/reference/MCMCirtKd.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Markov Chain Monte Carlo for K-Dimensional Item Response Theory Model — MCMCirtKd","text":"MCMCirtKd simulates posterior distribution using standard Gibbs sampling using data augmentation (normal draw subject abilities, multivariate normal draw item parameters, truncated normal draw latent utilities). simulation proper done compiled C++ code maximize efficiency.  Please consult coda documentation comprehensive list functions can used analyze posterior sample. default number burnin mcmc iterations much smaller typical default values MCMCpack.  fitting model extremely computationally expensive.  mean small number scans yield good estimates.  priors model need proper identification purposes.  user asked provide prior means precisions (variances) item parameters subject parameters. model takes following form.  assume subject ability (ideal point) denoted \\(\\theta_j\\) \\((K \\times 1)\\), item difficulty parameter \\(\\alpha_i\\) discrimination parameter \\(\\beta_i\\) \\((K \\times 1)\\).  observed choice subject \\(j\\) item \\(\\) observed data matrix \\((\\times J)\\).  assume choice dictated unobserved utility: $$z_{,j} = - \\alpha_i + \\beta_i'\\theta_j + \\varepsilon_{,j}$$ \\(\\varepsilon_{,j}\\)s assumed distributed standard normal.  parameters interest subject abilities (ideal points) item parameters. assume following priors.  subject abilities (ideal points) assume independent standard normal priors: $$\\theta_{j,k} \\sim \\mathcal{N}(0,1)$$ changed user. item parameter, assume independent normal priors: $$\\left[\\alpha_i, \\beta_i \\right]' \\sim \\mathcal{N}_{(K+1)} (b_{0,},B_{0,})$$ \\(B_{0,}\\) diagonal matrix.  One can specify separate prior mean precision item parameter. model identified constraints item parameters (see Jackman 2001).  user place constraints subject abilities. identification scheme differs MCMCirt1d, uses constraints subject abilities identify model.  experience, using subject ability constraints models greater one dimension work particularly well. case measurement models, make sure plenty free memory, especially storing item parameters.","code":""},{"path":"/reference/MCMCirtKd.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Markov Chain Monte Carlo for K-Dimensional Item Response Theory Model — MCMCirtKd","text":"James H. Albert. 1992. ``Bayesian Estimation Normal Ogive Item Response Curves Using Gibbs Sampling.\" Journal Educational Statistics.  17: 251-269. Joshua Clinton, Simon Jackman, Douglas Rivers. 2004. ``Statistical Analysis Roll Call Data.\"  American Political Science Review.  98: 355-370. Simon Jackman. 2001. ``Multidimensional Analysis Roll Call Data via Bayesian Simulation.'' Political Analysis. 9: 227-241. Valen E. Johnson James H. Albert. 1999. Ordinal Data Modeling. Springer: New York. Andrew D. Martin, Kevin M. Quinn, Jong Hee Park. 2011.  ``MCMCpack: Markov Chain Monte Carlo R.'', Journal Statistical Software. 42(9): 1-21.  doi:10.18637/jss.v042.i09 . Daniel Pemstein, Kevin M. Quinn, Andrew D. Martin.  2007.  Scythe Statistical Library 1.0. http://scythe.lsa.umich.edu. Martyn Plummer, Nicky Best, Kate Cowles, Karen Vines. 2006.  ``Output Analysis Diagnostics MCMC (CODA)'', R News. 6(1): 7-11. https://CRAN.R-project.org/doc/Rnews/Rnews_2006-1.pdf. Douglas Rivers.  2004.  ``Identification Multidimensional Item-Response Models.\"  Stanford University, typescript.","code":""},{"path":[]},{"path":"/reference/MCMCirtKd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Markov Chain Monte Carlo for K-Dimensional Item Response Theory Model — MCMCirtKd","text":"","code":"if (FALSE) {    data(SupremeCourt)    # note that the rownames (the item names) are \"1\", \"2\", etc    posterior1 <- MCMCirtKd(t(SupremeCourt), dimensions=1,                    burnin=5000, mcmc=50000, thin=10,                    B0=.25, store.item=TRUE,                    item.constraints=list(\"1\"=list(2,\"-\")))    plot(posterior1)    summary(posterior1)      data(Senate)    Sen.rollcalls <- Senate[,6:677]    posterior2 <- MCMCirtKd(Sen.rollcalls, dimensions=2,                    burnin=5000, mcmc=50000, thin=10,                    item.constraints=list(rc2=list(2,\"-\"), rc2=c(3,0),                                          rc3=list(3,\"-\")),                    B0=.25)    plot(posterior2)    summary(posterior2)    }"},{"path":"/reference/MCMCirtKdRob.html","id":null,"dir":"Reference","previous_headings":"","what":"Markov Chain Monte Carlo for Robust K-Dimensional Item Response Theory Model — MCMCirtKdRob","title":"Markov Chain Monte Carlo for Robust K-Dimensional Item Response Theory Model — MCMCirtKdRob","text":"function generates posterior sample Robust K-dimensional item response theory (IRT) model logistic link, independent standard normal priors subject abilities (ideal points), independent normal priors item parameters.  user supplies data priors, sample posterior distribution returned mcmc object, can subsequently analyzed functions provided coda package.","code":""},{"path":"/reference/MCMCirtKdRob.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Markov Chain Monte Carlo for Robust K-Dimensional Item Response Theory Model — MCMCirtKdRob","text":"","code":"MCMCirtKdRob(   datamatrix,   dimensions,   item.constraints = list(),   ability.constraints = list(),   burnin = 500,   mcmc = 5000,   thin = 1,   interval.method = \"step\",   theta.w = 0.5,   theta.mp = 4,   alphabeta.w = 1,   alphabeta.mp = 4,   delta0.w = NA,   delta0.mp = 3,   delta1.w = NA,   delta1.mp = 3,   verbose = FALSE,   seed = NA,   theta.start = NA,   alphabeta.start = NA,   delta0.start = NA,   delta1.start = NA,   b0 = 0,   B0 = 0,   k0 = 0.1,   k1 = 0.1,   c0 = 1,   d0 = 1,   c1 = 1,   d1 = 1,   store.item = TRUE,   store.ability = FALSE,   drop.constant.items = TRUE,   ... )"},{"path":"/reference/MCMCirtKdRob.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Markov Chain Monte Carlo for Robust K-Dimensional Item Response Theory Model — MCMCirtKdRob","text":"datamatrix matrix data.  Must 0, 1, missing values.  dimensionality subjects items. dimensions number dimensions latent space. item.constraints List lists specifying possible equality simple inequality constraints item parameters. typical entry list one three forms: rowname=list(d,c) constrain dth item parameter item named rowname equal c, rowname=list(d,\"+\") constrain dth item parameter item named rowname positive, rowname=list(d, \"-\") constrain dth item parameter item named rowname negative. datamatrix matrix without row names defaults names ``V1\", ``V2\", ... , etc used. \\(K\\)-dimensional model, first item parameter item \\(\\) difficulty parameter (\\(\\alpha_i\\)), second item parameter discrimation parameter dimension 1 (\\(\\beta_{,1}\\)), third item parameter discrimation parameter dimension 2 (\\(\\beta_{,2}\\)), ..., \\((K+1)\\)th item parameter discrimation parameter dimension \\(K\\) (\\(\\beta_{,K}\\)).  item difficulty parameters (\\(\\alpha\\)) generally constrained. ability.constraints List lists specifying possible equality simple inequality constraints ability parameters. typical entry list one three forms: colname=list(d,c) constrain dth ability parameter subject named colname equal c, colname=list(d,\"+\") constrain dth ability parameter subject named colname positive, colname=list(d, \"-\") constrain dth ability parameter subject named colname negative. datamatrix matrix without column names defaults names ``V1\", ``V2\", ... , etc used. burnin number burn-iterations sampler. mcmc number iterations sampler burn-. thin thinning interval used simulation.  number iterations must divisible value. interval.method Method finding slicing interval. Can equal either step case stepping algorithm Neal (2003) used doubling case doubling procedure Neal (2003) used. stepping method tends faster per-iteration basis typically requires function calls. doubling method expands initial interval quickly makes Markov chain mix somewhat quickly-- least situations. theta.w initial width slice sampling interval ability parameter (elements \\(\\theta\\)) theta.mp parameter governing maximum possible width slice interval ability parameter (elements \\(\\theta\\)). interval.method=\"step\" maximum width theta.w * theta.mp. interval.method=\"doubling\" maximum width theta.w * 2^theta.mp. alphabeta.w initial width slice sampling interval item parameter (elements \\(\\alpha\\) \\(\\beta\\)) alphabeta.mp parameter governing maximum possible width slice interval item parameters (elements \\(\\alpha\\) \\(\\beta\\)). interval.method=\"step\" maximum width alphabeta.w * alphabeta.mp. interval.method=\"doubling\" maximum width alphabeta.w * 2^alphabeta.mp. delta0.w initial width slice sampling interval \\(\\delta_0\\) delta0.mp parameter governing maximum possible width slice interval \\(\\delta_0\\). interval.method=\"step\" maximum width delta0.w * delta0.mp. interval.method=\"doubling\" maximum width delta0.w * 2^delta0.mp. delta1.w initial width slice sampling interval \\(\\delta_1\\) delta1.mp parameter governing maximum possible width slice interval \\(\\delta_1\\). interval.method=\"step\" maximum width delta1.w * delta1.mp. interval.method=\"doubling\" maximum width delta1.w * 2^delta1.mp. verbose switch determines whether progress sampler printed screen.  verbose > 0, iteration number printed screen every verbose'th iteration. seed seed random number generator.  NA, Mersenne Twister generator used default seed 12345; integer passed used seed Mersenne twister.  user can also pass list length two use L'Ecuyer random number generator, suitable parallel computation.  first element list L'Ecuyer seed, vector length six NA (NA default seed rep(12345,6) used).  second element list positive substream number. See MCMCpack specification details. theta.start starting values ability parameters \\(\\theta\\). Can either scalar matrix number rows equal number subjects number columns equal dimension \\(K\\) latent space. theta.start=NA starting values chosen 0 unconstrained subjects, -0.5 subjects negative inequality constraints 0.5 subjects positive inequality constraints. alphabeta.start starting values \\(\\alpha\\) \\(\\beta\\) difficulty discrimination parameters. alphabeta.start set scalar starting value unconstrained item parameters set scalar. alphabeta.start matrix dimension \\((K+1) \\times items\\) alphabeta.start matrix used starting values (except equality-constrained elements). alphabeta.start set NA (default) starting values unconstrained elements set values generated series proportional odds logistic regression fits, starting values inequality constrained elements set either 1.0 -1.0 depending nature constraints. delta0.start starting value \\(\\delta_0\\) parameter. delta1.start starting value \\(\\delta_1\\) parameter. b0 prior means \\(\\alpha\\) \\(\\beta\\) difficulty discrimination parameters, stacked items.  scalar passed, used prior mean items. B0 prior precisions (inverse variances) independent Normal prior item parameters.  Can either scalar matrix dimension \\((K+1) \\times items\\). k0 \\(\\delta_0\\) constrained lie interval 0 k0. k1 \\(\\delta_1\\) constrained lie interval 0 k1. c0 Parameter governing prior \\(\\delta_0\\). \\(\\delta_0\\) divided k0 assumed follow beta distribution first parameter c0. d0 Parameter governing prior \\(\\delta_0\\). \\(\\delta_0\\) divided k0 assumed follow beta distribution second parameter d0. c1 Parameter governing prior \\(\\delta_1\\). \\(\\delta_1\\) divided k1 assumed follow beta distribution first parameter c1. d1 Parameter governing prior \\(\\delta_1\\). \\(\\delta_1\\) divided k1 assumed follow beta distribution second parameter d1. store.item switch determines whether store item parameters posterior analysis.  NOTE: typically takes enormous amount memory, used chain thinned heavily, applications small number items.  default, item parameters stored. store.ability switch determines whether store subject abilities posterior analysis.  default, item parameters stored. drop.constant.items switch determines whether items variation deleted fitting model. Default = TRUE. ... arguments passed","code":""},{"path":"/reference/MCMCirtKdRob.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Markov Chain Monte Carlo for Robust K-Dimensional Item Response Theory Model — MCMCirtKdRob","text":"mcmc object contains posterior sample.  object can summarized functions provided coda package.","code":""},{"path":"/reference/MCMCirtKdRob.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Markov Chain Monte Carlo for Robust K-Dimensional Item Response Theory Model — MCMCirtKdRob","text":"MCMCirtKdRob simulates posterior using slice sampling algorithm Neal (2003).  simulation proper done compiled C++ code maximize efficiency.  Please consult coda documentation comprehensive list functions can used analyze posterior sample. model takes following form.  assume subject subject ability (ideal point) denoted \\(\\theta_j\\) \\((K \\times 1)\\), item scalar difficulty parameter \\(\\alpha_i\\) discrimination parameter \\(\\beta_i\\) \\((K \\times 1)\\).  observed choice subject \\(j\\) item \\(\\) observed data matrix \\((\\times J)\\). probability subject \\(j\\) answers item \\(\\) correctly assumed : $$\\pi_{ij} = \\delta_0 + (1 - \\delta_0 - \\delta_1) / (1+\\exp(\\alpha_i - \\beta_i \\theta_j))$$ model discussed Bafumi et al. (2005). assume following priors.  subject abilities (ideal points) assume independent standard Normal priors: $$\\theta_{j,k} \\sim \\mathcal{N}(0,1)$$ changed user.  item parameter, assume independent Normal priors: $$\\left[\\alpha_i, \\beta_i \\right]' \\sim \\mathcal{N}_{(K+1)} (b_{0,},B_{0,})$$ \\(B_{0,}\\) diagonal matrix.  One can specify separate prior mean precision item parameter. also assume \\(\\delta_0 / k_0 \\sim \\)\\( \\mathcal{B}eta(c_0, d_0)\\) \\(\\delta_1 / k_1 \\sim \\)\\( \\mathcal{B}eta(c_1, d_1)\\). model identified constraints item parameters / ability parameters. See Rivers (2004) discussion identification IRT models. case measurement models, make sure plenty free memory, especially storing item parameters.","code":""},{"path":"/reference/MCMCirtKdRob.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Markov Chain Monte Carlo for Robust K-Dimensional Item Response Theory Model — MCMCirtKdRob","text":"James H. Albert. 1992. ``Bayesian Estimation Normal Ogive Item Response Curves Using Gibbs Sampling.\" Journal Educational Statistics.  17: 251-269. Joseph Bafumi, Andrew Gelman, David K. Park, Noah Kaplan. 2005. ``Practical Issues Implementing Understanding Bayesian Ideal Point Estimation.'' Political Analysis. Joshua Clinton, Simon Jackman, Douglas Rivers. 2004. ``Statistical Analysis Roll Call Data.\"  American Political Science Review.  98: 355-370. Simon Jackman. 2001. ``Multidimensional Analysis Roll Call Data via Bayesian Simulation.'' Political Analysis. 9: 227-241. Valen E. Johnson James H. Albert. 1999. Ordinal Data Modeling. Springer: New York. Andrew D. Martin, Kevin M. Quinn, Jong Hee Park. 2011.  ``MCMCpack: Markov Chain Monte Carlo R.'', Journal Statistical Software. 42(9): 1-21.  doi:10.18637/jss.v042.i09 . Daniel Pemstein, Kevin M. Quinn, Andrew D. Martin.  2007.  Scythe Statistical Library 1.0. http://scythe.lsa.umich.edu. Radford Neal. 2003. ``Slice Sampling'' (discussion). Annals Statistics, 31: 705-767. Martyn Plummer, Nicky Best, Kate Cowles, Karen Vines. 2006.  ``Output Analysis Diagnostics MCMC (CODA)'', R News. 6(1): 7-11. https://CRAN.R-project.org/doc/Rnews/Rnews_2006-1.pdf. Douglas Rivers.  2004.  ``Identification Multidimensional Item-Response Models.\"  Stanford University, typescript.","code":""},{"path":[]},{"path":"/reference/MCMCirtKdRob.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Markov Chain Monte Carlo for Robust K-Dimensional Item Response Theory Model — MCMCirtKdRob","text":"","code":"if (FALSE) {    ## Court example with ability (ideal point) and    ##  item (case) constraints    data(SupremeCourt)    post1 <- MCMCirtKdRob(t(SupremeCourt), dimensions=1,                    burnin=500, mcmc=5000, thin=1,                    B0=.25, store.item=TRUE, store.ability=TRUE,                    ability.constraints=list(\"Thomas\"=list(1,\"+\"),                    \"Stevens\"=list(1,-4)),                    item.constraints=list(\"1\"=list(2,\"-\")),                    verbose=50)    plot(post1)    summary(post1)     ## Senate example with ability (ideal point) constraints    data(Senate)    namestring <- as.character(Senate$member)    namestring[78] <- \"CHAFEE1\"    namestring[79] <- \"CHAFEE2\"    namestring[59] <- \"SMITH.NH\"    namestring[74] <- \"SMITH.OR\"    rownames(Senate) <- namestring    post2 <- MCMCirtKdRob(Senate[,6:677], dimensions=1,                          burnin=1000, mcmc=5000, thin=1,                          ability.constraints=list(\"KENNEDY\"=list(1,-4),                                   \"HELMS\"=list(1, 4), \"ASHCROFT\"=list(1,\"+\"),                                   \"BOXER\"=list(1,\"-\"), \"KERRY\"=list(1,\"-\"),                                   \"HATCH\"=list(1,\"+\")),                          B0=0.1, store.ability=TRUE, store.item=FALSE,                          verbose=5, k0=0.15, k1=0.15,                          delta0.start=0.13, delta1.start=0.13)     plot(post2)    summary(post2)    }"},{"path":"/reference/MCMClogit.html","id":null,"dir":"Reference","previous_headings":"","what":"Markov Chain Monte Carlo for Logistic Regression — MCMClogit","title":"Markov Chain Monte Carlo for Logistic Regression — MCMClogit","text":"function generates sample posterior distribution logistic regression model using random walk Metropolis algorithm. user supplies data priors, sample posterior distribution returned mcmc object, can subsequently analyzed functions provided coda package.","code":""},{"path":"/reference/MCMClogit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Markov Chain Monte Carlo for Logistic Regression — MCMClogit","text":"","code":"MCMClogit(   formula,   data = NULL,   burnin = 1000,   mcmc = 10000,   thin = 1,   tune = 1.1,   verbose = 0,   seed = NA,   beta.start = NA,   b0 = 0,   B0 = 0,   user.prior.density = NULL,   logfun = TRUE,   marginal.likelihood = c(\"none\", \"Laplace\"),   ... )"},{"path":"/reference/MCMClogit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Markov Chain Monte Carlo for Logistic Regression — MCMClogit","text":"formula Model formula. data Data frame. burnin number burn-iterations sampler. mcmc number Metropolis iterations sampler. thin thinning interval used simulation.  number mcmc iterations must divisible value. tune Metropolis tuning parameter. Can either positive scalar \\(k\\)-vector, \\(k\\) length \\(\\beta\\).Make sure acceptance rate satisfactory (typically 0.20 0.5) using posterior sample inference. verbose switch determines whether progress sampler printed screen.  verbose greater 0 iteration number, current beta vector, Metropolis acceptance rate printed screen every verboseth iteration. seed seed random number generator.  NA, Mersenne Twister generator used default seed 12345; integer passed used seed Mersenne twister.  user can also pass list length two use L'Ecuyer random number generator, suitable parallel computation.  first element list L'Ecuyer seed, vector length six NA (NA default seed rep(12345,6) used).  second element list positive substream number. See MCMCpack specification details. beta.start starting value \\(\\beta\\) vector.  can either scalar column vector dimension equal number betas. takes scalar value, value serve starting value betas.  default value NA use maximum likelihood estimate \\(\\beta\\) starting value. b0 user.prior.density==NULL b0 prior mean \\(\\beta\\) multivariate normal prior.  can either scalar column vector dimension equal number betas. takes scalar value, value serve prior mean betas. B0 user.prior.density==NULL B0 prior precision \\(\\beta\\) multivariate normal prior.  can either scalar square matrix dimensions equal number betas.  takes scalar value, value times identity matrix serves prior precision \\(\\beta\\). Default value 0 equivalent improper uniform prior beta. user.prior.density non-NULL, prior (log)density constant proportionality. must function defined R whose first argument continuous (possibly vector) variable. first argument point state space prior (log)density evaluated. Additional arguments can passed user.prior.density() inserting call MCMClogit(). See Details section examples information. logfun Logical indicating whether use.prior.density() returns natural log density function (TRUE) density (FALSE). marginal.likelihood marginal likelihood calculated? Options : none case marginal likelihood calculated Laplace case Laplace approximation (see Kass Raftery, 1995) used. ... arguments passed","code":""},{"path":"/reference/MCMClogit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Markov Chain Monte Carlo for Logistic Regression — MCMClogit","text":"mcmc object contains posterior sample.  object can summarized functions provided coda package.","code":""},{"path":"/reference/MCMClogit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Markov Chain Monte Carlo for Logistic Regression — MCMClogit","text":"MCMClogit simulates posterior distribution logistic regression model using random walk Metropolis algorithm. simulation proper done compiled C++ code maximize efficiency.  Please consult coda documentation comprehensive list functions can used analyze posterior sample. model takes following form: $$y_i \\sim \\mathcal{B}ernoulli(\\pi_i)$$ inverse link function: $$\\pi_i = \\frac{\\exp(x_i'\\beta)}{1 + \\exp(x_i'\\beta)}$$ default, assume multivariate Normal prior \\(\\beta\\): $$\\beta \\sim \\mathcal{N}(b_0,B_0^{-1})$$ Additionally, arbitrary user-defined priors can specified user.prior.density argument. default multivariate normal prior used, Metropolis proposal distribution centered current value \\(\\beta\\) variance-covariance \\(V = T (B_0 + C^{-1})^{-1} T \\), \\(T\\) diagonal positive definite matrix formed tune, \\(B_0\\) prior precision, \\(C\\) large sample variance-covariance matrix MLEs. last calculation done via initial call glm. user-defined prior used, Metropolis proposal distribution centered current value \\(\\beta\\) variance-covariance \\(V = T C T\\), \\(T\\) diagonal positive definite matrix formed tune \\(C\\) large sample variance-covariance matrix MLEs. last calculation done via initial call glm.","code":""},{"path":"/reference/MCMClogit.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Markov Chain Monte Carlo for Logistic Regression — MCMClogit","text":"Andrew D. Martin, Kevin M. Quinn, Jong Hee Park. 2011. ``MCMCpack: Markov Chain Monte Carlo R.'', Journal Statistical Software. 42(9): 1-21.  doi:10.18637/jss.v042.i09 . Daniel Pemstein, Kevin M. Quinn, Andrew D. Martin.  2007.  Scythe Statistical Library 1.0. http://scythe.lsa.umich.edu. Martyn Plummer, Nicky Best, Kate Cowles, Karen Vines. 2006.  ``Output Analysis Diagnostics MCMC (CODA)'', R News. 6(1): 7-11. https://CRAN.R-project.org/doc/Rnews/Rnews_2006-1.pdf.","code":""},{"path":[]},{"path":"/reference/MCMClogit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Markov Chain Monte Carlo for Logistic Regression — MCMClogit","text":"","code":"if (FALSE) {    ## default improper uniform prior    data(birthwt)    posterior <- MCMClogit(low~age+as.factor(race)+smoke, data=birthwt)    plot(posterior)    summary(posterior)      ## multivariate normal prior    data(birthwt)    posterior <- MCMClogit(low~age+as.factor(race)+smoke, b0=0, B0=.001,                           data=birthwt)    plot(posterior)    summary(posterior)      ## user-defined independent Cauchy prior    logpriorfun <- function(beta){      sum(dcauchy(beta, log=TRUE))    }     posterior <- MCMClogit(low~age+as.factor(race)+smoke,                           data=birthwt, user.prior.density=logpriorfun,                           logfun=TRUE)    plot(posterior)    summary(posterior)      ## user-defined independent Cauchy prior with additional args    logpriorfun <- function(beta, location, scale){      sum(dcauchy(beta, location, scale, log=TRUE))    }     posterior <- MCMClogit(low~age+as.factor(race)+smoke,                           data=birthwt, user.prior.density=logpriorfun,                           logfun=TRUE, location=0, scale=10)    plot(posterior)    summary(posterior)      }"},{"path":"/reference/MCMCmetrop1R.html","id":null,"dir":"Reference","previous_headings":"","what":"Metropolis Sampling from User-Written R function — MCMCmetrop1R","title":"Metropolis Sampling from User-Written R function — MCMCmetrop1R","text":"function allows user construct sample user-defined continuous distribution using random walk Metropolis algorithm.","code":""},{"path":"/reference/MCMCmetrop1R.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metropolis Sampling from User-Written R function — MCMCmetrop1R","text":"","code":"MCMCmetrop1R(   fun,   theta.init,   burnin = 500,   mcmc = 20000,   thin = 1,   tune = 1,   verbose = 0,   seed = NA,   logfun = TRUE,   force.samp = FALSE,   V = NULL,   optim.method = \"BFGS\",   optim.lower = -Inf,   optim.upper = Inf,   optim.control = list(fnscale = -1, trace = 0, REPORT = 10, maxit = 500),   ... )"},{"path":"/reference/MCMCmetrop1R.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metropolis Sampling from User-Written R function — MCMCmetrop1R","text":"fun unnormalized (log)density distribution take sample. must function defined R whose first argument continuous (possibly vector) variable. first argument point state space (log)density evaluated. Additional arguments can passed fun() inserting call MCMCmetrop1R(). See Details section examples information. theta.init Starting values sampling. Must appropriate dimension. must also case fun(theta.init, ...) greater -Inf fun() logdensity greater 0 fun() density. burnin number burn-iterations sampler. mcmc number MCMC iterations burnin. thin thinning interval used simulation.  number MCMC iterations must divisible value. tune tuning parameter Metropolis sampling.  Can either positive scalar \\(k\\)-vector, \\(k\\) length \\(\\theta\\). verbose switch determines whether progress sampler printed screen.  verbose greater 0 iteration number, \\(\\theta\\) vector, function value, Metropolis acceptance rate sent screen every verboseth iteration. seed seed random number generator.  NA, Mersenne Twister generator used default seed 12345; integer passed used seed Mersenne twister.  user can also pass list length two use L'Ecuyer random number generator, suitable parallel computation.  first element list L'Ecuyer seed, vector length six NA (NA default seed rep(12345,6) used).  second element list positive substream number. See MCMCpack specification details. logfun Logical indicating whether fun returns natural log density function (TRUE) density (FALSE). force.samp Logical indicating whether sampling proceed Hessian calculated initial call optim routine maximize (log)density negative definite. force.samp==TRUE Hessian optim non-negative definite, Hessian rescaled subtracting small values main diagonal negative definite. Sampling proceeds using rescaled Hessian place original Hessian optim. default, force.samp==FALSE Hessian optim non-negative definite, error message printed call MCMCmetrop1R terminated. Please note non-negative Hessian mode often indication function interest proper density. Thus, force.samp set equal TRUE great caution. V variance-covariance matrix Gaussian proposal distribution. Must square matrix NULL. square matrix, V must dimension equal length theta.init. NULL, V calculated tune initial call optim. See Details section information. Unless log-posterior expensive compute typically best use default V = NULL. optim.method value method parameter sent optim initial maximization fun. See optim details. optim.lower value lower parameter sent optim initial maximization fun. See optim details. optim.upper value upper parameter sent optim initial maximization fun. See optim details. optim.control value control parameter sent optim initial maximization fun. See optim details. ... Additional arguments.","code":""},{"path":"/reference/MCMCmetrop1R.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metropolis Sampling from User-Written R function — MCMCmetrop1R","text":"mcmc object contains posterior sample.  object can summarized functions provided coda package.","code":""},{"path":"/reference/MCMCmetrop1R.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Metropolis Sampling from User-Written R function — MCMCmetrop1R","text":"MCMCmetrop1R produces sample user-defined distribution using random walk Metropolis algorithm multivariate normal proposal distribution. See Gelman et al. (2003) Robert & Casella (2004) details random walk Metropolis algorithm. proposal distribution centered current value \\(\\theta\\) variance-covariance \\(V\\). \\(V\\) specified user NULL \\(V\\) calculated : \\(V = T (-1\\cdot H)^{-1} T \\), \\(T\\) diagonal positive definite matrix formed tune \\(H\\) approximate Hessian fun evaluated mode. last calculation done via initial call optim.","code":""},{"path":"/reference/MCMCmetrop1R.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Metropolis Sampling from User-Written R function — MCMCmetrop1R","text":"Siddhartha Chib; Edward Greenberg. 1995. ``Understanding Metropolis-Hastings Algorithm.\"  American Statistician, 49, 327-335. Andrew Gelman, John B. Carlin, Hal S. Stern, Donald B. Rubin. 2003. Bayesian Data Analysis. 2nd Edition. Boca Raton: Chapman & Hall/CRC. Andrew D. Martin, Kevin M. Quinn, Jong Hee Park. 2011.  ``MCMCpack: Markov Chain Monte Carlo R.'', Journal Statistical Software. 42(9): 1-21.  doi:10.18637/jss.v042.i09 . Daniel Pemstein, Kevin M. Quinn, Andrew D. Martin.  2007.  Scythe Statistical Library 1.0. http://scythe.lsa.umich.edu. Martyn Plummer, Nicky Best, Kate Cowles, Karen Vines. 2006.  ``Output Analysis Diagnostics MCMC (CODA)'', R News. 6(1): 7-11. https://CRAN.R-project.org/doc/Rnews/Rnews_2006-1.pdf. Christian P. Robert George Casella. 2004. Monte Carlo Statistical Methods. 2nd Edition. New York: Springer.","code":""},{"path":[]},{"path":"/reference/MCMCmetrop1R.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metropolis Sampling from User-Written R function — MCMCmetrop1R","text":"","code":"if (FALSE) {      ## logistic regression with an improper uniform prior     ## X and y are passed as args to MCMCmetrop1R      logitfun <- function(beta, y, X){       eta <- X %*% beta       p <- 1.0/(1.0+exp(-eta))       sum( y * log(p) + (1-y)*log(1-p) )     }      x1 <- rnorm(1000)     x2 <- rnorm(1000)     Xdata <- cbind(1,x1,x2)     p <- exp(.5 - x1 + x2)/(1+exp(.5 - x1 + x2))     yvector <- rbinom(1000, 1, p)      post.samp <- MCMCmetrop1R(logitfun, theta.init=c(0,0,0),                               X=Xdata, y=yvector,                               thin=1, mcmc=40000, burnin=500,                               tune=c(1.5, 1.5, 1.5),                               verbose=500, logfun=TRUE)      raftery.diag(post.samp)     plot(post.samp)     summary(post.samp)     ## ##################################################       ##  negative binomial regression with an improper unform prior     ## X and y are passed as args to MCMCmetrop1R     negbinfun <- function(theta, y, X){       k <- length(theta)       beta <- theta[1:(k-1)]       alpha <- exp(theta[k])       mu <- exp(X %*% beta)       log.like <- sum(                       lgamma(y+alpha) - lfactorial(y) - lgamma(alpha) +                       alpha * log(alpha/(alpha+mu)) +                       y * log(mu/(alpha+mu))                      )     }      n <- 1000     x1 <- rnorm(n)     x2 <- rnorm(n)     XX <- cbind(1,x1,x2)     mu <- exp(1.5+x1+2*x2)*rgamma(n,1)     yy <- rpois(n, mu)      post.samp <- MCMCmetrop1R(negbinfun, theta.init=c(0,0,0,0), y=yy, X=XX,                               thin=1, mcmc=35000, burnin=1000,                               tune=1.5, verbose=500, logfun=TRUE,                               seed=list(NA,1))     raftery.diag(post.samp)     plot(post.samp)     summary(post.samp)     ## ##################################################       ## sample from a univariate normal distribution with     ## mean 5 and standard deviation 0.1     ##     ## (MCMC obviously not necessary here and this should     ##  really be done with the logdensity for better     ##  numerical accuracy-- this is just an illustration of how     ##  MCMCmetrop1R works with a density rather than logdensity)      post.samp <- MCMCmetrop1R(dnorm, theta.init=5.3, mean=5, sd=0.1,                           thin=1, mcmc=50000, burnin=500,                           tune=2.0, verbose=5000, logfun=FALSE)      summary(post.samp)    }"},{"path":"/reference/MCMCmixfactanal.html","id":null,"dir":"Reference","previous_headings":"","what":"Markov Chain Monte Carlo for Mixed Data Factor Analysis Model — MCMCmixfactanal","title":"Markov Chain Monte Carlo for Mixed Data Factor Analysis Model — MCMCmixfactanal","text":"function generates sample posterior distribution mixed data (continuous ordinal) factor analysis model. Normal priors assumed factor loadings factor scores, improper uniform priors assumed cutpoints, inverse gamma priors assumed error variances (uniquenesses). user supplies data parameters prior distributions, sample posterior distribution returned mcmc object, can subsequently analyzed functions provided coda package.","code":""},{"path":"/reference/MCMCmixfactanal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Markov Chain Monte Carlo for Mixed Data Factor Analysis Model — MCMCmixfactanal","text":"","code":"MCMCmixfactanal(   x,   factors,   lambda.constraints = list(),   data = parent.frame(),   burnin = 1000,   mcmc = 20000,   thin = 1,   tune = NA,   verbose = 0,   seed = NA,   lambda.start = NA,   psi.start = NA,   l0 = 0,   L0 = 0,   a0 = 0.001,   b0 = 0.001,   store.lambda = TRUE,   store.scores = FALSE,   std.mean = TRUE,   std.var = TRUE,   ... )"},{"path":"/reference/MCMCmixfactanal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Markov Chain Monte Carlo for Mixed Data Factor Analysis Model — MCMCmixfactanal","text":"x one-sided formula containing manifest variables. Ordinal (including dichotomous) variables must coded ordered factors. level ordered factors must present data passed function.  NOTE: data input different MCMCmixfactanal either MCMCfactanal MCMCordfactanal. factors number factors fitted. lambda.constraints List lists specifying possible equality simple inequality constraints factor loadings. typical entry list one three forms: varname=list(d,c) constrain dth loading variable named varname equal c, varname=list(d,\"+\") constrain dth loading variable named varname positive, varname=list(d, \"-\") constrain dth loading variable named varname negative. x matrix without column names defaults names ``V1\", ``V2\", ... , etc used. Note , unlike MCMCfactanal, \\(\\Lambda\\) matrix used factors+1 columns. first column \\(\\Lambda\\) corresponds negative item difficulty parameters ordinal manifest variables mean parameters continuous manifest variables generally constrained directly user. data data frame. burnin number burn-iterations sampler. mcmc number iterations sampler. thin thinning interval used simulation.  number iterations must divisible value. tune tuning parameter Metropolis-Hastings sampling. Can either scalar \\(k\\)-vector (\\(k\\) number manifest variables). tune must strictly positive. verbose switch determines whether progress sampler printed screen.  verbose great 0 iteration number Metropolis-Hastings acceptance rate printed screen every verboseth iteration. seed seed random number generator.  NA, Mersenne Twister generator used default seed 12345; integer passed used seed Mersenne twister.  user can also pass list length two use L'Ecuyer random number generator, suitable parallel computation.  first element list L'Ecuyer seed, vector length six NA (NA default seed rep(12345,6) used).  second element list positive substream number. See MCMCpack specification details. lambda.start Starting values factor loading matrix Lambda. lambda.start set scalar starting value unconstrained loadings set scalar. lambda.start matrix dimensions Lambda lambda.start matrix used starting values (except equality-constrained elements). lambda.start set NA (default) starting values unconstrained elements first column Lambda based observed response pattern, remaining unconstrained elements Lambda set 0, starting values inequality constrained elements set either 1.0 -1.0 depending nature constraints. psi.start Starting values error variance (uniqueness) matrix. psi.start set scalar starting value diagonal elements Psi represent error variances continuous variables set value. psi.start \\(k\\)-vector (\\(k\\) number manifest variables) staring value Psi psi.start main diagonal exception entries corresponding error variances ordinal variables set 1.. psi.start set NA (default) starting values continuous variable uniquenesses set 0.5. Error variances ordinal response variables always constrained (regardless value psi.start error variance 1 order achieve identification. l0 means independent Normal prior factor loadings. Can either scalar matrix dimensions Lambda. L0 precisions (inverse variances) independent Normal prior factor loadings. Can either scalar matrix dimensions Lambda. a0 Controls shape inverse Gamma prior uniqueness. actual shape parameter set a0/2. Can either scalar \\(k\\)-vector. b0 Controls scale inverse Gamma prior uniquenesses. actual scale parameter set b0/2. Can either scalar \\(k\\)-vector. store.lambda switch determines whether store factor loadings posterior analysis. default, factor loadings stored. store.scores switch determines whether store factor scores posterior analysis.  NOTE: takes enormous amount memory, used chain thinned heavily, applications small number observations.  default, factor scores stored. std.mean TRUE (default) continuous manifest variables rescaled zero mean. std.var TRUE (default) continuous manifest variables rescaled unit variance. ... arguments passed","code":""},{"path":"/reference/MCMCmixfactanal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Markov Chain Monte Carlo for Mixed Data Factor Analysis Model — MCMCmixfactanal","text":"mcmc object contains posterior sample.  object can summarized functions provided coda package.","code":""},{"path":"/reference/MCMCmixfactanal.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Markov Chain Monte Carlo for Mixed Data Factor Analysis Model — MCMCmixfactanal","text":"model takes following form: Let \\(=1,\\ldots,N\\) index observations \\(j=1,\\ldots,K\\) index response variables within observation. observed variable \\(x_{ij}\\) can either ordinal total \\(C_j\\) categories continuous.  distribution \\(X\\) governed \\(N \\times K\\) matrix latent variables \\(X^*\\) series cutpoints \\(\\gamma\\). \\(X^*\\) assumed generated according : $$x^*_i = \\Lambda \\phi_i + \\epsilon_i$$ $$\\epsilon_i \\sim \\mathcal{N}(0,\\Psi)$$ \\(x^*_i\\) \\(k\\)-vector latent variables specific observation \\(\\), \\(\\Lambda\\) \\(k \\times d\\) matrix factor loadings, \\(\\phi_i\\) \\(d\\)-vector latent factor scores. assumed first element \\(\\phi_i\\) equal 1 \\(\\). \\(j\\)th variable ordinal, probability takes value \\(c\\) observation \\(\\) : $$\\pi_{ijc} = \\Phi(\\gamma_{jc} - \\Lambda'_j\\phi_i) - \\Phi(\\gamma_{j(c-1)} - \\Lambda'_j\\phi_i)$$ \\(j\\)th variable continuous, assumed \\(x^*_{ij} = x_{ij}\\) \\(\\). implementation used assumes independent conjugate priors element \\(\\Lambda\\) \\(\\phi_i\\). specifically assume: $$\\Lambda_{ij} \\sim \\mathcal{N}(l_{0_{ij}}, L_{0_{ij}}^{-1}), =1,\\ldots,k, j=1,\\ldots,d$$ $$\\phi_{(2:d)} \\sim \\mathcal{N}(0, ), =1,\\dots,n$$ MCMCmixfactanal simulates posterior distribution using Metropolis-Hastings within Gibbs sampling algorithm. algorithm employed based work Cowles (1996).  Note first element \\(\\phi_i\\) 1. result, first column \\(\\Lambda\\) can interpretated negative item difficulty parameters.  , first element \\(\\gamma_1\\) normalized zero, thus returned mcmc object.  simulation proper done compiled C++ code maximize efficiency. Please consult coda documentation comprehensive list functions can used analyze posterior sample. case measurement models, make sure plenty free memory, especially storing scores.","code":""},{"path":"/reference/MCMCmixfactanal.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Markov Chain Monte Carlo for Mixed Data Factor Analysis Model — MCMCmixfactanal","text":"Kevin M. Quinn. 2004. ``Bayesian Factor Analysis Mixed Ordinal Continuous Responses.'' Political Analysis. 12: 338-353. Andrew D. Martin, Kevin M. Quinn, Jong Hee Park. 2011.  ``MCMCpack: Markov Chain Monte Carlo R.'', Journal Statistical Software. 42(9): 1-21.  doi:10.18637/jss.v042.i09 . M. K. Cowles. 1996. ``Accelerating Monte Carlo Markov Chain Convergence Cumulative-link Generalized Linear Models.\" Statistics Computing. 6: 101-110. Valen E. Johnson James H. Albert. 1999. ``Ordinal Data Modeling.\" Springer: New York. Daniel Pemstein, Kevin M. Quinn, Andrew D. Martin.  2007.  Scythe Statistical Library 1.0. http://scythe.lsa.umich.edu. Martyn Plummer, Nicky Best, Kate Cowles, Karen Vines. 2006.  ``Output Analysis Diagnostics MCMC (CODA)'', R News. 6(1): 7-11. https://CRAN.R-project.org/doc/Rnews/Rnews_2006-1.pdf.","code":""},{"path":[]},{"path":"/reference/MCMCmixfactanal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Markov Chain Monte Carlo for Mixed Data Factor Analysis Model — MCMCmixfactanal","text":"","code":"if (FALSE) { data(PErisk)  post <- MCMCmixfactanal(~courts+barb2+prsexp2+prscorr2+gdpw2,                         factors=1, data=PErisk,                         lambda.constraints = list(courts=list(2,\"-\")),                         burnin=5000, mcmc=1000000, thin=50,                         verbose=500, L0=.25, store.lambda=TRUE,                         store.scores=TRUE, tune=1.2) plot(post) summary(post)     library(MASS) data(Cars93) attach(Cars93) new.cars <- data.frame(Price, MPG.city, MPG.highway,                  Cylinders, EngineSize, Horsepower,                  RPM, Length, Wheelbase, Width, Weight, Origin) rownames(new.cars) <- paste(Manufacturer, Model) detach(Cars93)  # drop obs 57 (Mazda RX 7) b/c it has a rotary engine new.cars <- new.cars[-57,] # drop 3 cylinder cars new.cars <- new.cars[new.cars$Cylinders!=3,] # drop 5 cylinder cars new.cars <- new.cars[new.cars$Cylinders!=5,]  new.cars$log.Price <- log(new.cars$Price) new.cars$log.MPG.city <- log(new.cars$MPG.city) new.cars$log.MPG.highway <- log(new.cars$MPG.highway) new.cars$log.EngineSize <- log(new.cars$EngineSize) new.cars$log.Horsepower <- log(new.cars$Horsepower)  new.cars$Cylinders <- ordered(new.cars$Cylinders) new.cars$Origin    <- ordered(new.cars$Origin)    post <- MCMCmixfactanal(~log.Price+log.MPG.city+                  log.MPG.highway+Cylinders+log.EngineSize+                  log.Horsepower+RPM+Length+                  Wheelbase+Width+Weight+Origin, data=new.cars,                  lambda.constraints=list(log.Horsepower=list(2,\"+\"),                  log.Horsepower=c(3,0), weight=list(3,\"+\")),                  factors=2,                  burnin=5000, mcmc=500000, thin=100, verbose=500,                  L0=.25, tune=3.0) plot(post) summary(post)  }"},{"path":"/reference/MCMCmnl.html","id":null,"dir":"Reference","previous_headings":"","what":"Markov Chain Monte Carlo for Multinomial Logistic Regression — MCMCmnl","title":"Markov Chain Monte Carlo for Multinomial Logistic Regression — MCMCmnl","text":"function generates sample posterior distribution multinomial logistic regression model using either random walk Metropolis algorithm slice sampler. user supplies data priors, sample posterior distribution returned mcmc object, can subsequently analyzed functions provided coda package.","code":""},{"path":"/reference/MCMCmnl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Markov Chain Monte Carlo for Multinomial Logistic Regression — MCMCmnl","text":"","code":"MCMCmnl(   formula,   baseline = NULL,   data = NULL,   burnin = 1000,   mcmc = 10000,   thin = 1,   mcmc.method = \"IndMH\",   tune = 1,   tdf = 6,   verbose = 0,   seed = NA,   beta.start = NA,   b0 = 0,   B0 = 0,   ... )"},{"path":"/reference/MCMCmnl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Markov Chain Monte Carlo for Multinomial Logistic Regression — MCMCmnl","text":"formula Model formula. choicesets vary across individuals, y variable factor numeric variable gives observed choice individual. choicesets vary across individuals, y \\(n \\times p\\) matrix \\(n\\) number individuals \\(p\\) maximum number choices choiceset.  column y corresponds particular observed choice elements y either 0 (chosen available), 1 (chosen), -999 (available). Choice-specific covariates entered using syntax: choicevar(cvar, \"var\", \"choice\") cvar name variable data, \"var\" name new variable created, \"choice\" level y cvar corresponds . Specifying choice-specific covariate typically require \\(p\\) calls choicevar function formula. Individual specific covariates can entered formula normally. See examples section see syntax used fit various models. baseline baseline category response variable. baseline set equal one observed levels response variable. left equal NULL baseline level set alpha-numerically first element response variable. choicesets vary across individuals, baseline choice must choiceset individual. data data frame used analysis. row dataframe correspond individual making choice. burnin number burn-iterations sampler. mcmc number iterations run sampler past burn-. thin thinning interval used simulation.  number mcmc iterations must divisible value. mcmc.method Can set either \"IndMH\" (default), \"RWM\", \"slice\" perform independent Metropolis-Hastings sampling, random walk Metropolis sampling slice sampling respectively. tune Metropolis tuning parameter. Can either positive scalar \\(k\\)-vector, \\(k\\) length \\(\\beta\\). Make sure acceptance rate satisfactory (typically 0.20 0.5) using posterior sample inference. tdf Degrees freedom multivariate-t proposal distribution mcmc.method set \"IndMH\". Must positive. verbose switch determines whether progress sampler printed screen.  verbose greater 0 iteration number, current beta vector, Metropolis acceptance rate printed screen every verboseth iteration. seed seed random number generator.  NA, Mersenne Twister generator used default seed 12345; integer passed used seed Mersenne twister.  user can also pass list length two use L'Ecuyer random number generator, suitable parallel computation.  first element list L'Ecuyer seed, vector length six NA (NA default seed rep(12345,6) used).  second element list positive substream number. See MCMCpack specification details. beta.start starting value \\(\\beta\\) vector.  can either scalar column vector dimension equal number betas. takes scalar value, value serve starting value betas.  default value NA use maximum likelihood estimate \\(\\beta\\) starting value. b0 prior mean \\(\\beta\\).  can either scalar column vector dimension equal number betas. takes scalar value, value serve prior mean betas. B0 prior precision \\(\\beta\\). can either scalar square matrix dimensions equal number betas.  takes scalar value, value times identity matrix serves prior precision \\(\\beta\\). Default value 0 equivalent improper uniform prior beta. ... arguments passed.","code":""},{"path":"/reference/MCMCmnl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Markov Chain Monte Carlo for Multinomial Logistic Regression — MCMCmnl","text":"mcmc object contains posterior sample.  object can summarized functions provided coda package.","code":""},{"path":"/reference/MCMCmnl.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Markov Chain Monte Carlo for Multinomial Logistic Regression — MCMCmnl","text":"MCMCmnl simulates posterior distribution multinomial logistic regression model using either random walk Metropolis algorithm univariate slice sampler. simulation proper done compiled C++ code maximize efficiency.  Please consult coda documentation comprehensive list functions can used analyze posterior sample. model takes following form: $$y_i \\sim \\mathcal{M}ultinomial(\\pi_i)$$ : $$\\pi_{ij} = \\frac{\\exp(x_{ij}'\\beta)}{\\sum_{k=1}^p\\exp(x_{ik}'\\beta)}$$ assume multivariate Normal prior \\(\\beta\\): $$\\beta \\sim \\mathcal{N}(b_0,B_0^{-1})$$ Metropolis proposal distribution centered current value \\(\\beta\\) variance-covariance \\(V = T(B_0 + C^{-1})^{-1} T\\), \\(T\\) diagonal positive definite matrix formed tune, \\(B_0\\) prior precision, \\(C\\) large sample variance-covariance matrix MLEs. last calculation done via initial call optim.","code":""},{"path":"/reference/MCMCmnl.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Markov Chain Monte Carlo for Multinomial Logistic Regression — MCMCmnl","text":"Andrew D. Martin, Kevin M. Quinn, Jong Hee Park. 2011.  ``MCMCpack: Markov Chain Monte Carlo R.'', Journal Statistical Software. 42(9): 1-21.  doi:10.18637/jss.v042.i09 . Daniel Pemstein, Kevin M. Quinn, Andrew D. Martin.  2007.  Scythe Statistical Library 1.0. http://scythe.lsa.umich.edu. Radford Neal. 2003. ``Slice Sampling'' (discussion). Annals Statistics, 31: 705-767. Martyn Plummer, Nicky Best, Kate Cowles, Karen Vines. 2006.  ``Output Analysis Diagnostics MCMC (CODA)'', R News. 6(1): 7-11. https://CRAN.R-project.org/doc/Rnews/Rnews_2006-1.pdf. Siddhartha Chib, Edward Greenberg, Yuxin Chen. 1998.  ``MCMC Methods Fitting Comparing Multinomial Response Models.\"","code":""},{"path":[]},{"path":"/reference/MCMCmnl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Markov Chain Monte Carlo for Multinomial Logistic Regression — MCMCmnl","text":"","code":"if (FALSE) {   data(Nethvote)    ## just a choice-specific X var   post1 <- MCMCmnl(vote ~                 choicevar(distD66, \"sqdist\", \"D66\") +                 choicevar(distPvdA, \"sqdist\", \"PvdA\") +                 choicevar(distVVD, \"sqdist\", \"VVD\") +                 choicevar(distCDA, \"sqdist\", \"CDA\"),                 baseline=\"D66\", mcmc.method=\"IndMH\", B0=0,                 verbose=500, mcmc=100000, thin=10, tune=1.0,                 data=Nethvote)    plot(post1)   summary(post1)      ## just individual-specific X vars   post2<- MCMCmnl(vote ~                 relig + class + income + educ + age + urban,                 baseline=\"D66\", mcmc.method=\"IndMH\", B0=0,                 verbose=500, mcmc=100000, thin=10, tune=0.5,                 data=Nethvote)    plot(post2)   summary(post2)      ## both choice-specific and individual-specific X vars   post3 <- MCMCmnl(vote ~                 choicevar(distD66, \"sqdist\", \"D66\") +                 choicevar(distPvdA, \"sqdist\", \"PvdA\") +                 choicevar(distVVD, \"sqdist\", \"VVD\") +                 choicevar(distCDA, \"sqdist\", \"CDA\") +                 relig + class + income + educ + age + urban,                 baseline=\"D66\", mcmc.method=\"IndMH\", B0=0,                 verbose=500, mcmc=100000, thin=10, tune=0.5,                 data=Nethvote)    plot(post3)   summary(post3)     ## numeric y variable   nethvote$vote <- as.numeric(nethvote$vote)   post4 <- MCMCmnl(vote ~                 choicevar(distD66, \"sqdist\", \"2\") +                 choicevar(distPvdA, \"sqdist\", \"3\") +                 choicevar(distVVD, \"sqdist\", \"4\") +                 choicevar(distCDA, \"sqdist\", \"1\") +                 relig + class + income + educ + age + urban,                 baseline=\"2\", mcmc.method=\"IndMH\", B0=0,                 verbose=500, mcmc=100000, thin=10, tune=0.5,                 data=Nethvote)     plot(post4)   summary(post4)      ## Simulated data example with nonconstant choiceset   n <- 1000   y <- matrix(0, n, 4)   colnames(y) <- c(\"a\", \"b\", \"c\", \"d\")   xa <- rnorm(n)   xb <- rnorm(n)   xc <- rnorm(n)   xd <- rnorm(n)   xchoice <- cbind(xa, xb, xc, xd)   z <- rnorm(n)   for (i in 1:n){     ## randomly determine choiceset (c is always in choiceset)     choiceset <- c(3, sample(c(1,2,4), 2, replace=FALSE))     numer <- matrix(0, 4, 1)     for (j in choiceset){       if (j == 3){         numer[j] <- exp(xchoice[i, j] )       }       else {         numer[j] <- exp(xchoice[i, j] - z[i] )       }     }     p <- numer / sum(numer)     y[i,] <- rmultinom(1, 1, p)     y[i,-choiceset] <- -999   }    post5 <- MCMCmnl(y~choicevar(xa, \"x\", \"a\") +                   choicevar(xb, \"x\", \"b\") +                   choicevar(xc, \"x\", \"c\") +                   choicevar(xd, \"x\", \"d\") + z,                   baseline=\"c\", verbose=500,                   mcmc=100000, thin=10, tune=.85)    plot(post5)   summary(post5)    }"},{"path":"/reference/MCMCnegbin.html","id":null,"dir":"Reference","previous_headings":"","what":"Markov Chain Monte Carlo for Negative Binomial Regression — MCMCnegbin","title":"Markov Chain Monte Carlo for Negative Binomial Regression — MCMCnegbin","text":"function generates sample posterior distribution Negative Binomial regression model via auxiliary mixture sampling. user supplies data priors, sample posterior distribution returned mcmc object, can subsequently analyzed functions provided coda package.","code":""},{"path":"/reference/MCMCnegbin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Markov Chain Monte Carlo for Negative Binomial Regression — MCMCnegbin","text":"","code":"MCMCnegbin(   formula,   data = parent.frame(),   b0 = 0,   B0 = 1,   e = 2,   f = 2,   g = 10,   burnin = 1000,   mcmc = 1000,   thin = 1,   verbose = 0,   seed = NA,   beta.start = NA,   rho.start = NA,   rho.step = 0.1,   nu.start = NA,   marginal.likelihood = c(\"none\", \"Chib95\"),   ... )"},{"path":"/reference/MCMCnegbin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Markov Chain Monte Carlo for Negative Binomial Regression — MCMCnegbin","text":"formula Model formula. data Data frame. b0 prior mean \\(\\beta\\).  can either scalar column vector dimension equal number betas. takes scalar value, value serve prior mean betas. B0 prior precision \\(\\beta\\).  can either scalar square matrix dimensions equal number betas.  takes scalar value, value times identity matrix serves prior precision \\(\\beta\\). Default value 0 equivalent improper uniform prior beta. e hyperprior distribution \\(\\rho\\). See details. f hyperprior distribution \\(\\rho\\). See details. g hyperprior distribution \\(\\rho\\). See details. burnin number burn-iterations sampler. mcmc number Metropolis iterations sampler. thin thinning interval used simulation.  number mcmc iterations must divisible value. verbose switch determines whether progress sampler printed screen.  verbose greater 0 iteration number, current beta vector, Metropolis acceptance rate printed screen every verboseth iteration. seed seed random number generator.  NA, Mersenne Twister generator used default seed 12345; integer passed used seed Mersenne twister.  user can also pass list length two use L'Ecuyer random number generator, suitable parallel computation.  first element list L'Ecuyer seed, vector length six NA (NA default seed rep(12345,6) used).  second element list positive substream number. See MCMCpack specification details. beta.start starting value \\(\\beta\\) vector.  can either scalar column vector dimension equal number betas. takes scalar value, value serve starting value betas.  default value NA use maximum likelihood estimate \\(\\beta\\) starting value. rho.start starting value \\(\\rho\\) variable. default value 1. rho.step Tuning parameter slice sampling approach sampling \\(rho\\). Determines size step-used find correct slice draw . Lower values accurate, take longer (fixed searching limit). Default 0.1. nu.start starting values random effect, \\(\\nu\\). default value vector ones. marginal.likelihood marginal likelihood calculated? Options : none case marginal likelihood calculated Laplace case Laplace approximation (see Kass Raftery, 1995) used. ... arguments passed.","code":""},{"path":"/reference/MCMCnegbin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Markov Chain Monte Carlo for Negative Binomial Regression — MCMCnegbin","text":"mcmc object contains posterior sample.  object can summarized functions provided coda package.","code":""},{"path":"/reference/MCMCnegbin.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Markov Chain Monte Carlo for Negative Binomial Regression — MCMCnegbin","text":"MCMCnegbin simulates posterior distribution Negative Binomial regression model using combination auxiliary mixture sampling slice sampling. simulation proper done compiled C++ code maximize efficiency. Please consult coda documentation comprehensive list functions can used analyze posterior sample. model takes following form: $$y_i \\sim \\mathcal{P}oisson(\\nu_i\\mu_i)$$ inverse link function: $$\\mu_i = \\exp(x_i'\\beta)$$ assume multivariate Normal prior \\(\\beta\\): $$\\beta \\sim \\mathcal{N}(b_0,B_0^{-1})$$ unit-level random effect handles overdispersion assumed distributed Gamma: $$\\nu_i \\sim \\mathcal{G}amma(\\rho, \\rho)$$ overdispersion parameter prior following form: $$f(\\rho|e,f,g) \\propto \\rho^{e-1}(\\rho + g)^{-(e+f)}$$ model simulated via blocked Gibbs, \\(\\beta\\) simulated via auxiliary mixture sampling method Fuerhwirth-Schanetter et al. (2009). \\(\\rho\\) updated via slice sampling. \\(\\nu_i\\) updated (conjugate) full conditional, also Gamma.","code":""},{"path":"/reference/MCMCnegbin.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Markov Chain Monte Carlo for Negative Binomial Regression — MCMCnegbin","text":"Andrew D. Martin, Kevin M. Quinn, Jong Hee Park. 2011. ``MCMCpack: Markov Chain Monte Carlo R.'', Journal Statistical Software. 42(9): 1-21.  doi:10.18637/jss.v042.i09 . Daniel Pemstein, Kevin M. Quinn, Andrew D. Martin.  2007.  Scythe Statistical Library 1.0. http://scythe.lsa.umich.edu. Martyn Plummer, Nicky Best, Kate Cowles, Karen Vines. 2006.  ``Output Analysis Diagnostics MCMC (CODA)'', R News. 6(1): 7-11. https://CRAN.R-project.org/doc/Rnews/Rnews_2006-1.pdf. Sylvia Fruehwirth-Schnatter, Rudolf Fruehwirth, Leonhard Held,     Havard Rue. 2009. ``Improved auxiliary mixture sampling     hierarchical models non-Gaussian data'', Statistics     Computing 19(4): 479-492.     <doi:10.1007/s11222-008-9109-4>","code":""},{"path":[]},{"path":"/reference/MCMCnegbin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Markov Chain Monte Carlo for Negative Binomial Regression — MCMCnegbin","text":"","code":"if (FALSE) {    n <- 150    mcmcs <- 5000    burnin <- 5000    thin <- 5    x1 <- runif(n, 0, 2)    rho.true <- 1.5    nu.true <- rgamma(n, rho.true, rho.true)    mu <- nu.true * exp(1 + x1 * 1)    y <- rpois(n, mu)    posterior <- MCMCnegbin(y ~ x1)    plot(posterior)    summary(posterior)    }"},{"path":"/reference/MCMCnegbinChange.html","id":null,"dir":"Reference","previous_headings":"","what":"Markov Chain Monte Carlo for Negative Binomial Regression\nChangepoint Model — MCMCnegbinChange","title":"Markov Chain Monte Carlo for Negative Binomial Regression\nChangepoint Model — MCMCnegbinChange","text":"function generates sample posterior distribution Negative Binomial regression model multiple changepoints. changepoints, sampler uses Markov Chain Monte Carlo method Chib (1998). user supplies data priors, sample posterior distribution returned mcmc object, can subsequently analyzed functions provided coda package.","code":""},{"path":"/reference/MCMCnegbinChange.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Markov Chain Monte Carlo for Negative Binomial Regression\nChangepoint Model — MCMCnegbinChange","text":"","code":"MCMCnegbinChange(   formula,   data = parent.frame(),   m = 1,   fixed.m = TRUE,   b0 = 0,   B0 = 1,   a = NULL,   b = NULL,   e = 2,   f = 2,   g = 10,   burnin = 1000,   mcmc = 1000,   thin = 1,   verbose = 0,   seed = NA,   beta.start = NA,   P.start = NA,   rho.start = NA,   rho.step,   nu.start = NA,   marginal.likelihood = c(\"none\", \"Chib95\"),   ... )"},{"path":"/reference/MCMCnegbinChange.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Markov Chain Monte Carlo for Negative Binomial Regression\nChangepoint Model — MCMCnegbinChange","text":"formula Model formula. data Data frame. m number changepoints. fixed.m logical indicator whether number changepoints sampler exactly equal m simply upper bound. Setting fixed.m FALSE equivalent assuming weak-limit approximation Dirichlet process mixture. b0 prior mean \\(\\beta\\).  can either scalar column vector dimension equal number betas. takes scalar value, value serve prior mean betas. B0 prior precision \\(\\beta\\).  can either scalar square matrix dimensions equal number betas.  takes scalar value, value times identity matrix serves prior precision beta. Default value 0 equivalent improper uniform prior beta. \\(\\) shape1 beta prior transition probabilities. default, expected duration computed corresponding b values assigned. expected duration sample period divided number states. b \\(b\\) shape2 beta prior transition probabilities. default, expected duration computed corresponding b values assigned. expected duration sample period divided number states. e hyperprior distribution \\(\\rho\\) See details. f hyperprior distribution \\(\\rho\\). See details. g hyperprior distribution \\(\\rho\\). See details. burnin number burn-iterations sampler. mcmc number Metropolis iterations sampler. thin thinning interval used simulation.  number mcmc iterations must divisible value. verbose switch determines whether progress sampler printed screen.  verbose greater 0 iteration number, current beta vector, Metropolis acceptance rate printed screen every verboseth iteration. seed seed random number generator.  NA, Mersenne Twister generator used default seed 12345; integer passed used seed Mersenne twister.  user can also pass list length two use L'Ecuyer random number generator, suitable parallel computation.  first element list L'Ecuyer seed, vector length six NA (NA default seed rep(12345,6) used).  second element list positive substream number. See MCMCpack specification details. beta.start starting value \\(\\beta\\) vector.  can either scalar column vector dimension equal number betas. takes scalar value, value serve starting value betas.  default value NA use maximum likelihood estimate \\(\\beta\\) starting value   regimes. P.start starting values transition matrix. user provide square matrix dimension equal number states. default, draws Beta(0.9, 0.1) used construct proper transition matrix raw except last raw. rho.start starting value \\(\\rho\\) variable. can either scalar column vector dimension equal number regimes. value scalar, used regimes. default value vector ones. rho.step Tuning parameter slice sampling approach sampling \\(rho\\). Determines size step-used find correct slice draw . Lower values accurate, take longer (fixed searching limit). Default 0.1. nu.start starting values random effect, \\(\\nu\\). default value vector ones. marginal.likelihood marginal likelihood calculated? Options : none case marginal likelihood calculated Laplace case Laplace approximation (see Kass Raftery, 1995) used. ... arguments passed.","code":""},{"path":"/reference/MCMCnegbinChange.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Markov Chain Monte Carlo for Negative Binomial Regression\nChangepoint Model — MCMCnegbinChange","text":"mcmc object contains posterior sample.  object can summarized functions provided coda package.","code":""},{"path":"/reference/MCMCnegbinChange.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Markov Chain Monte Carlo for Negative Binomial Regression\nChangepoint Model — MCMCnegbinChange","text":"MCMCnegbinChangesimulates posterior distribution Negative Binomial regression model multiple changepoints using methods Chib (1998) Fruehwirth-Schnatter et al (2009).  details model discussed Blackwell (2017). model takes following form: $$y_t \\sim \\mathcal{P}oisson(\\nu_t\\mu_t)$$ $$\\mu_t = x_t ' \\beta_m,\\;\\; m = 1, \\ldots, M$$ $$\\nu_t \\sim \\mathcal{G}amma(\\rho_m, \\rho_m)$$ \\(M\\) number states \\(\\beta_m\\) \\(\\rho_m\\) parameters state \\(m\\) \\(t\\). assume Gaussian distribution prior \\(\\beta\\): $$\\beta_m \\sim \\mathcal{N}(b_0,B_0^{-1}),\\;\\; m = 1, \\ldots, M$$ : $$p_{mm} \\sim \\mathcal{B}eta(, b),\\;\\; m = 1, \\ldots, M$$ \\(M\\) number states. overdispersion parameters prior following form: $$f(\\rho_m|e,f,g) \\propto \\rho^{e-1}(\\rho + g)^{-(e+f)}$$ model simulated via blocked Gibbs conditonal states. \\(\\beta\\) simulated via auxiliary mixture sampling method Fuerhwirth-Schanetter et al. (2009). \\(\\rho\\) updated via slice sampling. \\(\\nu_i\\) updated (conjugate) full conditional, also Gamma. states updated Chib (1998)","code":""},{"path":"/reference/MCMCnegbinChange.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Markov Chain Monte Carlo for Negative Binomial Regression\nChangepoint Model — MCMCnegbinChange","text":"Andrew D. Martin, Kevin M. Quinn, Jong Hee Park. 2011. ``MCMCpack: Markov Chain Monte Carlo R.'', Journal Statistical Software. 42(9): 1-21.  doi:10.18637/jss.v042.i09 . Daniel Pemstein, Kevin M. Quinn, Andrew D. Martin.  2007.  Scythe Statistical Library 1.0. http://scythe.lsa.umich.edu. Sylvia Fruehwirth-Schnatter, Rudolf Fruehwirth, Leonhard Held,     Havard Rue. 2009. ``Improved auxiliary mixture sampling     hierarchical models non-Gaussian data'', Statistics     Computing 19(4): 479-492.     <doi:10.1007/s11222-008-9109-4> Matthew Blackwell. 2017. ``Game Changers: Detecting Shifts   Overdispersed Count Data,'' Political Analysis   26(2), 230-239. <doi:10.1017/pan.2017.42>","code":""},{"path":[]},{"path":"/reference/MCMCnegbinChange.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Markov Chain Monte Carlo for Negative Binomial Regression\nChangepoint Model — MCMCnegbinChange","text":"","code":"if (FALSE) {    n <- 150    reg <- 3    true.s <- gl(reg, n/reg, n)    rho.true <- c(1.5, 0.5, 3)    b0.true <- c(1, 3, 1)    b1.true <- c(1, -2, 2)    x1 <- runif(n, 0, 2)    nu.true <- rgamma(n, rho.true[true.s], rho.true[true.s])    mu <- nu.true * exp(b0.true[true.s] + x1 * b1.true[true.s])    y <- rpois(n, mu)     posterior <- MCMCnegbinChange(y ~ x1, m = 2, verbose = 1000,                           marginal.likelihood = \"Chib95\",                           e = 2, f = 2, g = 10,                           b0 = rep(0, 2), B0 = (1/9) * diag(2),                           rho.step = rep(0.75, times = 3),                           seed = list(NA, 2))     par(mfrow=c(attr(posterior, \"m\") + 1, 1), mai=c(0.4, 0.6, 0.3, 0.05))    plotState(posterior, legend.control = c(1, 0.6))    plotChangepoint(posterior, verbose = TRUE, ylab=\"Density\",   start=1, overlay=TRUE)      open.ended <- MCMCnegbinChange(y ~ x1, m = 10, verbose = 1000,                           fixed.m = FALSE, mcmc = 2000, burnin = 2000,                           e = 2, f = 2, g = 10,                           a = 100, b = 1,                           b0 = rep(0, 2), B0 = (1/9) * diag(2),                           rho.step = 0.75,                           seed = list(NA, 2))     plotState(open.ended, legend.control = c(1, 0.6))    }"},{"path":"/reference/MCMCoprobit.html","id":null,"dir":"Reference","previous_headings":"","what":"Markov Chain Monte Carlo for Ordered Probit Regression — MCMCoprobit","title":"Markov Chain Monte Carlo for Ordered Probit Regression — MCMCoprobit","text":"function generates sample posterior distribution ordered probit regression model using data augmentation approach Albert Chib (1993), cut-points sampled according Cowles (1996) Albert Chib (2001). user supplies data priors, sample posterior distribution returned mcmc object, can subsequently analyzed functions provided coda package.","code":""},{"path":"/reference/MCMCoprobit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Markov Chain Monte Carlo for Ordered Probit Regression — MCMCoprobit","text":"","code":"MCMCoprobit(   formula,   data = parent.frame(),   burnin = 1000,   mcmc = 10000,   thin = 1,   tune = NA,   tdf = 1,   verbose = 0,   seed = NA,   beta.start = NA,   b0 = 0,   B0 = 0,   a0 = 0,   A0 = 0,   mcmc.method = c(\"Cowles\", \"AC\"),   ... )"},{"path":"/reference/MCMCoprobit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Markov Chain Monte Carlo for Ordered Probit Regression — MCMCoprobit","text":"formula Model formula. data Data frame. burnin number burn-iterations sampler. mcmc number MCMC iterations sampler. thin thinning interval used simulation.  number Gibbs iterations must divisible value. tune tuning parameter Metropolis-Hastings step. Default NA corresponds choice 0.05 divided number categories response variable. tdf Degrees freedom multivariate-t proposal distribution mcmc.method set \"IndMH\". Must positive. verbose switch determines whether progress sampler printed screen.  verbose greater 0 iteration number, beta vector, Metropolis-Hastings acceptance rate printed screen every verboseth iteration. seed seed random number generator.  NA, Mersenne Twister generator used default seed 12345; integer passed used seed Mersenne twister.  user can also pass list length two use L'Ecuyer random number generator, suitable parallel computation.  first element list L'Ecuyer seed, vector length six NA (NA default seed rep(12345,6) used).  second element list positive substream number. See MCMCpack specification details. beta.start starting value \\(\\beta\\) vector.  can either scalar column vector dimension equal number betas. takes scalar value, value serve starting value betas. default value NA use rescaled estimates ordered logit model. b0 prior mean \\(\\beta\\).  can either scalar column vector dimension equal number betas. takes scalar value, value serve prior mean betas. B0 prior precision \\(\\beta\\).  can either scalar square matrix dimensions equal number betas.  takes scalar value, value times identity matrix serves prior precision \\(\\beta\\).  Default value 0 equivalent improper uniform prior \\(\\beta\\). a0 prior mean \\(\\gamma\\).  can either scalar column vector dimension equal number betas. takes scalar value, value serve prior mean betas. A0 prior precision \\(\\gamma\\).  can either scalar square matrix dimensions equal number betas.  takes scalar value, value times identity matrix serves prior precision \\(\\gamma\\).  Default value 0 equivalent improper uniform prior \\(\\gamma\\). mcmc.method Can set either \"Cowles\" (default) \"AC\" perform posterior sampling cutpoints based Cowles (1996) Albert Chib (2001) respectively. ... arguments passed","code":""},{"path":"/reference/MCMCoprobit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Markov Chain Monte Carlo for Ordered Probit Regression — MCMCoprobit","text":"mcmc object contains posterior sample.  object can summarized functions provided coda package.","code":""},{"path":"/reference/MCMCoprobit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Markov Chain Monte Carlo for Ordered Probit Regression — MCMCoprobit","text":"MCMCoprobit simulates posterior distribution ordered probit regression model using data augmentation. simulation proper done compiled C++ code maximize efficiency.  Please consult coda documentation comprehensive list functions can used analyze posterior sample. observed variable \\(y_i\\) ordinal total \\(C\\) categories, distribution governed latent variable: $$z_i = x_i'\\beta + \\varepsilon_i$$ errors assumed standard Normal distribution.  probabilities observing outcome governed latent variable \\(C-1\\) estimable cutpoints, denoted \\(\\gamma_c\\).  probability individual \\(\\) category \\(c\\) computed : $$\\pi_{ic} = \\Phi(\\gamma_c - x_i'\\beta) - \\Phi(\\gamma_{c-1} - x_i'\\beta)$$ probabilities used form multinomial distribution defines likelihoods. MCMCoprobit provides two ways sample cutpoints. Cowles (1996) proposes sampling scheme groups sampling latent variable cutpoints.  case, identification first element \\(\\gamma_1\\) normalized zero. Albert Chib (2001) show can sample cutpoints indirectly without constraints transforming cutpoints real-valued parameters (\\(\\alpha\\)).","code":""},{"path":"/reference/MCMCoprobit.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Markov Chain Monte Carlo for Ordered Probit Regression — MCMCoprobit","text":"Albert, J. H. S. Chib. 1993. ``Bayesian Analysis Binary Polychotomous Response Data.'' J. Amer. Statist. Assoc. 88, 669-679 M. K. Cowles. 1996. ``Accelerating Monte Carlo Markov Chain Convergence Cumulative-link Generalized Linear Models.\" Statistics Computing. 6: 101-110. Andrew D. Martin, Kevin M. Quinn, Jong Hee Park. 2011.  ``MCMCpack: Markov Chain Monte Carlo R.'', Journal Statistical Software. 42(9): 1-21.  doi:10.18637/jss.v042.i09 . Valen E. Johnson James H. Albert. 1999. Ordinal Data Modeling. Springer: New York. Albert, James Siddhartha Chib. 2001. ``Sequential Ordinal Modeling Applications Survival Data.\" Biometrics. 57: 829-836. Daniel Pemstein, Kevin M. Quinn, Andrew D. Martin.  2007.  Scythe Statistical Library 1.0. http://scythe.lsa.umich.edu. Martyn Plummer, Nicky Best, Kate Cowles, Karen Vines. 2006.  ``Output Analysis Diagnostics MCMC (CODA)'', R News. 6(1): 7-11. https://CRAN.R-project.org/doc/Rnews/Rnews_2006-1.pdf.","code":""},{"path":[]},{"path":"/reference/MCMCoprobit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Markov Chain Monte Carlo for Ordered Probit Regression — MCMCoprobit","text":"","code":"if (FALSE) {    x1 <- rnorm(100); x2 <- rnorm(100);    z <- 1.0 + x1*0.1 - x2*0.5 + rnorm(100);    y <- z; y[z < 0] <- 0; y[z >= 0 & z < 1] <- 1;    y[z >= 1 & z < 1.5] <- 2; y[z >= 1.5] <- 3;    out1 <- MCMCoprobit(y ~ x1 + x2, tune=0.3)    out2 <- MCMCoprobit(y ~ x1 + x2, tune=0.3, tdf=3, verbose=1000, mcmc.method=\"AC\")    summary(out1)    summary(out2)    plot(out1)    plot(out2)    }"},{"path":"/reference/MCMCoprobitChange.html","id":null,"dir":"Reference","previous_headings":"","what":"Markov Chain Monte Carlo for Ordered Probit Changepoint Regression Model — MCMCoprobitChange","title":"Markov Chain Monte Carlo for Ordered Probit Changepoint Regression Model — MCMCoprobitChange","text":"function generates sample posterior distribution ordered probit regression model multiple parameter breaks. function uses Markov chain Monte Carlo method Chib (1998).  user supplies data priors, sample posterior distribution returned mcmc object, can subsequently analyzed functions provided coda package.","code":""},{"path":"/reference/MCMCoprobitChange.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Markov Chain Monte Carlo for Ordered Probit Changepoint Regression Model — MCMCoprobitChange","text":"","code":"MCMCoprobitChange(   formula,   data = parent.frame(),   m = 1,   burnin = 1000,   mcmc = 1000,   thin = 1,   tune = NA,   verbose = 0,   seed = NA,   beta.start = NA,   gamma.start = NA,   P.start = NA,   b0 = NULL,   B0 = NULL,   a = NULL,   b = NULL,   marginal.likelihood = c(\"none\", \"Chib95\"),   gamma.fixed = 0,   ... )"},{"path":"/reference/MCMCoprobitChange.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Markov Chain Monte Carlo for Ordered Probit Changepoint Regression Model — MCMCoprobitChange","text":"formula Model formula. data Data frame. m number changepoints. burnin number burn-iterations sampler. mcmc number MCMC iterations burnin. thin thinning interval used simulation.  number MCMC iterations must divisible value. tune tuning parameter Metropolis-Hastings step. Default NA corresponds choice 0.05 divided number categories response variable. verbose switch determines whether progress sampler printed screen.  verbose greater 0 iteration number, \\(\\beta\\) vector, error variance printed screen every verboseth iteration. seed seed random number generator.  NA, Mersenne Twister generator used default seed 12345; integer passed used seed Mersenne twister.  user can also pass list length two use L'Ecuyer random number generator, suitable parallel computation.  first element list L'Ecuyer seed, vector length six NA (NA default seed rep(12345,6) used).  second element list positive substream number. See MCMCpack specification details. beta.start starting values \\(\\beta\\) vector. can either scalar column vector dimension equal number betas.  default value NA use MLE estimate \\(\\beta\\) starting value.  scalar, value serve starting value mean betas. gamma.start starting values \\(\\gamma\\) vector. can either scalar column vector dimension equal number gammas.  default value NA use MLE estimate \\(\\gamma\\) starting value.  scalar, value serve starting value mean gammas. P.start starting values transition matrix.  user provide square matrix dimension equal number states.  default, draws Beta(0.9, 0.1) used construct proper transition matrix raw except last raw. b0 prior mean \\(\\beta\\).  can either scalar column vector dimension equal number betas. takes scalar value, value serve prior mean betas. B0 prior precision \\(\\beta\\).  can either scalar square matrix dimensions equal number betas.  takes scalar value, value times identity matrix serves prior precision beta. Default value 0 equivalent improper uniform prior beta. \\(\\) shape1 beta prior transition probabilities. default, expected duration computed corresponding b values assigned. expected duration sample period divided number states. b \\(b\\) shape2 beta prior transition probabilities. default, expected duration computed corresponding b values assigned. expected duration sample period divided number states. marginal.likelihood marginal likelihood calculated? Options : none case marginal likelihood calculated, Chib95 case method Chib (1995) used. gamma.fixed 1 users want constrain \\(\\gamma\\) values constant. default, \\(\\gamma\\) values allowed vary across regimes. ... arguments passed","code":""},{"path":"/reference/MCMCoprobitChange.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Markov Chain Monte Carlo for Ordered Probit Changepoint Regression Model — MCMCoprobitChange","text":"mcmc object contains posterior sample.  object can summarized functions provided coda package.  object contains attribute prob.state storage matrix contains probability \\(state_i\\) period, log-likelihood model (loglike), log-marginal likelihood model (logmarglike).","code":""},{"path":"/reference/MCMCoprobitChange.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Markov Chain Monte Carlo for Ordered Probit Changepoint Regression Model — MCMCoprobitChange","text":"MCMCoprobitChange simulates posterior distribution ordinal probit regression model multiple parameter breaks. simulation latent states based linear approximation method discussed Park (2011). model takes following form: $$\\Pr(y_t = 1) = \\Phi(\\gamma_{c, m} - x_i'\\beta_m) - \\Phi(\\gamma_{c-1, m} - x_i'\\beta_m)\\;\\; m = 1, \\ldots, M$$ \\(M\\) number states, \\(\\gamma_{c, m}\\) \\(\\beta_m\\) paramters state \\(m\\) \\(t\\). assume Gaussian distribution prior \\(\\beta\\): $$\\beta_m \\sim \\mathcal{N}(b_0,B_0^{-1}),\\;\\; m = 1, \\ldots, M$$ : $$p_{mm} \\sim \\mathcal{B}eta(, b),\\;\\; m = 1, \\ldots, M$$ \\(M\\) number states. Note fitted changepoint model observations states, marginal likelihood outcome can ``nan,\" indicates many breaks assumed given model data.","code":""},{"path":"/reference/MCMCoprobitChange.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Markov Chain Monte Carlo for Ordered Probit Changepoint Regression Model — MCMCoprobitChange","text":"Jong Hee Park. 2011. ``Changepoint Analysis Binary Ordinal Probit Models: Application Bank Rate Policy Interwar Gold Standard.\"  Political Analysis. 19: 188-204. <doi:10.1093/pan/mpr007> Andrew D. Martin, Kevin M. Quinn, Jong Hee Park. 2011.  ``MCMCpack: Markov Chain Monte Carlo R.'', Journal Statistical Software. 42(9): 1-21.  doi:10.18637/jss.v042.i09 . Siddhartha Chib. 1998. ``Estimation comparison multiple change-point models.'' Journal Econometrics. 86: 221-241.","code":""},{"path":[]},{"path":"/reference/MCMCoprobitChange.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Markov Chain Monte Carlo for Ordered Probit Changepoint Regression Model — MCMCoprobitChange","text":"","code":"set.seed(1909) N <- 200 x1 <- rnorm(N, 1, .5);  ## set a true break at 100 z1 <- 1 + x1[1:100] + rnorm(100); z2 <- 1 -0.2*x1[101:200] + rnorm(100); z <- c(z1,  z2); y <- z  ## generate y y[z < 1] <- 1; y[z >= 1 & z < 2] <- 2; y[z >= 2] <- 3;  ## inputs formula <- y ~ x1  ## fit multiple models with a varying number of breaks out1 <- MCMCoprobitChange(formula, m=1,         mcmc=100, burnin=100, thin=1, tune=c(.5, .5), verbose=100,        b0=0, B0=0.1, marginal.likelihood = \"Chib95\") #> Error in eval(predvars, data, env): object 'y' not found out2 <- MCMCoprobitChange(formula, m=2,         mcmc=100, burnin=100, thin=1, tune=c(.5, .5, .5), verbose=100,        b0=0, B0=0.1, marginal.likelihood = \"Chib95\") #> Error in eval(predvars, data, env): object 'y' not found  ## Do model comparison ## NOTE: the chain should be run longer than this example! BayesFactor(out1, out2) #> Error in eval(expr, envir, enclos): object 'out1' not found  ## draw plots using the \"right\" model plotState(out1) #> Error in eval(expr, envir, enclos): object 'out1' not found plotChangepoint(out1) #> Error in eval(expr, envir, enclos): object 'out1' not found"},{"path":"/reference/MCMCordfactanal.html","id":null,"dir":"Reference","previous_headings":"","what":"Markov Chain Monte Carlo for Ordinal Data Factor Analysis Model — MCMCordfactanal","title":"Markov Chain Monte Carlo for Ordinal Data Factor Analysis Model — MCMCordfactanal","text":"function generates sample posterior distribution ordinal data factor analysis model. Normal priors assumed factor loadings factor scores improper uniform priors assumed cutpoints. user supplies data parameters prior distributions, sample posterior distribution returned mcmc object, can subsequently analyzed functions provided coda package.","code":""},{"path":"/reference/MCMCordfactanal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Markov Chain Monte Carlo for Ordinal Data Factor Analysis Model — MCMCordfactanal","text":"","code":"MCMCordfactanal(   x,   factors,   lambda.constraints = list(),   data = parent.frame(),   burnin = 1000,   mcmc = 20000,   thin = 1,   tune = NA,   verbose = 0,   seed = NA,   lambda.start = NA,   l0 = 0,   L0 = 0,   store.lambda = TRUE,   store.scores = FALSE,   drop.constantvars = TRUE,   ... )"},{"path":"/reference/MCMCordfactanal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Markov Chain Monte Carlo for Ordinal Data Factor Analysis Model — MCMCordfactanal","text":"x Either formula numeric matrix containing manifest variables. factors number factors fitted. lambda.constraints List lists specifying possible equality simple inequality constraints factor loadings. typical entry list one three forms: varname=list(d,c) constrain dth loading variable named varname equal c, varname=list(d,\"+\") constrain dth loading variable named varname positive, varname=list(d, \"-\") constrain dth loading variable named varname negative. x matrix without column names defaults names ``V1\", ``V2\", ... , etc used. Note , unlike MCMCfactanal, \\(\\Lambda\\) matrix used factors+1 columns. first column \\(\\Lambda\\) corresponds negative item difficulty parameters generally constrained. data data frame. burnin number burn-iterations sampler. mcmc number iterations sampler. thin thinning interval used simulation.  number iterations must divisible value. tune tuning parameter Metropolis-Hastings sampling. Can either scalar \\(k\\)-vector. Must strictly positive. verbose switch determines whether progress sampler printed screen.  verbose greater 0 iteration number Metropolis-Hastings acceptance rate printed screen every verboseth iteration. seed seed random number generator.  NA, Mersenne Twister generator used default seed 12345; integer passed used seed Mersenne twister.  user can also pass list length two use L'Ecuyer random number generator, suitable parallel computation.  first element list L'Ecuyer seed, vector length six NA (NA default seed rep(12345,6) used).  second element list positive substream number. See MCMCpack specification details. lambda.start Starting values factor loading matrix Lambda. lambda.start set scalar starting value unconstrained loadings set scalar. lambda.start matrix dimensions Lambda lambda.start matrix used starting values (except equality-constrained elements). lambda.start set NA (default) starting values unconstrained elements first column Lambda based observed response pattern, remaining unconstrained elements Lambda set , starting values inequality constrained elements set either 1.0 -1.0 depending nature constraints. l0 means independent Normal prior factor loadings. Can either scalar matrix dimensions Lambda. L0 precisions (inverse variances) independent Normal prior factor loadings. Can either scalar matrix dimensions Lambda. store.lambda switch determines whether store factor loadings posterior analysis. default, factor loadings stored. store.scores switch determines whether store factor scores posterior analysis.  NOTE: takes enormous amount memory, used chain thinned heavily, applications small number observations.  default, factor scores stored. drop.constantvars switch determines whether manifest variables variation deleted fitting model. Default = TRUE. ... arguments passed","code":""},{"path":"/reference/MCMCordfactanal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Markov Chain Monte Carlo for Ordinal Data Factor Analysis Model — MCMCordfactanal","text":"mcmc object contains posterior sample.  object can summarized functions provided coda package.","code":""},{"path":"/reference/MCMCordfactanal.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Markov Chain Monte Carlo for Ordinal Data Factor Analysis Model — MCMCordfactanal","text":"model takes following form: Let \\(=1,\\ldots,N\\) index observations \\(j=1,\\ldots,K\\) index response variables within observation. typical observed variable \\(x_{ij}\\) ordinal total \\(C_j\\) categories. distribution \\(X\\) governed \\(N \\times K\\) matrix latent variables \\(X^*\\) series cutpoints \\(\\gamma\\).  \\(X^*\\) assumed generated according : $$x^*_i = \\Lambda \\phi_i + \\epsilon_i$$ $$\\epsilon_i \\sim \\mathcal{N}(0,)$$ \\(x^*_i\\) \\(k\\)-vector latent variables specific observation \\(\\), \\(\\Lambda\\) \\(k \\times d\\) matrix factor loadings, \\(\\phi_i\\) \\(d\\)-vector latent factor scores. assumed first element \\(\\phi_i\\) equal 1 \\(\\). probability \\(j\\)th variable observation \\(\\) takes value \\(c\\) : $$\\pi_{ijc} = \\Phi(\\gamma_{jc} - \\Lambda'_j\\phi_i) - \\Phi(\\gamma_{j(c-1)} - \\Lambda'_j\\phi_i) $$ implementation used assumes independent conjugate priors element \\(\\Lambda\\) \\(\\phi_i\\). specifically assume: $$\\Lambda_{ij} \\sim \\mathcal{N}(l_{0_{ij}}, L_{0_{ij}}^{-1}), =1,\\ldots,k, j=1,\\ldots,d$$ $$\\phi_{(2:d)} \\sim \\mathcal{N}(0, ), =1,\\dots,n$$ standard two-parameter item response theory model probit link special case model sketched . MCMCordfactanal simulates posterior distribution using Metropolis-Hastings within Gibbs sampling algorithm. algorithm employed based work Cowles (1996).  Note first element \\(\\phi_i\\) 1. result, first column \\(\\Lambda\\) can interpretated item difficulty parameters. , first element \\(\\gamma_1\\) normalized zero, thus returned mcmc object.  simulation proper done compiled C++ code maximize efficiency.  Please consult coda documentation comprehensive list functions can used analyze posterior sample. case measurement models, make sure plenty free memory, especially storing scores.","code":""},{"path":"/reference/MCMCordfactanal.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Markov Chain Monte Carlo for Ordinal Data Factor Analysis Model — MCMCordfactanal","text":"Shawn Treier Simon Jackman. 2008. ``Democracy Latent Variable.\"  American Journal Political Science. 52: 201-217. Andrew D. Martin, Kevin M. Quinn, Jong Hee Park. 2011.  ``MCMCpack: Markov Chain Monte Carlo R.'', Journal Statistical Software. 42(9): 1-21.  doi:10.18637/jss.v042.i09 . M. K. Cowles. 1996. ``Accelerating Monte Carlo Markov Chain Convergence Cumulative-link Generalized Linear Models.\" Statistics Computing. 6: 101-110. Valen E. Johnson James H. Albert. 1999. ``Ordinal Data Modeling.\" Springer: New York. Daniel Pemstein, Kevin M. Quinn, Andrew D. Martin.  2007.  Scythe Statistical Library 1.0. http://scythe.lsa.umich.edu. Martyn Plummer, Nicky Best, Kate Cowles, Karen Vines. 2006.  ``Output Analysis Diagnostics MCMC (CODA)'', R News. 6(1): 7-11. https://CRAN.R-project.org/doc/Rnews/Rnews_2006-1.pdf.","code":""},{"path":[]},{"path":"/reference/MCMCordfactanal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Markov Chain Monte Carlo for Ordinal Data Factor Analysis Model — MCMCordfactanal","text":"","code":"if (FALSE) {    data(painters)    new.painters <- painters[,1:4]    cuts <- apply(new.painters, 2, quantile, c(.25, .50, .75))    for (i in 1:4){       new.painters[new.painters[,i]<cuts[1,i],i] <- 100      new.painters[new.painters[,i]<cuts[2,i],i] <- 200      new.painters[new.painters[,i]<cuts[3,i],i] <- 300      new.painters[new.painters[,i]<100,i] <- 400    }     posterior <- MCMCordfactanal(~Composition+Drawing+Colour+Expression,                         data=new.painters, factors=1,                         lambda.constraints=list(Drawing=list(2,\"+\")),                         burnin=5000, mcmc=500000, thin=200, verbose=500,                         L0=0.5, store.lambda=TRUE,                         store.scores=TRUE, tune=1.2)    plot(posterior)    summary(posterior)    }"},{"path":"/reference/MCMCpaircompare.html","id":null,"dir":"Reference","previous_headings":"","what":"Markov Chain Monte Carlo for a Pairwise Comparisons Model with Probit Link — MCMCpaircompare","title":"Markov Chain Monte Carlo for a Pairwise Comparisons Model with Probit Link — MCMCpaircompare","text":"function generates sample posterior distribution model pairwise comparisons data probit link. Thurstone's model special case model \\(\\alpha\\) parameter fixed 1.","code":""},{"path":"/reference/MCMCpaircompare.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Markov Chain Monte Carlo for a Pairwise Comparisons Model with Probit Link — MCMCpaircompare","text":"","code":"MCMCpaircompare(   pwc.data,   theta.constraints = list(),   alpha.fixed = FALSE,   burnin = 1000,   mcmc = 20000,   thin = 1,   verbose = 0,   seed = NA,   alpha.start = NA,   a = 0,   A = 0.25,   store.theta = TRUE,   store.alpha = FALSE,   ... )"},{"path":"/reference/MCMCpaircompare.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Markov Chain Monte Carlo for a Pairwise Comparisons Model with Probit Link — MCMCpaircompare","text":"pwc.data data.frame containing pairwise comparisons data. row pwc.data corresponds single pairwise comparison. pwc.data needs exactly four columns. first column contains unique identifier rater. Column two contains unique identifier first item compared. Column three contains unique identifier second item compared. Column four contains unique identifier item selected two items compared. tie occurred, entry fourth column NA. applications without raters (sports competitions) entries first column set single value alpha.fixed (see ) set TRUE. identifiers columns 2 4 must start letter. Examples provided . theta.constraints list specifying possible simple equality inequality constraints item parameters. typical entry list one three forms: itemname=c constrain item parameter item named itemname equal c, itemname=\"+\" constrain item parameter item named itemname positive, itemname=\"-\" constrain item parameter item named itemname negative. alpha.fixed alpha fixed constant value 1 raters? Default FALSE. set FALSE, alpha value estimated rater. burnin number burn-iterations sampler. mcmc number Gibbs iterations sampler. thin thinning interval used simulation.  number Gibbs iterations must divisible value. verbose switch determines whether progress sampler printed screen.  verbose greater 0 output printed screen every verboseth iteration. seed seed random number generator.  NA, Mersenne Twister generator used default seed 12345; integer passed used seed Mersenne twister.  user can also pass list length two use L'Ecuyer random number generator, suitable parallel computation.  first element list L'Ecuyer seed, vector length six NA (NA default seed rep(12345,6) used).  second element list positive substream number. See MCMCpack specification details. alpha.start starting value alpha vector.  can either scalar column vector dimension equal number alphas.  takes scalar value, value serve starting value alphas. default value NA set starting value alpha parameter 1. prior mean alpha. Must scalar. Default 0. prior precision alpha. Must positive scalar. Default 0.25 (prior variance 4). store.theta theta draws returned? Default TRUE. store.alpha alpha draws returned? Default FALSE. ... arguments passed","code":""},{"path":"/reference/MCMCpaircompare.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Markov Chain Monte Carlo for a Pairwise Comparisons Model with Probit Link — MCMCpaircompare","text":"mcmc object contains posterior sample.  object can summarized functions provided coda package.","code":""},{"path":"/reference/MCMCpaircompare.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Markov Chain Monte Carlo for a Pairwise Comparisons Model with Probit Link — MCMCpaircompare","text":"MCMCpaircompare uses data augmentation approach Albert Chib (1993). user supplies data priors, sample posterior returned mcmc object, can subsequently analyzed coda package. simulation done compiled C++ code maximize efficiency. Please consult coda package documentation comprehensive list functions can used analyze posterior sample. model takes following form: $$= 1,...,\\ \\ \\ \\   (raters) $$ $$j = 1,...,J \\ \\ \\ \\   (items)  $$ $$Y_{ijj'} = 1 \\ \\   \\ \\  \\ \\  chooses \\ \\  j \\ \\ \\ \\ j'$$ $$Y_{ijj'} = 0 \\ \\ \\ \\ \\ \\ chooses \\ \\ j' \\ \\ \\ \\ j$$ $$Y_{ijj'} = NA \\ \\  \\ \\ \\ \\ chooses \\ \\ neither$$ $$Pr(Y_{ijj'} = 1) = \\Phi( \\alpha_{} [\\theta_{j} - \\theta_{ j'} ] ) $$ following Gaussian priors assumed: $$\\alpha_i \\sim \\mathcal{N}(, ^{-1})$$ $$\\theta_j \\sim \\mathcal{N}(0, 1)$$ identification, \\(\\theta_j\\)s truncated 0, fixed constants.","code":""},{"path":"/reference/MCMCpaircompare.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Markov Chain Monte Carlo for a Pairwise Comparisons Model with Probit Link — MCMCpaircompare","text":"Albert, J. H. S. Chib. 1993. ``Bayesian Analysis Binary Polychotomous Response Data.'' J. Amer. Statist. Assoc. 88, 669-679 Yu, Qiushi Kevin M. Quinn. 2021. ``Multidimensional Pairwise Comparison Model Heterogeneous Perception Application Modeling Perceived Truthfulness Public Statements COVID-19.'' University Michigan Working Paper. Andrew D. Martin, Kevin M. Quinn, Jong Hee Park. 2011.  ``MCMCpack: Markov Chain Monte Carlo R.'', Journal Statistical Software. 42(9): 1-21. doi:10.18637/jss.v042.i09 . Daniel Pemstein, Kevin M. Quinn, Andrew D. Martin.  2007.  Scythe Statistical Library 1.0. http://scythe.lsa.umich.edu. Martyn Plummer, Nicky Best, Kate Cowles, Karen Vines. 2006.  ``Output Analysis Diagnostics MCMC (CODA)'', R News. 6(1): 7-11. https://CRAN.R-project.org/doc/Rnews/Rnews_2006-1.pdf.","code":""},{"path":[]},{"path":"/reference/MCMCpaircompare.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Markov Chain Monte Carlo for a Pairwise Comparisons Model with Probit Link — MCMCpaircompare","text":"","code":"if (FALSE) {   ## Euro 2016 example   data(Euro2016)  posterior1 <- MCMCpaircompare(pwc.data=Euro2016,                               theta.constraints=list(Ukraine=\"-\",                                                      Portugal=\"+\"),                               alpha.fixed=TRUE,                               verbose=10000,                               burnin=10000, mcmc=500000, thin=100,                               store.theta=TRUE, store.alpha=FALSE)  ## alternative identification constraints posterior2 <- MCMCpaircompare(pwc.data=Euro2016,                               theta.constraints=list(Ukraine=\"-\",                                                      Portugal=1),                               alpha.fixed=TRUE,                               verbose=10000,                               burnin=10000, mcmc=500000, thin=100,                               store.theta=TRUE, store.alpha=FALSE)         ## a synthetic data example with estimated rater-specific parameters set.seed(123)  I <- 65  ## number of raters J <- 50 ## number of items to be compared   ## raters 1 to 5 have less sensitivity to stimuli than raters 6 through I alpha.true <- c(rnorm(5, m=0.2, s=0.05), rnorm(I - 5, m=1, s=0.1)) theta.true <- sort(rnorm(J, m=0, s=1))  n.comparisons <- 125 ## number of pairwise comparisons for each rater  ## generate synthetic data according to the assumed model rater.id <- NULL item.1.id <- NULL item.2.id <- NULL choice.id <- NULL for (i in 1:I){     for (c in 1:n.comparisons){         rater.id <- c(rater.id, i+100)         item.numbers <- sample(1:J, size=2, replace=FALSE)         item.1 <- item.numbers[1]         item.2 <- item.numbers[2]         item.1.id <- c(item.1.id, item.1)         item.2.id <- c(item.2.id, item.2)         eta <- alpha.true[i] * (theta.true[item.1] - theta.true[item.2])         prob.item.1.chosen <- pnorm(eta)         u <- runif(1)         if (u <= prob.item.1.chosen){             choice.id <- c(choice.id, item.1)         }         else{             choice.id <- c(choice.id, item.2)         }     } } item.1.id <- paste(\"item\", item.1.id+100, sep=\".\") item.2.id <- paste(\"item\", item.2.id+100, sep=\".\") choice.id <- paste(\"item\", choice.id+100, sep=\".\")  sim.data <- data.frame(rater.id, item.1.id, item.2.id, choice.id)   ## fit the model posterior <- MCMCpaircompare(pwc.data=sim.data,                              theta.constraints=list(item.101=-2,                                                     item.150=2),                              alpha.fixed=FALSE,                              verbose=10000,                              a=0, A=0.5,                              burnin=10000, mcmc=200000, thin=100,                              store.theta=TRUE, store.alpha=TRUE)  theta.draws <- posterior[, grep(\"theta\", colnames(posterior))] alpha.draws <- posterior[, grep(\"alpha\", colnames(posterior))]  theta.post.med <- apply(theta.draws, 2, median) alpha.post.med <- apply(alpha.draws, 2, median)  theta.post.025 <- apply(theta.draws, 2, quantile, prob=0.025) theta.post.975 <- apply(theta.draws, 2, quantile, prob=0.975) alpha.post.025 <- apply(alpha.draws, 2, quantile, prob=0.025) alpha.post.975 <- apply(alpha.draws, 2, quantile, prob=0.975)  ## compare estimates to truth par(mfrow=c(1,2)) plot(theta.true, theta.post.med, xlim=c(-2.5, 2.5), ylim=c(-2.5, 2.5),      col=rgb(0,0,0,0.3)) segments(x0=theta.true, x1=theta.true,          y0=theta.post.025, y1=theta.post.975,          col=rgb(0,0,0,0.3))  abline(0, 1, col=rgb(1,0,0,0.5))  plot(alpha.true, alpha.post.med, xlim=c(0, 1.2), ylim=c(0, 3),      col=rgb(0,0,0,0.3)) segments(x0=alpha.true, x1=alpha.true,          y0=alpha.post.025, y1=alpha.post.975,          col=rgb(0,0,0,0.3))  abline(0, 1, col=rgb(1,0,0,0.5))  }"},{"path":"/reference/MCMCpaircompare2d.html","id":null,"dir":"Reference","previous_headings":"","what":"Markov Chain Monte Carlo for the Two-Dimensional Pairwise Comparisons\nModel in Yu and Quinn (2021) — MCMCpaircompare2d","title":"Markov Chain Monte Carlo for the Two-Dimensional Pairwise Comparisons\nModel in Yu and Quinn (2021) — MCMCpaircompare2d","text":"function generates sample posterior distribution model pairwise comparisons data probit link. Unlike standard models pairwise comparisons data, model latent attribute item compared vector two-dimensional Euclidean space.","code":""},{"path":"/reference/MCMCpaircompare2d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Markov Chain Monte Carlo for the Two-Dimensional Pairwise Comparisons\nModel in Yu and Quinn (2021) — MCMCpaircompare2d","text":"","code":"MCMCpaircompare2d(   pwc.data,   theta.constraints = list(),   burnin = 1000,   mcmc = 20000,   thin = 1,   verbose = 0,   seed = NA,   gamma.start = NA,   theta.start = NA,   store.theta = TRUE,   store.gamma = TRUE,   tune = 0.3,   procrustes = FALSE,   ... )"},{"path":"/reference/MCMCpaircompare2d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Markov Chain Monte Carlo for the Two-Dimensional Pairwise Comparisons\nModel in Yu and Quinn (2021) — MCMCpaircompare2d","text":"pwc.data data.frame containing pairwise comparisons data. row pwc.data corresponds single pairwise comparison. pwc.data needs exactly four columns. first column contains unique identifier rater. Column two contains unique identifier first item compared. Column three contains unique identifier second item compared. Column four contains unique identifier item selected two items compared. tie occurred, entry fourth column NA. identifiers columns 2 4 must start letter. Examples provided . theta.constraints list specifying possible simple equality inequality constraints item parameters.   typical entry list one three forms:   itemname=list(d,c) constrain dth dimension   theta item named itemname equal c,   itemname=list(d,\"+\") constrain dth dimension   theta item named itemname positive,   itemname=list(d, \"-\") constrain dth dimension   theta item named itemname negative. burnin number burn-iterations sampler. mcmc number Gibbs iterations sampler. thin thinning interval used simulation.  number Gibbs iterations must divisible value. verbose switch determines whether progress sampler printed screen.  verbose greater 0  output printed screen every verboseth iteration. seed seed random number generator.  NA, Mersenne Twister generator used default seed 12345; integer passed used seed Mersenne twister.  user can also pass list length two use L'Ecuyer random number generator, suitable parallel computation.  first element list L'Ecuyer seed, vector length six NA (NA default seed rep(12345,6) used).  second element list positive substream number. See MCMCpack specification details. gamma.start starting value gamma vector.  can either scalar column vector dimension equal number raters.  takes scalar value, value serve starting value gammas. default value NA set starting value gamma parameter \\(\\pi/4\\). theta.start Starting values theta. Can either numeric scalar, J 2 matrix (J number items compared), NA. scalar, theta values set value (except elements already specified via theta.contraints. NA, non constrained elements theta set equal 0, elements constrained positive set equal 0.5, elements constrained negative set equal -0.5 elements equality constraints set satisfy constraints. store.theta theta draws returned? Default TRUE. store.gamma gamma draws returned? Default TRUE. tune Tuning parameter random walk Metropolis proposal gamma_i. tune width uniform proposal centered current value gamma_i. Must positive scalar. procrustes theta gamma draws post-processed Procrustes transformation? Default FALSE. Procrustes target matrix derived constrained elements theta. row theta theta values constrained part target matrix. Elements equality constraints set values. Elements constrained positive set 1. Elements constrained negative set -1. procrustes set TRUE theta.constraints must set least three rows theta elements theta constrained. ... arguments passed","code":""},{"path":"/reference/MCMCpaircompare2d.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Markov Chain Monte Carlo for the Two-Dimensional Pairwise Comparisons\nModel in Yu and Quinn (2021) — MCMCpaircompare2d","text":"mcmc object contains posterior sample.  object can summarized functions provided coda package.","code":""},{"path":"/reference/MCMCpaircompare2d.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Markov Chain Monte Carlo for the Two-Dimensional Pairwise Comparisons\nModel in Yu and Quinn (2021) — MCMCpaircompare2d","text":"MCMCpaircompare2d uses data augmentation approach Albert Chib (1993) conjunction Gibbs Metropolis-within-Gibbs steps fit model. user supplies data sample posterior returned mcmc object, can subsequently analyzed coda package. simulation done compiled C++ code maximize efficiency. Please consult coda package documentation comprehensive list functions can used analyze posterior sample. model takes following form: $$= 1,...,\\ \\ \\ \\   (raters) $$ $$j = 1,...,J \\ \\ \\ \\   (items)  $$ $$Y_{ijj'} = 1 \\ \\   \\ \\  \\ \\  chooses \\ \\  j \\ \\ \\ \\ j'$$ $$Y_{ijj'} = 0 \\ \\ \\ \\ \\ \\ chooses \\ \\ j' \\ \\ \\ \\ j$$ $$Y_{ijj'} = NA \\ \\  \\ \\ \\ \\ chooses \\ \\ neither$$ $$\\Pr(Y_{ijj'} = 1) = \\Phi( \\mathbf{z}_{}' [\\boldsymbol{\\theta}_{j} - \\boldsymbol{\\theta}_{ j'} ])$$ $$\\mathbf{z}_{}=[\\cos(\\gamma_{}), \\  \\sin(\\gamma_{})]' $$ following priors assumed: $$\\gamma_i \\sim \\mathcal{U}nif(0, \\  \\pi/2)$$ $$\\boldsymbol{\\theta}_j \\sim \\mathcal{N}_{2}(\\mathbf{0}, \\mathbf{}_{2})$$ identification, \\(\\boldsymbol{\\theta}_j\\)s truncated 0, fixed constants.","code":""},{"path":"/reference/MCMCpaircompare2d.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Markov Chain Monte Carlo for the Two-Dimensional Pairwise Comparisons\nModel in Yu and Quinn (2021) — MCMCpaircompare2d","text":"Albert, J. H. S. Chib. 1993. ``Bayesian Analysis Binary Polychotomous Response Data.'' J. Amer. Statist. Assoc. 88, 669-679 Yu, Qiushi Kevin M. Quinn. 2021. ``Multidimensional Pairwise Comparison Model Heterogeneous Perceptions Application Modeling Perceived Truthfulness Public Statements COVID-19.'' University Michigan Working Paper. Andrew D. Martin, Kevin M. Quinn, Jong Hee Park. 2011.  ``MCMCpack: Markov Chain Monte Carlo R.'', Journal Statistical Software. 42(9): 1-21.  doi:10.18637/jss.v042.i09 . Daniel Pemstein, Kevin M. Quinn, Andrew D. Martin.  2007.  Scythe Statistical Library 1.0. http://scythe.lsa.umich.edu. Martyn Plummer, Nicky Best, Kate Cowles, Karen Vines. 2006.  ``Output Analysis Diagnostics MCMC (CODA)'', R News. 6(1): 7-11. https://CRAN.R-project.org/doc/Rnews/Rnews_2006-1.pdf.","code":""},{"path":[]},{"path":"/reference/MCMCpaircompare2d.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Markov Chain Monte Carlo for the Two-Dimensional Pairwise Comparisons\nModel in Yu and Quinn (2021) — MCMCpaircompare2d","text":"Qiushi Yu <yuqiushi@umich.edu> Kevin M. Quinn <kmq@umich.edu>","code":""},{"path":"/reference/MCMCpaircompare2d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Markov Chain Monte Carlo for the Two-Dimensional Pairwise Comparisons\nModel in Yu and Quinn (2021) — MCMCpaircompare2d","text":"","code":"if (FALSE) { ## a synthetic data example set.seed(123)  I <- 65  ## number of raters J <- 50 ## number of items to be compared   ## raters 1 to 5 put most weight on dimension 1 ## raters 6 to 10 put most weight on dimension 2 ## raters 11 to I put substantial weight on both dimensions gamma.true <- c(runif(5, 0, 0.1),              runif(5, 1.47, 1.57),              runif(I-10, 0.58, 0.98) ) theta1.true <- rnorm(J, m=0, s=1) theta2.true <- rnorm(J, m=0, s=1) theta1.true[1] <- 2 theta2.true[1] <- 2 theta1.true[2] <- -2 theta2.true[2] <- -2 theta1.true[3] <-  2 theta2.true[3] <- -2    n.comparisons <- 125 ## number of pairwise comparisons for each rater  ## generate synthetic data according to the assumed model rater.id <- NULL item.1.id <- NULL item.2.id <- NULL choice.id <- NULL for (i in 1:I){     for (c in 1:n.comparisons){         rater.id <- c(rater.id, i+100)         item.numbers <- sample(1:J, size=2, replace=FALSE)         item.1 <- item.numbers[1]         item.2 <- item.numbers[2]         item.1.id <- c(item.1.id, item.1)         item.2.id <- c(item.2.id, item.2)         z <- c(cos(gamma.true[i]), sin(gamma.true[i]))         eta <- z[1] * (theta1.true[item.1] - theta1.true[item.2])  +             z[2] * (theta2.true[item.1] - theta2.true[item.2])         prob.item.1.chosen <- pnorm(eta)         u <- runif(1)         if (u <= prob.item.1.chosen){             choice.id <- c(choice.id, item.1)         }         else{             choice.id <- c(choice.id, item.2)         }     } } item.1.id <- paste(\"item\", item.1.id+100, sep=\".\") item.2.id <- paste(\"item\", item.2.id+100, sep=\".\") choice.id <- paste(\"item\", choice.id+100, sep=\".\")  sim.data <- data.frame(rater.id, item.1.id, item.2.id, choice.id)   ## fit the model posterior <- MCMCpaircompare2d(pwc.data=sim.data,                              theta.constraints=list(item.101=list(1,2),                                                     item.101=list(2,2),                                                     item.102=list(1,-2),                                                     item.102=list(2,-2),                                                     item.103=list(1,\"+\"),                                                     item.103=list(2,\"-\")),                              verbose=1000,                              burnin=500, mcmc=20000, thin=10,                              store.theta=TRUE, store.gamma=TRUE, tune=0.5)      theta1.draws <- posterior[, grep(\"theta1\", colnames(posterior))] theta2.draws <- posterior[, grep(\"theta2\", colnames(posterior))] gamma.draws <- posterior[, grep(\"gamma\", colnames(posterior))]  theta1.post.med <- apply(theta1.draws, 2, median) theta2.post.med <- apply(theta2.draws, 2, median) gamma.post.med <- apply(gamma.draws, 2, median)  theta1.post.025 <- apply(theta1.draws, 2, quantile, prob=0.025) theta1.post.975 <- apply(theta1.draws, 2, quantile, prob=0.975) theta2.post.025 <- apply(theta2.draws, 2, quantile, prob=0.025) theta2.post.975 <- apply(theta2.draws, 2, quantile, prob=0.975) gamma.post.025 <- apply(gamma.draws, 2, quantile, prob=0.025) gamma.post.975 <- apply(gamma.draws, 2, quantile, prob=0.975)    ## compare estimates to truth par(mfrow=c(2,2)) plot(theta1.true, theta1.post.med, xlim=c(-2.5, 2.5), ylim=c(-2.5, 2.5),      col=rgb(0,0,0,0.3)) segments(x0=theta1.true, x1=theta1.true,          y0=theta1.post.025, y1=theta1.post.975,          col=rgb(0,0,0,0.3))  abline(0, 1, col=rgb(1,0,0,0.5))  plot(theta2.true, theta2.post.med, xlim=c(-2.5, 2.5), ylim=c(-2.5, 2.5),      col=rgb(0,0,0,0.3)) segments(x0=theta2.true, x1=theta2.true,          y0=theta2.post.025, y1=theta2.post.975,          col=rgb(0,0,0,0.3))  abline(0, 1, col=rgb(1,0,0,0.5))  plot(gamma.true, gamma.post.med, xlim=c(0, 1.6), ylim=c(0, 1.6),      col=rgb(0,0,0,0.3)) segments(x0=gamma.true, x1=gamma.true,          y0=gamma.post.025, y1=gamma.post.975,          col=rgb(0,0,0,0.3))  abline(0, 1, col=rgb(1,0,0,0.5))   ## plot point estimates  plot(theta1.post.med, theta2.post.med,      xlim=c(-2.5, 2.5), ylim=c(-2.5, 2.5),      col=rgb(0,0,0,0.3)) for (i in 1:length(gamma.post.med)){     arrows(x0=0, y0=0,            x1=cos(gamma.post.med[i]),            y1=sin(gamma.post.med[i]),            col=rgb(1,0,0,0.2), len=0.05, lwd=0.5) } }"},{"path":"/reference/MCMCpaircompare2dDP.html","id":null,"dir":"Reference","previous_headings":"","what":"Markov Chain Monte Carlo for the Two-Dimensional Pairwise Comparisons\nModel with Dirichlet Process Prior in Yu and Quinn (2021) — MCMCpaircompare2dDP","title":"Markov Chain Monte Carlo for the Two-Dimensional Pairwise Comparisons\nModel with Dirichlet Process Prior in Yu and Quinn (2021) — MCMCpaircompare2dDP","text":"function generates sample posterior distribution model pairwise comparisons data probit link. Unlike standard models pairwise comparisons data, model latent attribute item compared vector two-dimensional Euclidean space.","code":""},{"path":"/reference/MCMCpaircompare2dDP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Markov Chain Monte Carlo for the Two-Dimensional Pairwise Comparisons\nModel with Dirichlet Process Prior in Yu and Quinn (2021) — MCMCpaircompare2dDP","text":"","code":"MCMCpaircompare2dDP(   pwc.data,   theta.constraints = list(),   burnin = 1000,   mcmc = 20000,   thin = 1,   verbose = 0,   seed = NA,   gamma.start = NA,   theta.start = NA,   store.theta = TRUE,   store.gamma = FALSE,   tune = 0.3,   procrustes = FALSE,   alpha.start = 1,   cluster.max = 100,   cluster.mcmc = 500,   alpha.fixed = TRUE,   a0 = 1,   b0 = 1,   ... )"},{"path":"/reference/MCMCpaircompare2dDP.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Markov Chain Monte Carlo for the Two-Dimensional Pairwise Comparisons\nModel with Dirichlet Process Prior in Yu and Quinn (2021) — MCMCpaircompare2dDP","text":"pwc.data data.frame containing pairwise comparisons data. row pwc.data corresponds single pairwise comparison. pwc.data needs exactly four columns. first column contains unique identifier rater. Column two contains unique identifier first item compared. Column three contains unique identifier second item compared. Column four contains unique identifier item selected two items compared. tie occurred, entry fourth column NA. identifiers columns 2 4 must start letter. Examples provided . theta.constraints list specifying possible simple equality inequality constraints item parameters.   typical entry list one three forms:   itemname=list(d,c) constrain dth dimension   theta item named itemname equal c,   itemname=list(d,\"+\") constrain dth dimension   theta item named itemname positive,   itemname=list(d, \"-\") constrain dth dimension   theta item named itemname negative. burnin number burn-iterations sampler. mcmc number Gibbs iterations sampler. thin thinning interval used simulation.  number Gibbs iterations must divisible value. verbose switch determines whether progress sampler printed screen.  verbose greater 0  output printed screen every verboseth iteration. seed seed random number generator.  NA, Mersenne Twister generator used default seed 12345; integer passed used seed Mersenne twister.  user can also pass list length two use L'Ecuyer random number generator, suitable parallel computation.  first element list L'Ecuyer seed, vector length six NA (NA default seed rep(12345,6) used).  second element list positive substream number. See MCMCpack specification details. gamma.start starting value gamma vector.  can either scalar column vector dimension equal number raters.  takes scalar value, value serve starting value gammas. default value NA set starting value gamma parameter \\(\\pi/4\\). theta.start Starting values theta. Can either numeric scalar, J 2 matrix (J number items compared), NA. scalar, theta values set value (except elements already specified via theta.contraints. NA, non constrained elements theta set equal 0, elements constrained positive set equal 0.5, elements constrained negative set equal -0.5 elements equality constraints set satisfy constraints. store.theta theta draws returned? Default TRUE. store.gamma gamma draws returned? Default TRUE. tune Tuning parameter random walk Metropolis proposal gamma_i. tune width uniform proposal centered current value gamma_i. Must positive scalar. procrustes theta gamma draws post-processed Procrustes transformation? Default FALSE. Procrustes target matrix derived constrained elements theta. row theta theta values constrained part target matrix. Elements equality constraints set values. Elements constrained positive set 1. Elements constrained negative set -1. procrustes set TRUE theta.constraints must set least three rows theta elements theta constrained. alpha.start starting value DP concentration parameter alpha. Must positive scalar. Defaults 1. alpha.fixed set equal TRUE, alpha held fixed alpha.start. cluster.max maximum number clusters allowed approximation DP prior gamma. Defaults 100. Must positive integer. cluster.mcmc number additional MCMC iterations done sample cluster-specific gamma value within one main MCMC iteration. Must positive integer. Defaults 500. Setting lower value speeds runtime cost (possibly) worse mixing. alpha.fixed Logical value indicating whether DP concentration parameter alpha held fixed (TRUE) estimated (FALSE). a0 shape parameter gamma prior alpha. parameterization gamma distribution R's internal rgamma() function. relevant alpha.fixed set equal FALSE. Defaults 1. b0 rate parameter gamma prior alpha.  parameterization gamma distribution R's internal rgamma() function. relevant alpha.fixed set equal FALSE. Defaults 1. ... arguments passed","code":""},{"path":"/reference/MCMCpaircompare2dDP.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Markov Chain Monte Carlo for the Two-Dimensional Pairwise Comparisons\nModel with Dirichlet Process Prior in Yu and Quinn (2021) — MCMCpaircompare2dDP","text":"mcmc object contains posterior sample.  object can summarized functions provided coda package. column names mcmc object self explanatory. Note however columns names form \"cluster.[raterID]\" give cluster membership rater stored MCMC iteration. possibility label switching, particular values cluster membership variables meaningful. meaningful whether two raters share cluster membership value particular MCMC iteration. indicates two raters clustered together iteration. Finally, note \"n.clusters\" column gives number distinct gamma values iteration, .e. number clusters iteration.","code":""},{"path":"/reference/MCMCpaircompare2dDP.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Markov Chain Monte Carlo for the Two-Dimensional Pairwise Comparisons\nModel with Dirichlet Process Prior in Yu and Quinn (2021) — MCMCpaircompare2dDP","text":"MCMCpaircompare2d uses data augmentation approach Albert Chib (1993) conjunction Gibbs Metropolis-within-Gibbs steps fit model. user supplies data sample posterior returned mcmc object, can subsequently analyzed coda package. simulation done compiled C++ code maximize efficiency. Please consult coda package documentation comprehensive list functions can used analyze posterior sample. model takes following form: $$= 1,...,\\ \\ \\ \\   (raters) $$ $$j = 1,...,J \\ \\ \\ \\   (items)  $$ $$Y_{ijj'} = 1 \\ \\   \\ \\  \\ \\  chooses \\ \\  j \\ \\ \\ \\ j'$$ $$Y_{ijj'} = 0 \\ \\ \\ \\ \\ \\ chooses \\ \\ j' \\ \\ \\ \\ j$$ $$Y_{ijj'} = NA \\ \\  \\ \\ \\ \\ chooses \\ \\ neither$$ $$\\Pr(Y_{ijj'} = 1) = \\Phi( \\mathbf{z}_{}' [\\boldsymbol{\\theta}_{j} - \\boldsymbol{\\theta}_{ j'} ])$$ $$\\mathbf{z}_{}=[\\cos(\\gamma_{}), \\  \\sin(\\gamma_{})]' $$ following priors assumed: $$\\gamma_i \\sim G$$ $$G \\sim \\mathcal{DP}(\\alpha G_0)$$ $$G_0 = \\mathcal{U}nif(0,   \\pi/2)$$ $$\\alpha \\sim \\mathcal{G}amma(a_0, b_0)$$  $$\\boldsymbol{\\theta}_j \\sim \\mathcal{N}_{2}(\\mathbf{0}, \\mathbf{}_{2})$$ identification, \\(\\boldsymbol{\\theta}_j\\)s truncated 0, fixed constants.","code":""},{"path":"/reference/MCMCpaircompare2dDP.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Markov Chain Monte Carlo for the Two-Dimensional Pairwise Comparisons\nModel with Dirichlet Process Prior in Yu and Quinn (2021) — MCMCpaircompare2dDP","text":"Albert, J. H. S. Chib. 1993. ``Bayesian Analysis Binary Polychotomous Response Data.'' J. Amer. Statist. Assoc. 88, 669-679 Yu, Qiushi Kevin M. Quinn. 2021. ``Multidimensional Pairwise Comparison Model Heterogeneous Perceptions Application Modeling Perceived Truthfulness Public Statements COVID-19.'' University Michigan Working Paper. Andrew D. Martin, Kevin M. Quinn, Jong Hee Park. 2011.  ``MCMCpack: Markov Chain Monte Carlo R.'', Journal Statistical Software. 42(9): 1-21.  doi:10.18637/jss.v042.i09 . Daniel Pemstein, Kevin M. Quinn, Andrew D. Martin.  2007.  Scythe Statistical Library 1.0. http://scythe.lsa.umich.edu. Martyn Plummer, Nicky Best, Kate Cowles, Karen Vines. 2006.  ``Output Analysis Diagnostics MCMC (CODA)'', R News. 6(1): 7-11. https://CRAN.R-project.org/doc/Rnews/Rnews_2006-1.pdf.","code":""},{"path":[]},{"path":"/reference/MCMCpaircompare2dDP.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Markov Chain Monte Carlo for the Two-Dimensional Pairwise Comparisons\nModel with Dirichlet Process Prior in Yu and Quinn (2021) — MCMCpaircompare2dDP","text":"Qiushi Yu <yuqiushi@umich.edu> Kevin M. Quinn <kmq@umich.edu>","code":""},{"path":"/reference/MCMCpaircompare2dDP.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Markov Chain Monte Carlo for the Two-Dimensional Pairwise Comparisons\nModel with Dirichlet Process Prior in Yu and Quinn (2021) — MCMCpaircompare2dDP","text":"","code":"if (FALSE) { ## a synthetic data example set.seed(123)  I <- 65  ## number of raters J <- 50 ## number of items to be compared  ## 3 clusters: ## raters 1 to 5 put most weight on dimension 1 ## raters 6 to 10 put most weight on dimension 2 ## raters 11 to I put substantial weight on both dimensions gamma.true <- c(rep(0.05, 5),              rep(1.50, 5),              rep(0.7, I-10) ) theta1.true <- rnorm(J, m=0, s=1) theta2.true <- rnorm(J, m=0, s=1) theta1.true[1] <- 2 theta2.true[1] <- 2 theta1.true[2] <- -2 theta2.true[2] <- -2 theta1.true[3] <-  2 theta2.true[3] <- -2    n.comparisons <- 125 ## number of pairwise comparisons for each rater  ## generate synthetic data according to the assumed model rater.id <- NULL item.1.id <- NULL item.2.id <- NULL choice.id <- NULL for (i in 1:I){     for (c in 1:n.comparisons){         rater.id <- c(rater.id, i+100)         item.numbers <- sample(1:J, size=2, replace=FALSE)         item.1 <- item.numbers[1]         item.2 <- item.numbers[2]         item.1.id <- c(item.1.id, item.1)         item.2.id <- c(item.2.id, item.2)         z <- c(cos(gamma.true[i]), sin(gamma.true[i]))         eta <- z[1] * (theta1.true[item.1] - theta1.true[item.2])  +             z[2] * (theta2.true[item.1] - theta2.true[item.2])         prob.item.1.chosen <- pnorm(eta)         u <- runif(1)         if (u <= prob.item.1.chosen){             choice.id <- c(choice.id, item.1)         }         else{             choice.id <- c(choice.id, item.2)         }     } } item.1.id <- paste(\"item\", item.1.id+100, sep=\".\") item.2.id <- paste(\"item\", item.2.id+100, sep=\".\") choice.id <- paste(\"item\", choice.id+100, sep=\".\")  sim.data <- data.frame(rater.id, item.1.id, item.2.id, choice.id)   ## fit the model (should be run for more than 10500 iterations) posterior <- MCMCpaircompare2dDP(pwc.data=sim.data,                                  theta.constraints=list(item.101=list(1,2),                                                         item.101=list(2,2),                                                         item.102=list(1,-2),                                                         item.102=list(2,-2),                                                         item.103=list(1,\"+\"),                                                         item.103=list(2,\"-\")),                                  verbose=100,                                  burnin=500, mcmc=10000, thin=5,                                  cluster.mcmc=10,                                  store.theta=TRUE, store.gamma=TRUE,                                  tune=0.1)      theta1.draws <- posterior[, grep(\"theta1\", colnames(posterior))] theta2.draws <- posterior[, grep(\"theta2\", colnames(posterior))] gamma.draws <- posterior[, grep(\"gamma\", colnames(posterior))]  theta1.post.med <- apply(theta1.draws, 2, median) theta2.post.med <- apply(theta2.draws, 2, median) gamma.post.med <- apply(gamma.draws, 2, median)  theta1.post.025 <- apply(theta1.draws, 2, quantile, prob=0.025) theta1.post.975 <- apply(theta1.draws, 2, quantile, prob=0.975) theta2.post.025 <- apply(theta2.draws, 2, quantile, prob=0.025) theta2.post.975 <- apply(theta2.draws, 2, quantile, prob=0.975) gamma.post.025 <- apply(gamma.draws, 2, quantile, prob=0.025) gamma.post.975 <- apply(gamma.draws, 2, quantile, prob=0.975)    ## compare estimates to truth par(mfrow=c(2,2)) plot(theta1.true, theta1.post.med, xlim=c(-2.5, 2.5), ylim=c(-2.5, 2.5),      col=rgb(0,0,0,0.3)) segments(x0=theta1.true, x1=theta1.true,          y0=theta1.post.025, y1=theta1.post.975,          col=rgb(0,0,0,0.3))  abline(0, 1, col=rgb(1,0,0,0.5))  plot(theta2.true, theta2.post.med, xlim=c(-2.5, 2.5), ylim=c(-2.5, 2.5),      col=rgb(0,0,0,0.3)) segments(x0=theta2.true, x1=theta2.true,          y0=theta2.post.025, y1=theta2.post.975,          col=rgb(0,0,0,0.3))  abline(0, 1, col=rgb(1,0,0,0.5))  plot(gamma.true, gamma.post.med, xlim=c(0, 1.6), ylim=c(0, 1.6),      col=rgb(0,0,0,0.3)) segments(x0=gamma.true, x1=gamma.true,          y0=gamma.post.025, y1=gamma.post.975,          col=rgb(0,0,0,0.3))  abline(0, 1, col=rgb(1,0,0,0.5))   ## plot point estimates  plot(theta1.post.med, theta2.post.med,      xlim=c(-2.5, 2.5), ylim=c(-2.5, 2.5),      col=rgb(0,0,0,0.3)) for (i in 1:length(gamma.post.med)){     arrows(x0=0, y0=0,            x1=cos(gamma.post.med[i]),            y1=sin(gamma.post.med[i]),            col=rgb(1,0,0,0.2), len=0.05, lwd=0.5) }  }"},{"path":"/reference/MCMCpoisson.html","id":null,"dir":"Reference","previous_headings":"","what":"Markov Chain Monte Carlo for Poisson Regression — MCMCpoisson","title":"Markov Chain Monte Carlo for Poisson Regression — MCMCpoisson","text":"function generates sample posterior distribution Poisson regression model using random walk Metropolis algorithm. user supplies data priors, sample posterior distribution returned mcmc object, can subsequently analyzed functions provided coda package.","code":""},{"path":"/reference/MCMCpoisson.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Markov Chain Monte Carlo for Poisson Regression — MCMCpoisson","text":"","code":"MCMCpoisson(   formula,   data = NULL,   burnin = 1000,   mcmc = 10000,   thin = 1,   tune = 1.1,   verbose = 0,   seed = NA,   beta.start = NA,   b0 = 0,   B0 = 0,   marginal.likelihood = c(\"none\", \"Laplace\"),   ... )"},{"path":"/reference/MCMCpoisson.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Markov Chain Monte Carlo for Poisson Regression — MCMCpoisson","text":"formula Model formula. data Data frame. burnin number burn-iterations sampler. mcmc number Metropolis iterations sampler. thin thinning interval used simulation.  number mcmc iterations must divisible value. tune Metropolis tuning parameter. Can either positive scalar \\(k\\)-vector, \\(k\\) length \\(\\beta\\).Make sure acceptance rate satisfactory (typically 0.20 0.5) using posterior sample inference. verbose switch determines whether progress sampler printed screen.  verbose greater 0 iteration number, current beta vector, Metropolis acceptance rate printed screen every verboseth iteration. seed seed random number generator.  NA, Mersenne Twister generator used default seed 12345; integer passed used seed Mersenne twister.  user can also pass list length two use L'Ecuyer random number generator, suitable parallel computation.  first element list L'Ecuyer seed, vector length six NA (NA default seed rep(12345,6) used).  second element list positive substream number. See MCMCpack specification details. beta.start starting value \\(\\beta\\) vector.  can either scalar column vector dimension equal number betas. takes scalar value, value serve starting value betas.  default value NA use maximum likelihood estimate \\(\\beta\\) starting value. b0 prior mean \\(\\beta\\).  can either scalar column vector dimension equal number betas. takes scalar value, value serve prior mean betas. B0 prior precision \\(\\beta\\).  can either scalar square matrix dimensions equal number betas.  takes scalar value, value times identity matrix serves prior precision \\(\\beta\\). Default value 0 equivalent improper uniform prior beta. marginal.likelihood marginal likelihood calculated? Options : none case marginal likelihood calculated Laplace case Laplace approximation (see Kass Raftery, 1995) used. ... arguments passed.","code":""},{"path":"/reference/MCMCpoisson.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Markov Chain Monte Carlo for Poisson Regression — MCMCpoisson","text":"mcmc object contains posterior sample.  object can summarized functions provided coda package.","code":""},{"path":"/reference/MCMCpoisson.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Markov Chain Monte Carlo for Poisson Regression — MCMCpoisson","text":"MCMCpoisson simulates posterior distribution Poisson regression model using random walk Metropolis algorithm. simulation proper done compiled C++ code maximize efficiency.  Please consult coda documentation comprehensive list functions can used analyze posterior sample. model takes following form: $$y_i \\sim \\mathcal{P}oisson(\\mu_i)$$ inverse link function: $$\\mu_i = \\exp(x_i'\\beta)$$ assume multivariate Normal prior \\(\\beta\\): $$\\beta \\sim \\mathcal{N}(b_0,B_0^{-1})$$ Metropois proposal distribution centered current value \\(\\theta\\) variance-covariance \\(V = T (B_0 + C^{-1})^{-1} T \\) \\(T\\) diagonal positive definite matrix formed tune, \\(B_0\\) prior precision, \\(C\\) large sample variance-covariance matrix MLEs. last calculation done via initial call glm.","code":""},{"path":"/reference/MCMCpoisson.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Markov Chain Monte Carlo for Poisson Regression — MCMCpoisson","text":"Andrew D. Martin, Kevin M. Quinn, Jong Hee Park. 2011. ``MCMCpack: Markov Chain Monte Carlo R.'', Journal Statistical Software. 42(9): 1-21.  doi:10.18637/jss.v042.i09 . Daniel Pemstein, Kevin M. Quinn, Andrew D. Martin.  2007.  Scythe Statistical Library 1.0. http://scythe.lsa.umich.edu. Martyn Plummer, Nicky Best, Kate Cowles, Karen Vines. 2006.  ``Output Analysis Diagnostics MCMC (CODA)'', R News. 6(1): 7-11. https://CRAN.R-project.org/doc/Rnews/Rnews_2006-1.pdf.","code":""},{"path":[]},{"path":"/reference/MCMCpoisson.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Markov Chain Monte Carlo for Poisson Regression — MCMCpoisson","text":"","code":"if (FALSE) {    counts <- c(18,17,15,20,10,20,25,13,12)    outcome <- gl(3,1,9)    treatment <- gl(3,3)    posterior <- MCMCpoisson(counts ~ outcome + treatment)    plot(posterior)    summary(posterior)    }"},{"path":"/reference/MCMCpoissonChange.html","id":null,"dir":"Reference","previous_headings":"","what":"Markov Chain Monte Carlo for a Poisson Regression Changepoint Model — MCMCpoissonChange","title":"Markov Chain Monte Carlo for a Poisson Regression Changepoint Model — MCMCpoissonChange","text":"function generates sample posterior distribution Poisson regression model multiple changepoints. function uses Markov chain Monte Carlo method Chib (1998).  user supplies data priors, sample posterior distribution returned mcmc object, can subsequently analyzed functions provided coda package.","code":""},{"path":"/reference/MCMCpoissonChange.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Markov Chain Monte Carlo for a Poisson Regression Changepoint Model — MCMCpoissonChange","text":"","code":"MCMCpoissonChange(   formula,   data = parent.frame(),   m = 1,   b0 = 0,   B0 = 1,   a = NULL,   b = NULL,   c0 = NA,   d0 = NA,   lambda.mu = NA,   lambda.var = NA,   burnin = 1000,   mcmc = 1000,   thin = 1,   verbose = 0,   seed = NA,   beta.start = NA,   P.start = NA,   marginal.likelihood = c(\"none\", \"Chib95\"),   ... )"},{"path":"/reference/MCMCpoissonChange.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Markov Chain Monte Carlo for a Poisson Regression Changepoint Model — MCMCpoissonChange","text":"formula Model formula. data Data frame. m number changepoints. b0 prior mean \\(\\beta\\).  can either scalar column vector dimension equal number betas. takes scalar value, value serve prior mean betas. B0 prior precision \\(\\beta\\).  can either scalar square matrix dimensions equal number betas.  takes scalar value, value times identity matrix serves prior precision beta. Default value 0 equivalent improper uniform prior beta. \\(\\) shape1 beta prior transition probabilities. default, expected duration computed corresponding b values assigned. expected duration sample period divided number states. b \\(b\\) shape2 beta prior transition probabilities. default, expected duration computed corresponding b values assigned. expected duration sample period divided number states. c0 \\(c_0\\) shape parameter Gamma prior \\(\\lambda\\) (mean). covariate, provided users. default value provided. d0 \\(d_0\\) scale parameter Gamma prior \\(\\lambda\\) (mean). covariate, provided users. default value provided. lambda.mu mean Gamma prior \\(\\lambda\\). \\(sigma.mu\\) \\(sigma.var\\) allow users choose Gamma prior choosing mean variance. lambda.var variacne Gamma prior \\(\\lambda\\). \\(sigma.mu\\) \\(sigma.var\\) allow users choose Gamma prior choosing mean variance. burnin number burn-iterations sampler. mcmc number MCMC iterations burn-. thin thinning interval used simulation.  number MCMC iterations must divisible value. verbose switch determines whether progress sampler printed screen.  verbose greater 0, iteration number posterior density samples printed screen every verboseth iteration. seed seed random number generator.  NA, current R system seed used. beta.start starting values beta vector. can either scalar column vector dimension equal number betas. default value NA use draws Uniform distribution boundary data starting value. scalar, value serve starting value mean betas. covariate, log value means used. P.start starting values transition matrix. user provide square matrix dimension equal number states. default, draws Beta(0.9, 0.1) used construct proper transition matrix raw except last raw. marginal.likelihood marginal likelihood calculated? Options : none case marginal likelihood calculated, Chib95 case method Chib (1995) used. ... arguments passed","code":""},{"path":"/reference/MCMCpoissonChange.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Markov Chain Monte Carlo for a Poisson Regression Changepoint Model — MCMCpoissonChange","text":"mcmc object contains posterior sample. object can summarized functions provided coda package.  object contains attribute prob.state storage matrix contains probability \\(state_i\\) period, log-marginal likelihood model (logmarglike).","code":""},{"path":"/reference/MCMCpoissonChange.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Markov Chain Monte Carlo for a Poisson Regression Changepoint Model — MCMCpoissonChange","text":"MCMCpoissonChange simulates posterior distribution Poisson regression model multiple changepoints using methods Chib (1998) Fruhwirth-Schnatter Wagner (2006).  details model discussed Park (2010). model takes following form: $$y_t \\sim \\mathcal{P}oisson(\\mu_t)$$ $$\\mu_t = x_t ' \\beta_m,\\;\\; m = 1, \\ldots, M$$ \\(M\\) number states \\(\\beta_m\\) paramters state \\(m\\) \\(t\\). assume Gaussian distribution prior \\(\\beta\\): $$\\beta_m \\sim \\mathcal{N}(b_0,B_0^{-1}),\\;\\; m = 1, \\ldots, M$$ : $$p_{mm} \\sim \\mathcal{B}eta(, b),\\;\\; m = 1, \\ldots, M$$ \\(M\\) number states.","code":""},{"path":"/reference/MCMCpoissonChange.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Markov Chain Monte Carlo for a Poisson Regression Changepoint Model — MCMCpoissonChange","text":"Jong Hee Park. 2010. ``Structural Change U.S. Presidents' Use Force Abroad.'' American Journal Political Science 54: 766-782. <doi:10.1111/j.1540-5907.2010.00459.x> Sylvia Fruhwirth-Schnatter Helga Wagner 2006. ``Auxiliary Mixture Sampling Parameter-driven Models Time Series Counts Applications State Space Modelling.'' Biometrika. 93:827--841. Siddhartha Chib. 1998. ``Estimation comparison multiple change-point models.'' Journal Econometrics. 86: 221-241. <doi: 10.1016/S0304-4076(97)00115-2> Andrew D. Martin, Kevin M. Quinn, Jong Hee Park. 2011.  ``MCMCpack: Markov Chain Monte Carlo R.'', Journal Statistical Software. 42(9): 1-21.  doi:10.18637/jss.v042.i09 . Siddhartha Chib. 1995. ``Marginal Likelihood Gibbs Output.'' Journal American Statistical Association. 90: 1313-1321. <doi: 10.1080/01621459.1995.10476635>","code":""},{"path":[]},{"path":"/reference/MCMCpoissonChange.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Markov Chain Monte Carlo for a Poisson Regression Changepoint Model — MCMCpoissonChange","text":"","code":"if (FALSE) {     set.seed(11119)     n <- 150     x1 <- runif(n, 0, 0.5)     true.beta1 <- c(1,  1)     true.beta2 <- c(1,  -2)     true.beta3 <- c(1,  2)      ## set true two breaks at (50, 100)     true.s <- rep(1:3, each=n/3)     mu1 <- exp(1 + x1[true.s==1]*1)     mu2 <- exp(1 + x1[true.s==2]*-2)     mu3 <- exp(1 + x1[true.s==3]*2)      y <- as.ts(c(rpois(n/3, mu1), rpois(n/3, mu2), rpois(n/3, mu3)))     formula = y ~ x1      ## fit multiple models with a varying number of breaks     model0 <-  MCMCpoissonChange(formula, m=0,             mcmc = 1000, burnin = 1000, verbose = 500,             b0 = rep(0, 2), B0 = 1/5*diag(2), marginal.likelihood = \"Chib95\")     model1 <-  MCMCpoissonChange(formula, m=1,             mcmc = 1000, burnin = 1000, verbose = 500,             b0 = rep(0, 2), B0 = 1/5*diag(2), marginal.likelihood = \"Chib95\")     model2 <-  MCMCpoissonChange(formula, m=2,             mcmc = 1000, burnin = 1000, verbose = 500,             b0 = rep(0, 2), B0 = 1/5*diag(2), marginal.likelihood = \"Chib95\")     model3 <-  MCMCpoissonChange(formula, m=3,             mcmc = 1000, burnin = 1000, verbose = 500,             b0 = rep(0, 2), B0 = 1/5*diag(2), marginal.likelihood = \"Chib95\")     model4 <-  MCMCpoissonChange(formula, m=4,             mcmc = 1000, burnin = 1000, verbose = 500,             b0 = rep(0, 2), B0 = 1/5*diag(2), marginal.likelihood = \"Chib95\")     model5 <-  MCMCpoissonChange(formula, m=5,             mcmc = 1000, burnin = 1000, verbose = 500,             b0 = rep(0, 2), B0 = 1/5*diag(2), marginal.likelihood = \"Chib95\")      ## find the most reasonable one     print(BayesFactor(model0, model1, model2, model3, model4, model5))      ## draw plots using the \"right\" model     par(mfrow=c(attr(model2, \"m\") + 1, 1), mai=c(0.4, 0.6, 0.3, 0.05))     plotState(model2, legend.control = c(1, 0.6))     plotChangepoint(model2, verbose = TRUE, ylab=\"Density\", start=1, overlay=TRUE)      ## No covariate case     model2.1 <- MCMCpoissonChange(y ~ 1, m = 2, c0 = 2, d0 = 1,              mcmc = 1000, burnin = 1000, verbose = 500,              marginal.likelihood = \"Chib95\")     print(BayesFactor(model2, model2.1))     }"},{"path":"/reference/MCMCprobit.html","id":null,"dir":"Reference","previous_headings":"","what":"Markov Chain Monte Carlo for Probit Regression — MCMCprobit","title":"Markov Chain Monte Carlo for Probit Regression — MCMCprobit","text":"function generates sample posterior distribution probit regression model using data augmentation approach Albert Chib (1993). user supplies data priors, sample posterior distribution returned mcmc object, can subsequently analyzed functions provided coda package.","code":""},{"path":"/reference/MCMCprobit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Markov Chain Monte Carlo for Probit Regression — MCMCprobit","text":"","code":"MCMCprobit(   formula,   data = NULL,   burnin = 1000,   mcmc = 10000,   thin = 1,   verbose = 0,   seed = NA,   beta.start = NA,   b0 = 0,   B0 = 0,   bayes.resid = FALSE,   marginal.likelihood = c(\"none\", \"Laplace\", \"Chib95\"),   ... )"},{"path":"/reference/MCMCprobit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Markov Chain Monte Carlo for Probit Regression — MCMCprobit","text":"formula Model formula. data Data frame. burnin number burn-iterations sampler. mcmc number Gibbs iterations sampler. thin thinning interval used simulation.  number Gibbs iterations must divisible value. verbose switch determines whether progress sampler printed screen.  verbose greater 0 iteration number betas printed screen every verboseth iteration. seed seed random number generator.  NA, Mersenne Twister generator used default seed 12345; integer passed used seed Mersenne twister.  user can also pass list length two use L'Ecuyer random number generator, suitable parallel computation.  first element list L'Ecuyer seed, vector length six NA (NA default seed rep(12345,6) used).  second element list positive substream number. See MCMCpack specification details. beta.start starting value \\(\\beta\\) vector.  can either scalar column vector dimension equal number betas.  takes scalar value, value serve starting value betas. default value NA use maximum likelihood estimate \\(\\beta\\) starting value. b0 prior mean \\(\\beta\\).  can either scalar column vector dimension equal number betas. takes scalar value, value serve prior mean betas. B0 prior precision \\(\\beta\\).  can either scalar square matrix dimensions equal number betas.  takes scalar value, value times identity matrix serves prior precision \\(\\beta\\). Default value 0 equivalent improper uniform prior \\(\\beta\\). bayes.resid latent Bayesian residuals (Albert Chib, 1995) returned? Default FALSE meaning residuals returned. Alternatively, user can specify array integers giving observation numbers latent residuals calculated returned. TRUE return draws latent residuals observations. marginal.likelihood marginal likelihood calculated? Options : none case marginal likelihood calculated, Laplace case Laplace approximation (see Kass Raftery, 1995) used, Chib95 case Chib (1995) method used. ... arguments passed","code":""},{"path":"/reference/MCMCprobit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Markov Chain Monte Carlo for Probit Regression — MCMCprobit","text":"mcmc object contains posterior sample.  object can summarized functions provided coda package.","code":""},{"path":"/reference/MCMCprobit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Markov Chain Monte Carlo for Probit Regression — MCMCprobit","text":"MCMCprobit simulates posterior distribution probit regression model using data augmentation. simulation proper done compiled C++ code maximize efficiency.  Please consult coda documentation comprehensive list functions can used analyze posterior sample. model takes following form: $$y_i \\sim \\mathcal{B}ernoulli(\\pi_i)$$ inverse link function: $$\\pi_i = \\Phi(x_i'\\beta)$$ assume multivariate Normal prior \\(\\beta\\): $$\\beta \\sim \\mathcal{N}(b_0,B_0^{-1})$$ See Albert Chib (1993) estimation details.","code":""},{"path":"/reference/MCMCprobit.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Markov Chain Monte Carlo for Probit Regression — MCMCprobit","text":"Albert, J. H. S. Chib. 1993. ``Bayesian Analysis Binary Polychotomous Response Data.'' J. Amer. Statist. Assoc. 88, 669-679 Albert, J. H. S. Chib. 1995. ``Bayesian Residual Analysis Binary Response Regression Models.'' Biometrika. 82, 747-759. Andrew D. Martin, Kevin M. Quinn, Jong Hee Park. 2011.  ``MCMCpack: Markov Chain Monte Carlo R.'', Journal Statistical Software. 42(9): 1-21.  doi:10.18637/jss.v042.i09 . Siddhartha Chib. 1995. ``Marginal Likelihood Gibbs Output.'' Journal American Statistical Association. 90: 1313-1321. <doi: 10.1080/01621459.1995.10476635> Daniel Pemstein, Kevin M. Quinn, Andrew D. Martin.  2007.  Scythe Statistical Library 1.0. http://scythe.lsa.umich.edu. Martyn Plummer, Nicky Best, Kate Cowles, Karen Vines. 2006.  ``Output Analysis Diagnostics MCMC (CODA)'', R News. 6(1): 7-11. https://CRAN.R-project.org/doc/Rnews/Rnews_2006-1.pdf.","code":""},{"path":[]},{"path":"/reference/MCMCprobit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Markov Chain Monte Carlo for Probit Regression — MCMCprobit","text":"","code":"if (FALSE) {    data(birthwt)    out1 <- MCMCprobit(low~as.factor(race)+smoke, data=birthwt,      b0 = 0, B0 = 10, marginal.likelihood=\"Chib95\")    out2 <- MCMCprobit(low~age+as.factor(race), data=birthwt,      b0 = 0, B0 = 10,  marginal.likelihood=\"Chib95\")    out3 <- MCMCprobit(low~age+as.factor(race)+smoke, data=birthwt,      b0 = 0, B0 = 10,  marginal.likelihood=\"Chib95\")    BayesFactor(out1, out2, out3)    plot(out3)    summary(out3)    }"},{"path":"/reference/MCMCprobitChange.html","id":null,"dir":"Reference","previous_headings":"","what":"Markov Chain Monte Carlo for a linear Gaussian Multiple Changepoint Model — MCMCprobitChange","title":"Markov Chain Monte Carlo for a linear Gaussian Multiple Changepoint Model — MCMCprobitChange","text":"function generates sample posterior distribution linear Gaussian model multiple changepoints. function uses Markov chain Monte Carlo method Chib (1998).  user supplies data priors, sample posterior distribution returned mcmc object, can subsequently analyzed functions provided coda package.","code":""},{"path":"/reference/MCMCprobitChange.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Markov Chain Monte Carlo for a linear Gaussian Multiple Changepoint Model — MCMCprobitChange","text":"","code":"MCMCprobitChange(   formula,   data = parent.frame(),   m = 1,   burnin = 10000,   mcmc = 10000,   thin = 1,   verbose = 0,   seed = NA,   beta.start = NA,   P.start = NA,   b0 = NULL,   B0 = NULL,   a = NULL,   b = NULL,   marginal.likelihood = c(\"none\", \"Chib95\"),   ... )"},{"path":"/reference/MCMCprobitChange.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Markov Chain Monte Carlo for a linear Gaussian Multiple Changepoint Model — MCMCprobitChange","text":"formula Model formula. data Data frame. m number changepoints. burnin number burn-iterations sampler. mcmc number MCMC iterations burnin. thin thinning interval used simulation.  number MCMC iterations must divisible value. verbose switch determines whether progress sampler printed screen.  verbose greater 0 iteration number, \\(\\beta\\) vector, error variance printed screen every verboseth iteration. seed seed random number generator.  NA, Mersenne Twister generator used default seed 12345; integer passed used seed Mersenne twister.  user can also pass list length two use L'Ecuyer random number generator, suitable parallel computation.  first element list L'Ecuyer seed, vector length six NA (NA default seed rep(12345,6) used).  second element list positive substream number. See MCMCpack specification details. beta.start starting values \\(\\beta\\) vector. can either scalar column vector dimension equal number betas.  default value NA use MLE estimate \\(\\beta\\) starting value.  scalar, value serve starting value mean betas. P.start starting values transition matrix.  user provide square matrix dimension equal number states.  default, draws Beta(0.9, 0.1) used construct proper transition matrix raw except last raw. b0 prior mean \\(\\beta\\).  can either scalar column vector dimension equal number betas. takes scalar value, value serve prior mean betas. B0 prior precision \\(\\beta\\).  can either scalar square matrix dimensions equal number betas.  takes scalar value, value times identity matrix serves prior precision beta. Default value 0 equivalent improper uniform prior beta. \\(\\) shape1 beta prior transition probabilities. default, expected duration computed corresponding b values assigned. expected duration sample period divided number states. b \\(b\\) shape2 beta prior transition probabilities. default, expected duration computed corresponding b values assigned. expected duration sample period divided number states. marginal.likelihood marginal likelihood calculated? Options : none case marginal likelihood calculated, Chib95 case method Chib (1995) used. ... arguments passed","code":""},{"path":"/reference/MCMCprobitChange.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Markov Chain Monte Carlo for a linear Gaussian Multiple Changepoint Model — MCMCprobitChange","text":"mcmc object contains posterior sample.  object can summarized functions provided coda package.  object contains attribute prob.state storage matrix contains probability \\(state_i\\) period, log-likelihood model (loglike), log-marginal likelihood model (logmarglike).","code":""},{"path":"/reference/MCMCprobitChange.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Markov Chain Monte Carlo for a linear Gaussian Multiple Changepoint Model — MCMCprobitChange","text":"MCMCprobitChange simulates posterior distribution probit regression model multiple parameter breaks. simulation based Chib (1998) Park (2011). model takes following form: $$\\Pr(y_t = 1) = \\Phi(x_i'\\beta_m) \\;\\; m = 1, \\ldots, M$$ \\(M\\) number states, \\(\\beta_m\\) parameter state \\(m\\) \\(t\\). assume Gaussian distribution prior \\(\\beta\\): $$\\beta_m \\sim \\mathcal{N}(b_0,B_0^{-1}),\\;\\; m = 1, \\ldots, M$$ : $$p_{mm} \\sim \\mathcal{B}eta(, b),\\;\\; m = 1, \\ldots, M$$ \\(M\\) number states.","code":""},{"path":"/reference/MCMCprobitChange.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Markov Chain Monte Carlo for a linear Gaussian Multiple Changepoint Model — MCMCprobitChange","text":"Jong Hee Park. 2011. ``Changepoint Analysis Binary Ordinal Probit Models: Application Bank Rate Policy Interwar Gold Standard.\"  Political Analysis. 19: 188-204. <doi:10.1093/pan/mpr007> Andrew D. Martin, Kevin M. Quinn, Jong Hee Park. 2011.  ``MCMCpack: Markov Chain Monte Carlo R.'', Journal Statistical Software. 42(9): 1-21.  doi:10.18637/jss.v042.i09 . Siddhartha Chib. 1998. ``Estimation comparison multiple change-point models.'' Journal Econometrics. 86: 221-241. Albert, J. H. S. Chib. 1993. ``Bayesian Analysis Binary Polychotomous Response Data.'' J. Amer. Statist. Assoc. 88, 669-679","code":""},{"path":[]},{"path":"/reference/MCMCprobitChange.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Markov Chain Monte Carlo for a linear Gaussian Multiple Changepoint Model — MCMCprobitChange","text":"","code":"if (FALSE) { set.seed(1973) x1 <- rnorm(300, 0, 1) true.beta <- c(-.5, .2, 1) true.alpha <- c(.1, -1., .2) X <- cbind(1, x1)  ## set two true breaks at 100 and 200 true.phi1 <- pnorm(true.alpha[1] + x1[1:100]*true.beta[1]) true.phi2 <- pnorm(true.alpha[2] + x1[101:200]*true.beta[2]) true.phi3 <-  pnorm(true.alpha[3] + x1[201:300]*true.beta[3])  ## generate y y1 <- rbinom(100, 1, true.phi1) y2 <- rbinom(100, 1, true.phi2) y3 <- rbinom(100, 1, true.phi3) Y <- as.ts(c(y1, y2, y3))  ## fit multiple models with a varying number of breaks out0 <- MCMCprobitChange(formula=Y~X-1, data=parent.frame(), m=0,                          mcmc=1000, burnin=1000, thin=1, verbose=1000,                          b0 = 0, B0 = 0.1, a = 1, b = 1,  marginal.likelihood = c(\"Chib95\")) out1 <- MCMCprobitChange(formula=Y~X-1, data=parent.frame(), m=1,                          mcmc=1000, burnin=1000, thin=1, verbose=1000,                          b0 = 0, B0 = 0.1, a = 1, b = 1,  marginal.likelihood = c(\"Chib95\")) out2 <- MCMCprobitChange(formula=Y~X-1, data=parent.frame(), m=2,                          mcmc=1000, burnin=1000, thin=1, verbose=1000,                          b0 = 0, B0 = 0.1, a = 1, b = 1,  marginal.likelihood = c(\"Chib95\")) out3 <- MCMCprobitChange(formula=Y~X-1, data=parent.frame(), m=3,                          mcmc=1000, burnin=1000, thin=1, verbose=1000,                          b0 = 0, B0 = 0.1, a = 1, b = 1,  marginal.likelihood = c(\"Chib95\"))  ## find the most reasonable one BayesFactor(out0, out1, out2, out3)  ## draw plots using the \"right\" model plotState(out2) plotChangepoint(out2) }"},{"path":"/reference/MCMCquantreg.html","id":null,"dir":"Reference","previous_headings":"","what":"Bayesian quantile regression using Gibbs sampling — MCMCquantreg","title":"Bayesian quantile regression using Gibbs sampling — MCMCquantreg","text":"function fits quantile regression models Bayesian inference.  function samples posterior distribution using Gibbs sampling data augmentation.  multivariate normal prior assumed \\(\\beta\\). user supplies prior parameters.  sample posterior distribution returned mcmc object, can analysed functions coda package.","code":""},{"path":"/reference/MCMCquantreg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bayesian quantile regression using Gibbs sampling — MCMCquantreg","text":"","code":"MCMCquantreg(   formula,   data = NULL,   tau = 0.5,   burnin = 1000,   mcmc = 10000,   thin = 1,   verbose = 0,   seed = sample(1:1e+06, 1),   beta.start = NA,   b0 = 0,   B0 = 0,   ... )"},{"path":"/reference/MCMCquantreg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bayesian quantile regression using Gibbs sampling — MCMCquantreg","text":"formula Model formula. data Data frame. tau quantile interest. Must 0 1. default value 0.5 corresponds median regression. burnin number burn-iterations sampler. mcmc number MCMC iterations burnin. thin thinning interval used simulation.  number MCMC iterations must divisible value. verbose switch determines whether progress sampler printed screen.  verbose greater 0 iteration number recently sampled values \\(\\beta\\) \\(\\sigma\\) printed screen every verboseth iteration. seed seed random number generator. NA, Mersenne Twister generator used default seed 12345; integer passed used seed Mersenne twister. default value argument random integer 1 1,000,000. default value ensures function used different value \\(\\tau\\), extremely unlikely seed identical. user can also pass list length two use L'Ecuyer random number generator, suitable parallel computation.  first element list L'Ecuyer seed, vector length six NA (NA default seed rep(12345,6) used).  second element list positive substream number. See MCMCpack specification details. beta.start starting values \\(\\beta\\).  can either scalar column vector dimension equal dimension \\(\\beta\\).  default value NA use OLS estimate \\(\\hat{\\beta}\\) \\(\\hat{\\sigma}\\Phi^{-1}(\\tau)\\) added first element \\(\\hat{\\beta}\\) starting value. (\\(\\hat{\\sigma}^2\\) denotes usual unbiased estimator \\(\\sigma^2\\) ordinary mean regression \\(\\Phi^{-1}(\\tau)\\) denotes inverse cumulative density function standard normal distribution.)  Note default value assume intercept included model.  scalar given, value serve starting value \\(\\beta\\). b0 prior mean \\(\\beta\\).  can either scalar column vector dimension equal dimension \\(\\beta\\). takes scalar value, value serve prior mean \\(\\beta\\). B0 prior precision \\(\\beta\\).  can either scalar square matrix dimensions equal number betas.  takes scalar value, value times identity matrix serves prior precision \\(\\beta\\). Default value 0 equivalent improper uniform prior \\(\\beta\\). ... arguments passed","code":""},{"path":"/reference/MCMCquantreg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bayesian quantile regression using Gibbs sampling — MCMCquantreg","text":"mcmc object contains posterior sample.  object can summarised functions provided coda package.","code":""},{"path":"/reference/MCMCquantreg.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Bayesian quantile regression using Gibbs sampling — MCMCquantreg","text":"MCMCquantreg simulates posterior distribution using Gibbs sampling data augmentation (see http://people.brunel.ac.uk/~mastkky/).  \\(\\beta\\) drawn multivariate normal distribution. augmented data drawn conditionally inverse Gaussian distribution. simulation carried compiled C++ code maximise efficiency.  Please consult coda documentation comprehensive list functions can used analyse posterior sample. assume model $$Q_{\\tau}(y_i|x_i) = x_i'\\beta$$ \\(Q_{\\tau}(y_i|x_i)\\) denotes conditional \\(\\tau\\)th quantile \\(y_i\\) given \\(x_i\\), \\(\\beta=\\beta(\\tau)\\) regression parameters possibly dependent \\(\\tau\\). likelihood formed based assuming independent Asymmetric Laplace distributions \\(y_i\\) skewness parameter \\(\\tau\\) location parameters \\(x_i'\\beta\\). assumption ensures likelihood function maximised \\(\\tau\\)th conditional quantile response variable.  assume standard, semi-conjugate priors \\(\\beta\\): $$\\beta \\sim \\mathcal{N}(b_0,B_0^{-1})$$ starting values \\(\\beta\\) allowed sampler.","code":""},{"path":"/reference/MCMCquantreg.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Bayesian quantile regression using Gibbs sampling — MCMCquantreg","text":"Daniel Pemstein, Kevin M. Quinn, Andrew D. Martin.  2007. Scythe Statistical Library 1.2. http://scythe.lsa.umich.edu. Craig Reed Keming Yu. 2009. ``Efficient Gibbs Sampler Bayesian Quantile Regression.'' Technical Report. Keming Yu Jin Zhang. 2005. ``Three Parameter Asymmetric Laplace Distribution extensions.'' Communications Statistics - Theory Methods, 34, 1867-1879. Martyn Plummer, Nicky Best, Kate Cowles, Karen Vines. 2006.  ``Output Analysis Diagnostics MCMC (CODA)'', R News. 6(1): 7-11. https://CRAN.R-project.org/doc/Rnews/Rnews_2006-1.pdf.","code":""},{"path":[]},{"path":"/reference/MCMCquantreg.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Bayesian quantile regression using Gibbs sampling — MCMCquantreg","text":"Craig Reed","code":""},{"path":"/reference/MCMCquantreg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bayesian quantile regression using Gibbs sampling — MCMCquantreg","text":"","code":"if (FALSE) {  x<-rep(1:10,5) y<-rnorm(50,mean=x) posterior_50 <- MCMCquantreg(y~x) posterior_95 <- MCMCquantreg(y~x, tau=0.95, verbose=10000,     mcmc=50000, thin=10, seed=2) plot(posterior_50) plot(posterior_95) raftery.diag(posterior_50) autocorr.plot(posterior_95) summary(posterior_50) summary(posterior_95) }"},{"path":"/reference/MCMCregress.html","id":null,"dir":"Reference","previous_headings":"","what":"Markov Chain Monte Carlo for Gaussian Linear Regression — MCMCregress","title":"Markov Chain Monte Carlo for Gaussian Linear Regression — MCMCregress","text":"function generates sample posterior distribution linear regression model Gaussian errors using Gibbs sampling (multivariate Gaussian prior beta vector, inverse Gamma prior conditional error variance).  user supplies data priors, sample posterior distribution returned mcmc object, can subsequently analyzed functions provided coda package.","code":""},{"path":"/reference/MCMCregress.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Markov Chain Monte Carlo for Gaussian Linear Regression — MCMCregress","text":"","code":"MCMCregress(   formula,   data = NULL,   burnin = 1000,   mcmc = 10000,   thin = 1,   verbose = 0,   seed = NA,   beta.start = NA,   b0 = 0,   B0 = 0,   c0 = 0.001,   d0 = 0.001,   sigma.mu = NA,   sigma.var = NA,   marginal.likelihood = c(\"none\", \"Laplace\", \"Chib95\"),   ... )"},{"path":"/reference/MCMCregress.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Markov Chain Monte Carlo for Gaussian Linear Regression — MCMCregress","text":"formula Model formula. data Data frame. burnin number burn-iterations sampler. mcmc number MCMC iterations burnin. thin thinning interval used simulation.  number MCMC iterations must divisible value. verbose switch determines whether progress sampler printed screen.  verbose greater 0 iteration number, \\(\\beta\\) vector, error variance printed screen every verboseth iteration. seed seed random number generator.  NA, Mersenne Twister generator used default seed 12345; integer passed used seed Mersenne twister.  user can also pass list length two use L'Ecuyer random number generator, suitable parallel computation.  first element list L'Ecuyer seed, vector length six NA (NA default seed rep(12345,6) used).  second element list positive substream number. See MCMCpack specification details. beta.start starting values \\(\\beta\\) vector. can either scalar column vector dimension equal number betas.  default value NA use OLS estimate \\(\\beta\\) starting value.  scalar, value serve starting value mean betas. b0 prior mean \\(\\beta\\).  can either scalar column vector dimension equal number betas. takes scalar value, value serve prior mean betas. B0 prior precision \\(\\beta\\).  can either scalar square matrix dimensions equal number betas.  takes scalar value, value times identity matrix serves prior precision beta. Default value 0 equivalent improper uniform prior beta. c0 \\(c_0/2\\) shape parameter inverse Gamma prior \\(\\sigma^2\\) (variance disturbances). amount information inverse Gamma prior something like \\(c_0\\) pseudo-observations. d0 \\(d_0/2\\) scale parameter inverse Gamma prior \\(\\sigma^2\\) (variance disturbances). constructing inverse Gamma prior, \\(d_0\\) acts like sum squared errors \\(c_0\\) pseudo-observations. sigma.mu mean inverse Gamma prior \\(\\sigma^2\\).  \\(sigma.mu\\) \\(sigma.var\\) allow users choose inverse Gamma prior choosing mean variance. sigma.var variacne inverse Gamma prior \\(\\sigma^2\\).  \\(sigma.mu\\) \\(sigma.var\\) allow users choose inverse Gamma prior choosing mean variance. marginal.likelihood marginal likelihood calculated? Options : none case marginal likelihood calculated, Laplace case Laplace approximation (see Kass Raftery, 1995) used, Chib95 case method Chib (1995) used. ... arguments passed.","code":""},{"path":"/reference/MCMCregress.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Markov Chain Monte Carlo for Gaussian Linear Regression — MCMCregress","text":"mcmc object contains posterior sample.  object can summarized functions provided coda package.","code":""},{"path":"/reference/MCMCregress.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Markov Chain Monte Carlo for Gaussian Linear Regression — MCMCregress","text":"MCMCregress simulates posterior distribution using standard Gibbs sampling (multivariate Normal draw betas, inverse Gamma draw conditional error variance).  simulation proper done compiled C++ code maximize efficiency.  Please consult coda documentation comprehensive list functions can used analyze posterior sample. model takes following form: $$y_i = x_i ' \\beta + \\varepsilon_{}$$ errors assumed Gaussian: $$\\varepsilon_{} \\sim \\mathcal{N}(0, \\sigma^2)$$ assume standard, semi-conjugate priors: $$\\beta \\sim \\mathcal{N}(b_0,B_0^{-1})$$ : $$\\sigma^{-2} \\sim \\mathcal{G}amma(c_0/2, d_0/2)$$ \\(\\beta\\) \\(\\sigma^{-2}\\) assumed priori independent.  Note starting values \\(\\beta\\) allowed simulation done using Gibbs sampling conditional error variance first block sampler.","code":""},{"path":"/reference/MCMCregress.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Markov Chain Monte Carlo for Gaussian Linear Regression — MCMCregress","text":"Andrew D. Martin, Kevin M. Quinn, Jong Hee Park. 2011. ``MCMCpack: Markov Chain Monte Carlo R.'', Journal Statistical Software. 42(9): 1-21.  doi:10.18637/jss.v042.i09 . Siddhartha Chib. 1995. ``Marginal Likelihood Gibbs Output.'' Journal American Statistical Association. 90: 1313-1321. Robert E. Kass Adrian E. Raftery. 1995. ``Bayes Factors.'' Journal American Statistical Association. 90: 773-795. Daniel Pemstein, Kevin M. Quinn, Andrew D. Martin.  2007.  Scythe Statistical Library 1.0. http://scythe.lsa.umich.edu. Martyn Plummer, Nicky Best, Kate Cowles, Karen Vines. 2006.  ``Output Analysis Diagnostics MCMC (CODA)'', R News. 6(1): 7-11. https://CRAN.R-project.org/doc/Rnews/Rnews_2006-1.pdf.","code":""},{"path":[]},{"path":"/reference/MCMCregress.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Markov Chain Monte Carlo for Gaussian Linear Regression — MCMCregress","text":"","code":"if (FALSE) { line   <- list(X = c(-2,-1,0,1,2), Y = c(1,3,3,3,5)) posterior  <- MCMCregress(Y~X, b0=0, B0 = 0.1,         sigma.mu = 5, sigma.var = 25, data=line, verbose=1000) plot(posterior) raftery.diag(posterior) summary(posterior) }"},{"path":"/reference/MCMCregressChange.html","id":null,"dir":"Reference","previous_headings":"","what":"Markov Chain Monte Carlo for a linear Gaussian Multiple Changepoint Model — MCMCregressChange","title":"Markov Chain Monte Carlo for a linear Gaussian Multiple Changepoint Model — MCMCregressChange","text":"function generates sample posterior distribution linear Gaussian model multiple changepoints. function uses Markov chain Monte Carlo method Chib (1998).  user supplies data priors, sample posterior distribution returned mcmc object, can subsequently analyzed functions provided coda package.","code":""},{"path":"/reference/MCMCregressChange.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Markov Chain Monte Carlo for a linear Gaussian Multiple Changepoint Model — MCMCregressChange","text":"","code":"MCMCregressChange(   formula,   data = parent.frame(),   m = 1,   b0 = 0,   B0 = 0,   c0 = 0.001,   d0 = 0.001,   sigma.mu = NA,   sigma.var = NA,   a = NULL,   b = NULL,   mcmc = 1000,   burnin = 1000,   thin = 1,   verbose = 0,   seed = NA,   beta.start = NA,   P.start = NA,   random.perturb = FALSE,   WAIC = FALSE,   marginal.likelihood = c(\"none\", \"Chib95\"),   ... )"},{"path":"/reference/MCMCregressChange.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Markov Chain Monte Carlo for a linear Gaussian Multiple Changepoint Model — MCMCregressChange","text":"formula Model formula. data Data frame. m number changepoints. b0 prior mean \\(\\beta\\).  can either scalar column vector dimension equal number betas. takes scalar value, value serve prior mean betas. B0 prior precision \\(\\beta\\).  can either scalar square matrix dimensions equal number betas.  takes scalar value, value times identity matrix serves prior precision beta. Default value 0 equivalent improper uniform prior beta. c0 \\(c_0/2\\) shape parameter inverse Gamma prior \\(\\sigma^2\\) (variance disturbances). amount information inverse Gamma prior something like \\(c_0\\) pseudo-observations. d0 \\(d_0/2\\) scale parameter inverse Gamma prior \\(\\sigma^2\\) (variance disturbances). constructing inverse Gamma prior, \\(d_0\\) acts like sum squared errors \\(c_0\\) pseudo-observations. sigma.mu mean inverse Gamma prior \\(\\sigma^2\\).  \\(sigma.mu\\) \\(sigma.var\\) allow users choose inverse Gamma prior choosing mean variance. sigma.var variacne inverse Gamma prior \\(\\sigma^2\\).  \\(sigma.mu\\) \\(sigma.var\\) allow users choose inverse Gamma prior choosing mean variance. \\(\\) shape1 beta prior transition probabilities. default, expected duration computed corresponding b values assigned. expected duration sample period divided number states. b \\(b\\) shape2 beta prior transition probabilities. default, expected duration computed corresponding b values assigned. expected duration sample period divided number states. mcmc number MCMC iterations burnin. burnin number burn-iterations sampler. thin thinning interval used simulation.  number MCMC iterations must divisible value. verbose switch determines whether progress sampler printed screen.  verbose greater 0 iteration number, \\(\\beta\\) vector, error variance printed screen every verboseth iteration. seed seed random number generator.  NA, Mersenne Twister generator used default seed 12345; integer passed used seed Mersenne twister.  user can also pass list length two use L'Ecuyer random number generator, suitable parallel computation.  first element list L'Ecuyer seed, vector length six NA (NA default seed rep(12345,6) used).  second element list positive substream number. See MCMCpack specification details. beta.start starting values \\(\\beta\\) vector. can either scalar column vector dimension equal number betas.  default value NA use MLE estimate \\(\\beta\\) starting value.  scalar, value serve starting value mean betas. P.start starting values transition matrix.  user provide square matrix dimension equal number states.  default, draws Beta(0.9, 0.1) used construct proper transition matrix raw except last raw. random.perturb TRUE, randomly sample hidden states whenever regularly sampled hidden states least one single observation state (SOS). SOS sign overfitting non-ergodic hidden Markov models. WAIC Compute Widely Applicable Information Criterion (Watanabe 2010). marginal.likelihood marginal likelihood calculated? Options : none case marginal likelihood calculated, Chib95 case method Chib (1995) used. ... arguments passed","code":""},{"path":"/reference/MCMCregressChange.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Markov Chain Monte Carlo for a linear Gaussian Multiple Changepoint Model — MCMCregressChange","text":"mcmc object contains posterior sample.  object can summarized functions provided coda package.  object contains attribute prob.state storage matrix contains probability \\(state_i\\) period, log-likelihood model (loglike), log-marginal likelihood model (logmarglike).","code":""},{"path":"/reference/MCMCregressChange.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Markov Chain Monte Carlo for a linear Gaussian Multiple Changepoint Model — MCMCregressChange","text":"MCMCregressChange simulates posterior distribution linear regression model multiple changepoints. model takes following form: $$y_t=x_t ' \\beta_i + (s_t=)\\varepsilon_{t},\\;\\; =1, \\ldots, k$$ \\(k\\) number states \\((s_t=)\\) indicator function becomes 1 state \\(t\\) \\(\\) otherwise 0. errors assumed Gaussian regime: $$(s_t=)\\varepsilon_{t} \\sim \\mathcal{N}(0, \\sigma^2_i)$$ assume standard, semi-conjugate priors: $$\\beta_i \\sim \\mathcal{N}(b_0,B_0^{-1}),\\;\\; =1, \\ldots, k$$ : $$\\sigma^{-2}_i \\sim \\mathcal{G}amma(c_0/2, d_0/2),\\;\\; =1, \\ldots, k$$ \\(\\beta_i\\) \\(\\sigma^{-2}_i\\) assumed priori independent. simulation proper done compiled C++ code maximize efficiency.","code":""},{"path":"/reference/MCMCregressChange.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Markov Chain Monte Carlo for a linear Gaussian Multiple Changepoint Model — MCMCregressChange","text":"Jong Hee Park, 2012. ``Unified Method Dynamic   Cross-Sectional Heterogeneity: Introducing Hidden Markov Panel   Models.''  American Journal Political Science.56:   1040-1054. <doi: 10.1111/j.1540-5907.2012.00590.x> Sumio Watanabe. 2010. \"Asymptotic equivalence Bayes cross validation widely applicable information criterion singular learning theory\" Journal Machine Learning Research. 11: 3571-3594. Siddhartha Chib. 1995. \"Marginal Likelihood Gibbs Output.\" Journal American Statistical Association. 90: 1313-1321. <doi: 10.1016/S0304-4076(97)00115-2> Siddhartha Chib. 1998. \"Estimation comparison multiple change-point models.\"  Journal Econometrics. 86: 221-241. <doi: 10.1080/01621459.1995.10476635> Andrew D. Martin, Kevin M. Quinn, Jong Hee Park. 2011. ``MCMCpack: Markov Chain Monte Carlo R.'', Journal Statistical Software.  42(9): 1-21. doi:10.18637/jss.v042.i09 .","code":""},{"path":[]},{"path":"/reference/MCMCregressChange.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Markov Chain Monte Carlo for a linear Gaussian Multiple Changepoint Model — MCMCregressChange","text":"","code":"if (FALSE) { set.seed(1119) n <- 100 x1 <- runif(n) true.beta1 <- c(2, -2) true.beta2 <- c(0,  2) true.Sigma <- c(1, 2) true.s <- rep(1:2, each=n/2)  mu1 <- cbind(1, x1[true.s==1])%*%true.beta1 mu2 <- cbind(1, x1[true.s==2])%*%true.beta2  y <- as.ts(c(rnorm(n/2, mu1, sd=sqrt(true.Sigma[1])), rnorm(n/2, mu2, sd=sqrt(true.Sigma[2])))) formula=y ~ x1  ols1 <- lm(y[true.s==1] ~x1[true.s==1]) ols2 <- lm(y[true.s==2] ~x1[true.s==2])  ## prior b0 <- 0 B0 <- 0.1 sigma.mu=sd(y) sigma.var=var(y)  ## models model0 <-  MCMCregressChange(formula, m=0, b0=b0, B0=B0, mcmc=100, burnin=100,            sigma.mu=sigma.mu, sigma.var=sigma.var, marginal.likelihood=\"Chib95\") model1 <-  MCMCregressChange(formula, m=1, b0=b0, B0=B0, mcmc=100, burnin=100,            sigma.mu=sigma.mu, sigma.var=sigma.var, marginal.likelihood=\"Chib95\") model2 <-  MCMCregressChange(formula, m=2, b0=b0, B0=B0, mcmc=100, burnin=100,            sigma.mu=sigma.mu, sigma.var=sigma.var, marginal.likelihood=\"Chib95\") model3 <-  MCMCregressChange(formula, m=3, b0=b0, B0=B0, mcmc=100, burnin=100,            sigma.mu=sigma.mu, sigma.var=sigma.var, marginal.likelihood=\"Chib95\") model4 <-  MCMCregressChange(formula, m=4, b0=b0, B0=B0, mcmc=100, burnin=100,            sigma.mu=sigma.mu, sigma.var=sigma.var, marginal.likelihood=\"Chib95\") model5 <-  MCMCregressChange(formula, m=5, b0=b0, B0=B0, mcmc=100, burnin=100,            sigma.mu=sigma.mu, sigma.var=sigma.var, marginal.likelihood=\"Chib95\")  print(BayesFactor(model0, model1, model2, model3, model4, model5)) plotState(model1) plotChangepoint(model1)  }"},{"path":"/reference/MCMCresidualBreakAnalysis.html","id":null,"dir":"Reference","previous_headings":"","what":"Break Analysis of Univariate Time Series using Markov Chain Monte Carlo — MCMCresidualBreakAnalysis","title":"Break Analysis of Univariate Time Series using Markov Chain Monte Carlo — MCMCresidualBreakAnalysis","text":"function performs break analysis univariate time series data using linear Gaussian changepoint model. code written mainly internal use testpanelSubjectBreak.","code":""},{"path":"/reference/MCMCresidualBreakAnalysis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Break Analysis of Univariate Time Series using Markov Chain Monte Carlo — MCMCresidualBreakAnalysis","text":"","code":"MCMCresidualBreakAnalysis(   resid,   m = 1,   b0 = 0,   B0 = 0.001,   c0 = 0.1,   d0 = 0.1,   a = NULL,   b = NULL,   mcmc = 1000,   burnin = 1000,   thin = 1,   verbose = 0,   seed = NA,   beta.start = NA,   P.start = NA,   random.perturb = FALSE,   WAIC = FALSE,   marginal.likelihood = c(\"none\", \"Chib95\"),   ... )"},{"path":"/reference/MCMCresidualBreakAnalysis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Break Analysis of Univariate Time Series using Markov Chain Monte Carlo — MCMCresidualBreakAnalysis","text":"resid Univariate time series m number breaks. b0 prior mean \\(\\beta\\).  can either scalar column vector dimension equal number betas. takes scalar value, value serve prior mean betas. B0 prior precision \\(\\beta\\).  can either scalar square matrix dimensions equal number betas.  takes scalar value, value times identity matrix serves prior precision beta. Default value 0 equivalent improper uniform prior beta. c0 \\(c_0/2\\) shape parameter inverse Gamma prior \\(\\sigma^2\\) (variance disturbances). amount information inverse Gamma prior something like \\(c_0\\) pseudo-observations. d0 \\(d_0/2\\) scale parameter inverse Gamma prior \\(\\sigma^2\\) (variance disturbances). constructing inverse Gamma prior, \\(d_0\\) acts like sum squared errors \\(c_0\\) pseudo-observations. \\(\\) shape1 beta prior transition probabilities. default, expected duration computed corresponding b values assigned. expected duration sample period divided number states. b \\(b\\) shape2 beta prior transition probabilities. default, expected duration computed corresponding b values assigned. expected duration sample period divided number states. mcmc number MCMC iterations burnin. burnin number burn-iterations sampler. thin thinning interval used simulation.  number MCMC iterations must divisible value. verbose switch determines whether progress sampler printed screen.  verbose greater 0 iteration number, \\(\\beta\\) vector, error variance printed screen every verboseth iteration. seed seed random number generator.  NA, Mersenne Twister generator used default seed 12345; integer passed used seed Mersenne twister.  user can also pass list length two use L'Ecuyer random number generator, suitable parallel computation.  first element list L'Ecuyer seed, vector length six NA (NA default seed rep(12345,6) used).  second element list positive substream number. See MCMCpack specification details. beta.start starting values \\(\\beta\\) vector. can either scalar column vector dimension equal number betas.  default value NA use OLS estimate \\(\\beta\\) starting value.  scalar, value serve starting value mean betas. P.start starting values transition matrix.  user provide square matrix dimension equal number states.  default, draws Beta(0.9, 0.1) used construct proper transition matrix raw except last raw. random.perturb TRUE, randomly sample hidden states whenever regularly sampled hidden states least one single observation state. one method avoid overfitting non-ergodic hidden Markov models. See Park Sohn (2017). WAIC Compute Widely Applicable Information Criterion (Watanabe 2010). marginal.likelihood marginal likelihood calculated? Options : none case marginal likelihood calculated, Chib95 case method Chib (1995) used. ... arguments passed","code":""},{"path":"/reference/MCMCresidualBreakAnalysis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Break Analysis of Univariate Time Series using Markov Chain Monte Carlo — MCMCresidualBreakAnalysis","text":"mcmc object contains posterior sample.  object can summarized functions provided coda package.","code":""},{"path":"/reference/MCMCresidualBreakAnalysis.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Break Analysis of Univariate Time Series using Markov Chain Monte Carlo — MCMCresidualBreakAnalysis","text":"MCMCresidualBreakAnalysis simulates posterior distribution using standard Gibbs sampling (multivariate Normal draw betas, inverse Gamma draw conditional error variance).  simulation proper done compiled C++ code maximize efficiency.  Please consult coda documentation comprehensive list functions can used analyze posterior sample. model takes following form: $$y_{} \\sim \\mathcal{N}(\\beta_{m}, \\sigma^2_{m}) \\;\\; m = 1, \\ldots, M$$ assume standard, semi-conjugate priors: $$\\beta \\sim \\mathcal{N}(b_0,B_0^{-1})$$ : $$\\sigma^{-2} \\sim \\mathcal{G}amma(c_0/2, d_0/2)$$ \\(\\beta\\) \\(\\sigma^{-2}\\) assumed priori independent. : $$p_{mm} \\sim \\mathcal{B}eta(, b),\\;\\; m = 1, \\ldots, M$$ \\(M\\) number states.","code":""},{"path":"/reference/MCMCresidualBreakAnalysis.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Break Analysis of Univariate Time Series using Markov Chain Monte Carlo — MCMCresidualBreakAnalysis","text":"Jong Hee Park Yunkyu Sohn. 2017. \"Detecting Structural Changes Network Data: Application Changes Military Alliance Networks, 1816-2012\".  Working Paper. Jong Hee Park, 2012. ``Unified Method Dynamic Cross-Sectional Heterogeneity: Introducing Hidden Markov Panel Models.'' American Journal Political Science.56: 1040-1054. <doi: 10.1111/j.1540-5907.2012.00590.x> Sumio Watanabe. 2010. \"Asymptotic equivalence Bayes cross validation widely applicable information criterion singular learning theory\" Journal Machine Learning Research. 11: 3571-3594. Siddhartha Chib. 1995. \"Marginal Likelihood Gibbs Output.\" Journal American Statistical Association. 90: 1313-1321. <doi: 10.1016/S0304-4076(97)00115-2> Siddhartha Chib. 1998. \"Estimation comparison multiple change-point models.\"  Journal Econometrics. 86: 221-241.  <doi: 10.1080/01621459.1995.10476635>","code":""},{"path":[]},{"path":"/reference/MCMCresidualBreakAnalysis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Break Analysis of Univariate Time Series using Markov Chain Monte Carlo — MCMCresidualBreakAnalysis","text":"","code":"if (FALSE) { line   <- list(X = c(-2,-1,0,1,2), Y = c(1,3,3,3,5)) ols <- lm(Y~X) residual <-   rstandard(ols) posterior  <- MCMCresidualBreakAnalysis(residual, m = 1, data=line, mcmc=1000, verbose=200) plotState(posterior) summary(posterior) }"},{"path":"/reference/MCMCtobit.html","id":null,"dir":"Reference","previous_headings":"","what":"Markov Chain Monte Carlo for Gaussian Linear Regression with a Censored\nDependent Variable — MCMCtobit","title":"Markov Chain Monte Carlo for Gaussian Linear Regression with a Censored\nDependent Variable — MCMCtobit","text":"function generates sample posterior distribution linear regression model Gaussian errors using Gibbs sampling (multivariate Gaussian prior beta vector, inverse Gamma prior conditional error variance).  dependent variable may censored , , . user supplies data priors, sample posterior distribution returned mcmc object, can subsequently analyzed functions provided coda package.","code":""},{"path":"/reference/MCMCtobit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Markov Chain Monte Carlo for Gaussian Linear Regression with a Censored\nDependent Variable — MCMCtobit","text":"","code":"MCMCtobit(   formula,   data = NULL,   below = 0,   above = Inf,   burnin = 1000,   mcmc = 10000,   thin = 1,   verbose = 0,   seed = NA,   beta.start = NA,   b0 = 0,   B0 = 0,   c0 = 0.001,   d0 = 0.001,   ... )"},{"path":"/reference/MCMCtobit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Markov Chain Monte Carlo for Gaussian Linear Regression with a Censored\nDependent Variable — MCMCtobit","text":"formula model formula. data dataframe. point dependent variable censored . default zero. censor , specify = -Inf. point dependent variable censored . censor , use default value Inf. burnin number burn-iterations sampler. mcmc number MCMC iterations burnin. thin thinning interval used simulation.  number MCMC iterations must divisible value. verbose switch determines whether progress sampler printed screen.  verbose greater 0 iteration number, \\(\\beta\\) vector, error variance printed screen every verboseth iteration. seed seed random number generator.  NA, Mersenne Twister generator used default seed 12345; integer passed used seed Mersenne twister.  user can also pass list length two use L'Ecuyer random number generator, suitable parallel computation.  first element list L'Ecuyer seed, vector length six NA (NA default seed rep(12345,6) used).  second element list positive substream number. See MCMCpack specification details. beta.start starting values \\(\\beta\\) vector. can either scalar column vector dimension equal number betas. default value NA use OLS estimate \\(\\beta\\) starting value.  scalar, value serve starting value mean betas. b0 prior mean \\(\\beta\\).  can either scalar column vector dimension equal number betas. takes scalar value, value serve prior mean betas. B0 prior precision \\(\\beta\\).  can either scalar square matrix dimensions equal number betas.  takes scalar value, value times identity matrix serves prior precision beta. Default value 0 equivalent improper uniform prior beta. c0 \\(c_0/2\\) shape parameter inverse Gamma prior \\(\\sigma^2\\) (variance disturbances). amount information inverse Gamma prior something like \\(c_0\\) pseudo-observations. d0 \\(d_0/2\\) scale parameter inverse Gamma prior \\(\\sigma^2\\) (variance disturbances). constructing inverse Gamma prior, \\(d_0\\) acts like sum squared errors \\(c_0\\) pseudo-observations. ... arguments passed","code":""},{"path":"/reference/MCMCtobit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Markov Chain Monte Carlo for Gaussian Linear Regression with a Censored\nDependent Variable — MCMCtobit","text":"mcmc object contains posterior sample.  object can summarized functions provided coda package.","code":""},{"path":"/reference/MCMCtobit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Markov Chain Monte Carlo for Gaussian Linear Regression with a Censored\nDependent Variable — MCMCtobit","text":"MCMCtobit simulates posterior distribution using standard Gibbs sampling (multivariate Normal draw betas, inverse Gamma draw conditional error variance). MCMCtobit differs MCMCregress dependent variable may censored , , . simulation proper done compiled C++ code maximize efficiency.  Please consult coda documentation comprehensive list functions can used analyze posterior sample. model takes following form: $$y_i = x_i ' \\beta + \\varepsilon_{},$$ errors assumed Gaussian: $$\\varepsilon_{} \\sim \\mathcal{N}(0, \\sigma^2).$$ Let \\(c_1\\) \\(c_2\\) two censoring points, let \\(y_i^\\ast\\) partially observed dependent variable. , $$y_i = y_i^{\\ast} \\texttt{ } c_1 < y_i^{\\ast} < c_2,$$ $$y_i = c_1 \\texttt{ } c_1 \\geq y_i^{\\ast},$$ $$y_i = c_2 \\texttt{ } c_2 \\leq y_i^{\\ast}.$$ assume standard, semi-conjugate priors: $$\\beta \\sim \\mathcal{N}(b_0,B_0^{-1}),$$ : $$\\sigma^{-2} \\sim \\mathcal{G}amma(c_0/2, d_0/2),$$ \\(\\beta\\) \\(\\sigma^{-2}\\) assumed priori independent.  Note starting values \\(\\beta\\) allowed simulation done using Gibbs sampling conditional error variance first block sampler.","code":""},{"path":"/reference/MCMCtobit.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Markov Chain Monte Carlo for Gaussian Linear Regression with a Censored\nDependent Variable — MCMCtobit","text":"Andrew D. Martin, Kevin M. Quinn, Jong Hee Park. 2011. ``MCMCpack: Markov Chain Monte Carlo R.'', Journal Statistical Software. 42(9): 1-21.  doi:10.18637/jss.v042.i09 . Daniel Pemstein, Kevin M. Quinn, Andrew D. Martin.  2007.  Scythe Statistical Library 1.0. http://scythe.lsa.umich.edu. Martyn Plummer, Nicky Best, Kate Cowles, Karen Vines. 2006.  ``Output Analysis Diagnostics MCMC (CODA)'', R News. 6(1): 7-11. https://CRAN.R-project.org/doc/Rnews/Rnews_2006-1.pdf. Siddhartha Chib. 1992. ``Bayes inference Tobit censored regression model.\"  Journal Econometrics. 51:79-99. James Tobin. 1958. ``Estimation relationships limited dependent variables.\" Econometrica. 26:24-36.","code":""},{"path":[]},{"path":"/reference/MCMCtobit.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Markov Chain Monte Carlo for Gaussian Linear Regression with a Censored\nDependent Variable — MCMCtobit","text":"Ben Goodrich, goodrich.ben@gmail.com, http://www.columbia.edu/~bg2382/","code":""},{"path":"/reference/MCMCtobit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Markov Chain Monte Carlo for Gaussian Linear Regression with a Censored\nDependent Variable — MCMCtobit","text":"","code":"if (FALSE) { library(survival) example(tobin) summary(tfit) tfit.mcmc <- MCMCtobit(durable ~ age + quant, data=tobin, mcmc=30000,                         verbose=1000) plot(tfit.mcmc) raftery.diag(tfit.mcmc) summary(tfit.mcmc) }"},{"path":"/reference/MCbinomialbeta.html","id":null,"dir":"Reference","previous_headings":"","what":"Monte Carlo Simulation from a Binomial Likelihood with a Beta Prior — MCbinomialbeta","title":"Monte Carlo Simulation from a Binomial Likelihood with a Beta Prior — MCbinomialbeta","text":"function generates sample posterior distribution binomial likelihood Beta prior.","code":""},{"path":"/reference/MCbinomialbeta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Monte Carlo Simulation from a Binomial Likelihood with a Beta Prior — MCbinomialbeta","text":"","code":"MCbinomialbeta(y, n, alpha = 1, beta = 1, mc = 1000, ...)"},{"path":"/reference/MCbinomialbeta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Monte Carlo Simulation from a Binomial Likelihood with a Beta Prior — MCbinomialbeta","text":"y number successes independent Bernoulli trials. n number independent Bernoulli trials. alpha Beta prior distribution alpha parameter. beta Beta prior distribution beta parameter. mc number Monte Carlo draws make. ... arguments passed","code":""},{"path":"/reference/MCbinomialbeta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Monte Carlo Simulation from a Binomial Likelihood with a Beta Prior — MCbinomialbeta","text":"mcmc object contains posterior sample.  object can summarized functions provided coda package.","code":""},{"path":"/reference/MCbinomialbeta.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Monte Carlo Simulation from a Binomial Likelihood with a Beta Prior — MCbinomialbeta","text":"MCbinomialbeta directly simulates posterior distribution. model designed primarily instructional use.  \\(\\pi\\) probability success independent Bernoulli trial.  assume conjugate Beta prior: $$\\pi \\sim \\mathcal{B}eta(\\alpha, \\beta)$$ \\(y\\) number successes \\(n\\) trials.  default, uniform prior used.","code":""},{"path":[]},{"path":"/reference/MCbinomialbeta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Monte Carlo Simulation from a Binomial Likelihood with a Beta Prior — MCbinomialbeta","text":"","code":"if (FALSE) { posterior <- MCbinomialbeta(3,12,mc=5000) summary(posterior) plot(posterior) grid <- seq(0,1,0.01) plot(grid, dbeta(grid, 1, 1), type=\"l\", col=\"red\", lwd=3, ylim=c(0,3.6),   xlab=\"pi\", ylab=\"density\") lines(density(posterior), col=\"blue\", lwd=3) legend(.75, 3.6, c(\"prior\", \"posterior\"), lwd=3, col=c(\"red\", \"blue\")) }"},{"path":"/reference/MCmultinomdirichlet.html","id":null,"dir":"Reference","previous_headings":"","what":"Monte Carlo Simulation from a Multinomial Likelihood with a Dirichlet Prior — MCmultinomdirichlet","title":"Monte Carlo Simulation from a Multinomial Likelihood with a Dirichlet Prior — MCmultinomdirichlet","text":"function generates sample posterior distribution multinomial likelihood Dirichlet prior.","code":""},{"path":"/reference/MCmultinomdirichlet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Monte Carlo Simulation from a Multinomial Likelihood with a Dirichlet Prior — MCmultinomdirichlet","text":"","code":"MCmultinomdirichlet(y, alpha0, mc = 1000, ...)"},{"path":"/reference/MCmultinomdirichlet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Monte Carlo Simulation from a Multinomial Likelihood with a Dirichlet Prior — MCmultinomdirichlet","text":"y vector data (number successes category). alpha0 vector parameters Dirichlet prior. mc number Monte Carlo draws make. ... arguments passed","code":""},{"path":"/reference/MCmultinomdirichlet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Monte Carlo Simulation from a Multinomial Likelihood with a Dirichlet Prior — MCmultinomdirichlet","text":"mcmc object contains posterior sample.  object can summarized functions provided coda package.","code":""},{"path":"/reference/MCmultinomdirichlet.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Monte Carlo Simulation from a Multinomial Likelihood with a Dirichlet Prior — MCmultinomdirichlet","text":"MCmultinomdirichlet directly simulates posterior distribution.  model designed primarily instructional use. \\(\\pi\\) parameter interest multinomial distribution. dimension \\((d \\times 1)\\). assume conjugate Dirichlet prior: $$\\pi \\sim \\mathcal{D}irichlet(\\alpha_0)$$ \\(y\\) \\((d \\times 1)\\) vector observed data.","code":""},{"path":[]},{"path":"/reference/MCmultinomdirichlet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Monte Carlo Simulation from a Multinomial Likelihood with a Dirichlet Prior — MCmultinomdirichlet","text":"","code":"if (FALSE) { ## Example from Gelman, et. al. (1995, p. 78) posterior <- MCmultinomdirichlet(c(727,583,137), c(1,1,1), mc=10000) bush.dukakis.diff <- posterior[,1] - posterior[,2] cat(\"Pr(Bush > Dukakis): \",    sum(bush.dukakis.diff > 0) / length(bush.dukakis.diff), \"\\n\") hist(bush.dukakis.diff) }"},{"path":"/reference/MCnormalnormal.html","id":null,"dir":"Reference","previous_headings":"","what":"Monte Carlo Simulation from a Normal Likelihood (with known variance) with a\nNormal Prior — MCnormalnormal","title":"Monte Carlo Simulation from a Normal Likelihood (with known variance) with a\nNormal Prior — MCnormalnormal","text":"function generates sample posterior distribution Normal likelihood (known variance) Normal prior.","code":""},{"path":"/reference/MCnormalnormal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Monte Carlo Simulation from a Normal Likelihood (with known variance) with a\nNormal Prior — MCnormalnormal","text":"","code":"MCnormalnormal(y, sigma2, mu0, tau20, mc = 1000, ...)"},{"path":"/reference/MCnormalnormal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Monte Carlo Simulation from a Normal Likelihood (with known variance) with a\nNormal Prior — MCnormalnormal","text":"y data. sigma2 known variance y. mu0 prior mean mu. tau20 prior variance mu. mc number Monte Carlo draws make. ... arguments passed","code":""},{"path":"/reference/MCnormalnormal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Monte Carlo Simulation from a Normal Likelihood (with known variance) with a\nNormal Prior — MCnormalnormal","text":"mcmc object contains posterior sample.  object can summarized functions provided coda package.","code":""},{"path":"/reference/MCnormalnormal.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Monte Carlo Simulation from a Normal Likelihood (with known variance) with a\nNormal Prior — MCnormalnormal","text":"MCnormalnormal directly simulates posterior distribution. model designed primarily instructional use.  \\(\\mu\\) parameter interest Normal distribution.  assume conjugate normal prior: $$\\mu \\sim \\mathcal{N}(\\mu_0, \\tau^2_0)$$ \\(y\\) vector observed data.","code":""},{"path":[]},{"path":"/reference/MCnormalnormal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Monte Carlo Simulation from a Normal Likelihood (with known variance) with a\nNormal Prior — MCnormalnormal","text":"","code":"if (FALSE) { y <- c(2.65, 1.80, 2.29, 2.11, 2.27, 2.61, 2.49, 0.96, 1.72, 2.40) posterior <- MCMCpack:::MCnormalnormal(y, 1, 0, 1, 5000) summary(posterior) plot(posterior) grid <- seq(-3,3,0.01) plot(grid, dnorm(grid, 0, 1), type=\"l\", col=\"red\", lwd=3, ylim=c(0,1.4),    xlab=\"mu\", ylab=\"density\") lines(density(posterior), col=\"blue\", lwd=3) legend(-3, 1.4, c(\"prior\", \"posterior\"), lwd=3, col=c(\"red\", \"blue\")) }"},{"path":"/reference/MCpoissongamma.html","id":null,"dir":"Reference","previous_headings":"","what":"Monte Carlo Simulation from a Poisson Likelihood with a Gamma Prior — MCpoissongamma","title":"Monte Carlo Simulation from a Poisson Likelihood with a Gamma Prior — MCpoissongamma","text":"function generates sample posterior distribution Poisson likelihood Gamma prior.","code":""},{"path":"/reference/MCpoissongamma.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Monte Carlo Simulation from a Poisson Likelihood with a Gamma Prior — MCpoissongamma","text":"","code":"MCpoissongamma(y, alpha, beta, mc = 1000, ...)"},{"path":"/reference/MCpoissongamma.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Monte Carlo Simulation from a Poisson Likelihood with a Gamma Prior — MCpoissongamma","text":"y vector counts (must non-negative). alpha Gamma prior distribution shape parameter. beta Gamma prior distribution scale parameter. mc number Monte Carlo draws make. ... arguments passed","code":""},{"path":"/reference/MCpoissongamma.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Monte Carlo Simulation from a Poisson Likelihood with a Gamma Prior — MCpoissongamma","text":"mcmc object contains posterior sample.  object can summarized functions provided coda package.","code":""},{"path":"/reference/MCpoissongamma.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Monte Carlo Simulation from a Poisson Likelihood with a Gamma Prior — MCpoissongamma","text":"MCpoissongamma directly simulates posterior distribution. model designed primarily instructional use. \\(\\lambda\\) parameter interest Poisson distribution.  assume conjugate Gamma prior: $$\\lambda \\sim \\mathcal{G}amma(\\alpha, \\beta)$$ \\(y\\) vector counts.","code":""},{"path":[]},{"path":"/reference/MCpoissongamma.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Monte Carlo Simulation from a Poisson Likelihood with a Gamma Prior — MCpoissongamma","text":"","code":"if (FALSE) { data(quine) posterior <- MCpoissongamma(quine$Days, 15, 1, 5000) summary(posterior) plot(posterior) grid <- seq(14,18,0.01) plot(grid, dgamma(grid, 15, 1), type=\"l\", col=\"red\", lwd=3, ylim=c(0,1.3),   xlab=\"lambda\", ylab=\"density\") lines(density(posterior), col=\"blue\", lwd=3) legend(17, 1.3, c(\"prior\", \"posterior\"), lwd=3, col=c(\"red\", \"blue\")) }"},{"path":"/reference/Nethvote.html","id":null,"dir":"Reference","previous_headings":"","what":"Dutch Voting Behavior in 1989 — Nethvote","title":"Dutch Voting Behavior in 1989 — Nethvote","text":"Dutch Voting Behavior 1989.","code":""},{"path":"/reference/Nethvote.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Dutch Voting Behavior in 1989 — Nethvote","text":"data frame 1754 observations 11 variables 1989 Dutch Parliamentary Election Study (Anker Oppenhuis, 1993). observation survey respondent.  data subset one five multiply imputed datasets used Quinn Martin (2002). information see Quinn Martin (2002). vote factor giving self-reported vote choice respondent.     levels CDA (Christen Democratisch Appel), D66 (Democraten 66), Pvda     (Partij van de Arbeid), VVD (Volkspartij voor Vrijheid en Democratie). distD66 numeric variable giving squared ideological distance     respondent D66. Larger values indicate ideological     dissimilarity respondent party. distPvdA numeric variable giving squared ideological distance     respondent PvdA. Larger values indicate ideological     dissimilarity respondent party. distVVD numeric variable giving squared ideological distance     respondent VVD. Larger values indicate ideological dissimilarity     respondent party. distCDA numeric variable giving squared ideological     distance respondent CDA. Larger values indicate     ideological dissimilarity respondent party. relig indicator variable equal 0 respondent     religious 1 respondent religious. class Social class respondent. 0 lowest social class,     4 highest social class. income Income respondent. 0 lowest 6 highest. educ Education respondent. 0 lowest 4 highest. age Age category respondent. 0 lowest 12 highest. urban Indicator variable equal 0 respondent     resident urban area 1 respondent resident urban     area.","code":""},{"path":"/reference/Nethvote.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Dutch Voting Behavior in 1989 — Nethvote","text":"H. Anker E.V. Oppenhuis. 1993. ``Dutch Parliamentary Election Study.'' (computer file). Dutch Electoral Research Foundation Netherlands Central Bureau Statistics, Amsterdam.","code":""},{"path":"/reference/Nethvote.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Dutch Voting Behavior in 1989 — Nethvote","text":"Kevin M. Quinn Andrew D. Martin. 2002. ``Integrated Computational Model Multiparty Electoral Competition.'' Statistical Science. 17: 405-419.","code":""},{"path":"/reference/NoncenHypergeom.html","id":null,"dir":"Reference","previous_headings":"","what":"The Noncentral Hypergeometric Distribution — NoncenHypergeom","title":"The Noncentral Hypergeometric Distribution — NoncenHypergeom","text":"Evaluates density single point points, generate random draws Noncentral Hypergeometric distribution.","code":""},{"path":"/reference/NoncenHypergeom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Noncentral Hypergeometric Distribution — NoncenHypergeom","text":"","code":"dnoncenhypergeom(x = NA, n1, n2, m1, psi)  rnoncenhypergeom(n, n1, n2, m1, psi)"},{"path":"/reference/NoncenHypergeom.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"The Noncentral Hypergeometric Distribution — NoncenHypergeom","text":"J. G. Liao Ori Rosen. 2001. ``Fast Stable Algorithms Computing Sampling Noncentral Hypergeometric Distribution.\" American Statistician. 55: 366-369.","code":""},{"path":"/reference/NoncenHypergeom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Noncentral Hypergeometric Distribution — NoncenHypergeom","text":"x location evaluate density.  x NA, matrix returned density evaluated possible points. n1 size group one. n2 size group two. m1 observed number positive outcomes (groups). psi Odds ratio. n number draws make distribution.","code":""},{"path":"/reference/NoncenHypergeom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Noncentral Hypergeometric Distribution — NoncenHypergeom","text":"dnoncenhypergeom evaluates density point x, matrix first column containing possible values random variable, second column containing probabilities. rnoncenhypergeom returns list n random draws distribution.","code":""},{"path":"/reference/NoncenHypergeom.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Noncentral Hypergeometric Distribution — NoncenHypergeom","text":"Noncentral Hypergeometric particularly useful conditional inference \\((2 \\times 2)\\) tables.  use parameterization algorithms Liao Rosen (2001).  underlying R code based published code.  See article details parameterization.","code":""},{"path":"/reference/NoncenHypergeom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Noncentral Hypergeometric Distribution — NoncenHypergeom","text":"","code":"density <- dnoncenhypergeom(NA, 500, 500, 500, 6.0)   draws <- rnoncenhypergeom(10, 500, 500, 500, 6.0)"},{"path":"/reference/PErisk.html","id":null,"dir":"Reference","previous_headings":"","what":"Political Economic Risk Data from 62 Countries in 1987 — PErisk","title":"Political Economic Risk Data from 62 Countries in 1987 — PErisk","text":"Political Economic Risk Data 62 Countries 1987.","code":""},{"path":"/reference/PErisk.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Political Economic Risk Data from 62 Countries in 1987 — PErisk","text":"data frame 62 observations following 9 variables. data points 1987. See Quinn (2004) details. country factor levels Argentina     Zimbabwe courts ordered factor levels 0 <     1.courts indicator whether country question     judged independent judiciary. Henisz (2002). barb2 numeric vector giving natural log black market     premium country. black market premium coded black market     exchange rate (local currency per dollar) divided official exchange rate     minus 1. Marshall, Gurr, Harff (2002). prsexp2 ordered factor     levels 0 < 1 < 2 < 3 < 4 < 5,     giving lack expropriation risk. Marshall, Gurr, Harff     (2002). prscorr2 ordered factor levels 0 < 1 <     2 < 3 < 4 < 5, measuring lack corruption.     Marshall, Gurr, Harff (2002). gdpw2 numeric vector giving natural log real GDP per worker    1985 international prices. Alvarez et al. (1999).","code":""},{"path":"/reference/PErisk.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Political Economic Risk Data from 62 Countries in 1987 — PErisk","text":"Mike Alvarez, Jose Antonio Cheibub, Fernando Limongi, Adam Przeworski. 1999. ``ACLP Political Economic Database.'' Witold J. Henisz. 2002. ``Political Constraint Index (POLCON) Dataset.'' Monty G. Marshall, Ted Robert Gurr, Barbara Harff. 2002. ``State Failure Task Force Problem Set.''","code":""},{"path":"/reference/PErisk.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Political Economic Risk Data from 62 Countries in 1987 — PErisk","text":"Kevin M. Quinn. 2004. ``Bayesian Factor Analysis Mixed Ordinal Continuous Response.'' Political Analyis. 12: 338-353.","code":""},{"path":"/reference/PostProbMod.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Posterior Probability of Model — PostProbMod","title":"Calculate Posterior Probability of Model — PostProbMod","text":"function takes object class BayesFactor calculates posterior probability model study correct given one models study correct.","code":""},{"path":"/reference/PostProbMod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Posterior Probability of Model — PostProbMod","text":"","code":"PostProbMod(BF, prior.probs = 1)"},{"path":"/reference/PostProbMod.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Posterior Probability of Model — PostProbMod","text":"BF object class BayesFactor. prior.probs prior probabilities model correct. Can either scalar array. Must positive. sum prior probabilities equal 1 prior.probs normalized sum unity.","code":""},{"path":"/reference/PostProbMod.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Posterior Probability of Model — PostProbMod","text":"array holding posterior probabilities   model study correct given one models   study correct.","code":""},{"path":[]},{"path":"/reference/PostProbMod.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Posterior Probability of Model — PostProbMod","text":"","code":"if (FALSE) { data(birthwt)  post1 <- MCMCregress(bwt~age+lwt+as.factor(race) + smoke + ht,                      data=birthwt, b0=c(2700, 0, 0, -500, -500,                                         -500, -500),                      B0=c(1e-6, .01, .01, 1.6e-5, 1.6e-5, 1.6e-5,                           1.6e-5), c0=10, d0=4500000,                      marginal.likelihood=\"Chib95\", mcmc=10000)  post2 <- MCMCregress(bwt~age+lwt+as.factor(race) + smoke,                      data=birthwt, b0=c(2700, 0, 0, -500, -500,                                         -500),                      B0=c(1e-6, .01, .01, 1.6e-5, 1.6e-5, 1.6e-5),                      c0=10, d0=4500000,                      marginal.likelihood=\"Chib95\", mcmc=10000)  post3 <- MCMCregress(bwt~as.factor(race) + smoke + ht,                      data=birthwt, b0=c(2700, -500, -500,                                         -500, -500),                      B0=c(1e-6, 1.6e-5, 1.6e-5, 1.6e-5,                           1.6e-5), c0=10, d0=4500000,                      marginal.likelihood=\"Chib95\", mcmc=10000)  BF <- BayesFactor(post1, post2, post3) mod.probs <- PostProbMod(BF) print(mod.probs) }"},{"path":"/reference/Rehnquist.html","id":null,"dir":"Reference","previous_headings":"","what":"U.S. Supreme Court Vote Matrix, Rehnquist Court (1994-2004) — Rehnquist","title":"U.S. Supreme Court Vote Matrix, Rehnquist Court (1994-2004) — Rehnquist","text":"dataframe contains matrix votes cast U.S. Supreme Court justices cases 1994-2004 terms.","code":""},{"path":"/reference/Rehnquist.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"U.S. Supreme Court Vote Matrix, Rehnquist Court (1994-2004) — Rehnquist","text":"dataframe contains data justices Rehnquist, Stevens, O'Connor, Scalia, Kennedy, Souter, Thomas, Ginsburg, Breyer 1994-2004 terms U.S. Supreme Court.  dataframe also contains term case, time variable counts term 1 11.  votes coded liberal (1) conservative (0) using protocol Spaeth (2003).  unit analysis case citation (ANALU=0).  concerned formally decided cases issued written opinions, full oral argument cases decided equally divided vote (DECTYPE=1,5,6,7).","code":""},{"path":"/reference/Rehnquist.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"U.S. Supreme Court Vote Matrix, Rehnquist Court (1994-2004) — Rehnquist","text":"Harold J. Spaeth. 2005. Original United States Supreme Court Database: 1953-2004 Terms.","code":""},{"path":"/reference/SSVSquantreg.html","id":null,"dir":"Reference","previous_headings":"","what":"Stochastic search variable selection for quantile regression — SSVSquantreg","title":"Stochastic search variable selection for quantile regression — SSVSquantreg","text":"function uses stochastic search select promising regression models fixed quantile \\(\\tau\\).  Indicator variables \\(\\gamma\\) used represent whether predictor included model .  user supplies data prior distribution model size.  list returned containing posterior sample \\(\\gamma\\) associated regression parameters \\(\\beta\\).","code":""},{"path":"/reference/SSVSquantreg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stochastic search variable selection for quantile regression — SSVSquantreg","text":"","code":"SSVSquantreg(   formula,   data = NULL,   tau = 0.5,   include = NULL,   burnin = 1000,   mcmc = 10000,   thin = 1,   verbose = 0,   seed = sample(1:1e+06, 1),   pi0a0 = 1,   pi0b0 = 1,   ... )"},{"path":"/reference/SSVSquantreg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stochastic search variable selection for quantile regression — SSVSquantreg","text":"formula Model formula. data Data frame. tau quantile interest. Must 0 1. default value 0.5 corresponds median regression model selection. include predictor(s) definitely appear model. Can specified name, position formula (taking account intercept). burnin number burn-iterations sampler. mcmc number MCMC iterations burnin. thin thinning interval used simulation.  number MCMC iterations must divisible value. verbose switch determines whether progress sampler printed screen.  verbose greater 0 iteration number, recently sampled values \\(\\gamma\\) associated values \\(\\beta\\) printed screen every verboseth iteration. seed seed random number generator. NA, Mersenne Twister generator used default seed 12345; integer passed used seed Mersenne twister. default value argument random integer 1 1,000,000.  default value ensures function used different value \\(\\tau\\), extremely unlikely seed identical. user can also pass list length two use L'Ecuyer random number generator, suitable parallel computation.  first element list L'Ecuyer seed, vector length six NA (NA default seed rep(12345,6) used).  second element list positive substream number. See MCMCpack specification details. pi0a0, pi0b0 Hyperparameters beta prior \\(\\pi_0\\), prior probability including predictor. Default values (1,1) equivalent uniform distribution. ... arguments","code":""},{"path":"/reference/SSVSquantreg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stochastic search variable selection for quantile regression — SSVSquantreg","text":"list containing: gamma posterior sample \\(\\gamma\\). associated summary plot methods. beta posterior sample associated regression parameters \\(\\beta\\). can analysed functions coda package.","code":""},{"path":"/reference/SSVSquantreg.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Stochastic search variable selection for quantile regression — SSVSquantreg","text":"SSVSquantreg implements stochastic search variable selection set potential predictors obtain promising models.  models considered take following form: $$Q_{\\tau}(y_i|x_{\\gamma}) = x_{\\gamma} ' \\beta_{\\gamma},$$ \\(Q_{\\tau}(y_i|x_{\\gamma})\\) denotes conditional \\(\\tau\\)th quantile \\(y_i\\) given \\(x_{\\gamma}\\), \\(x_{\\gamma}\\) denotes \\(x_i\\) predictors \\(x_{ij}\\) \\(\\gamma_j=0\\) removed \\(\\beta_{\\gamma}\\) denotes model specific regression parameters. likelihood formed based assumption independent asymmetric Laplace distributions \\(y_i\\) skewness parameter \\(\\tau\\) location parameters \\( x_{\\gamma} ' \\beta_{\\gamma}\\). assumption ensures likelihood function maximised \\(\\tau\\)th conditional quantile response variable. prior \\(\\beta_j\\) $$(1-\\gamma_j)\\delta_0+\\gamma_j\\mbox{Cauchy}(0,1),$$ \\(\\delta_0\\) denotes degenerate distribution mass 0.  standard Cauchy distribution chosen conditional \\(\\gamma_j=1\\).  allows wider range nonzero values \\(\\beta_j\\) standard Normal distribution, improving robustness method.  indicator variables \\(\\gamma_j\\) independently assigned Bernoulli prior, prior probability inclusion \\(\\pi_0\\).  turn assigned beta distribution, resulting beta-binomial prior model size. user can supply hyperparameters beta distribution.  Starting values randomly generated prior distribution. recommended standardise non-binary predictors order compare predictors scale.  can achieved using scale function. certain predictor included, predictors specified brought first positions computational convenience. regression parameters associated predictors given independent improper priors. Users may notice small speed advantage specify predictors feel certain appear model, particularly large models large number observations.","code":""},{"path":"/reference/SSVSquantreg.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Stochastic search variable selection for quantile regression — SSVSquantreg","text":"Craig Reed, David B. Dunson Keming Yu. 2010. \"Bayesian Variable Selection Quantile Regression\" Technical Report. Daniel Pemstein, Kevin M. Quinn, Andrew D. Martin.  2007.  Scythe Statistical Library 1.2. http://scythe.lsa.umich.edu. Keming Yu Jin Zhang. 2005. \"Three Parameter Asymmetric Laplace Distribution extensions.\" Communications Statistics - Theory Methods, 34, 1867-1879. Martyn Plummer, Nicky Best, Kate Cowles, Karen Vines. 2006.  ``Output Analysis Diagnostics MCMC (CODA)'', R News. 6(1): 7-11. https://CRAN.R-project.org/doc/Rnews/Rnews_2006-1.pdf.","code":""},{"path":[]},{"path":"/reference/SSVSquantreg.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Stochastic search variable selection for quantile regression — SSVSquantreg","text":"Craig Reed","code":""},{"path":"/reference/SSVSquantreg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stochastic search variable selection for quantile regression — SSVSquantreg","text":"","code":"if (FALSE) {  set.seed(1) epsilon<-rnorm(100) set.seed(2) x<-matrix(rnorm(1000),100,10) y<-x[,1]+x[,10]+epsilon qrssvs<-SSVSquantreg(y~x) model.50pc<-SSVSquantreg(y~x) model.90pc<-SSVSquantreg(y~x,tau=0.9) summary(model.50pc) ## Intercept not in median probability model summary(model.90pc) ## Intercept appears in median probability model }"},{"path":"/reference/Senate.html","id":null,"dir":"Reference","previous_headings":"","what":"106th U.S. Senate Roll Call Vote Matrix — Senate","title":"106th U.S. Senate Roll Call Vote Matrix — Senate","text":"dataframe contains matrix votes cast U.S. Senators 106th Congress.","code":""},{"path":"/reference/Senate.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"106th U.S. Senate Roll Call Vote Matrix — Senate","text":"dataframe contains roll call data Senators 106th Senate.  first column (id) ICPSR member ID number, second column (statecode) ICPSR state code, third column (party) member's state name, fourth column (member) member's name. followed roll call votes (including unanimous ones) 106th.  Nay votes coded 0, yea votes coded 1, NAs missing votes.","code":""},{"path":"/reference/Senate.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"106th U.S. Senate Roll Call Vote Matrix — Senate","text":"Keith Poole. 2005. 106th Roll Call Vote Data.","code":""},{"path":"/reference/SupremeCourt.html","id":null,"dir":"Reference","previous_headings":"","what":"U.S. Supreme Court Vote Matrix — SupremeCourt","title":"U.S. Supreme Court Vote Matrix — SupremeCourt","text":"dataframe contains matrix votes cast U.S. Supreme Court justices cases 2000 term.","code":""},{"path":"/reference/SupremeCourt.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"U.S. Supreme Court Vote Matrix — SupremeCourt","text":"dataframe contains data justices Rehnquist, Stevens, O'Connor, Scalia, Kennedy, Souter, Thomas, Ginsburg, Breyer 2000 term U.S. Supreme Court.  contains data 43 non-unanimous cases. votes coded liberal (1) conservative (0) using protocol Spaeth (2003).  unit analysis case citation (ANALU=0).  concerned formally decided cases issued written opinions, full oral argument cases decided equally divided vote (DECTYPE=1,5,6,7).","code":""},{"path":"/reference/SupremeCourt.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"U.S. Supreme Court Vote Matrix — SupremeCourt","text":"Harold J. Spaeth. 2005. Original United States Supreme Court Database: 1953-2004 Terms. http://supremecourtdatabase.org.","code":""},{"path":"/reference/Wishart.html","id":null,"dir":"Reference","previous_headings":"","what":"The Wishart Distribution — Wishart","title":"The Wishart Distribution — Wishart","text":"Density function random generation Wishart distribution.","code":""},{"path":"/reference/Wishart.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Wishart Distribution — Wishart","text":"","code":"rwish(v, S)  dwish(W, v, S)"},{"path":"/reference/Wishart.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Wishart Distribution — Wishart","text":"v Degrees freedom (scalar). S Inverse scale matrix \\((p \\times p)\\). W Positive definite matrix W \\((p \\times p)\\).","code":""},{"path":"/reference/Wishart.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Wishart Distribution — Wishart","text":"dwish evaluates density positive definite matrix W. rwish generates one random draw distribution.","code":""},{"path":"/reference/Wishart.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Wishart Distribution — Wishart","text":"mean Wishart random variable v degrees freedom inverse scale matrix S \\(vS\\).","code":""},{"path":"/reference/Wishart.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Wishart Distribution — Wishart","text":"","code":"density <- dwish(matrix(c(2,-.3,-.3,4),2,2), 3, matrix(c(1,.3,.3,1),2,2)) draw <- rwish(3, matrix(c(1,.3,.3,1),2,2))"},{"path":"/reference/choicevar.html","id":null,"dir":"Reference","previous_headings":"","what":"Handle Choice-Specific Covariates in Multinomial Choice Models — choicevar","title":"Handle Choice-Specific Covariates in Multinomial Choice Models — choicevar","text":"function handles choice-specific covariates multinomial choice models.  See example example useage.","code":""},{"path":"/reference/choicevar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Handle Choice-Specific Covariates in Multinomial Choice Models — choicevar","text":"","code":"choicevar(var, varname, choicelevel)"},{"path":"/reference/choicevar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Handle Choice-Specific Covariates in Multinomial Choice Models — choicevar","text":"var name variable dataframe. varname name new variable created. choicelevel level y variable corresponds .","code":""},{"path":"/reference/choicevar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Handle Choice-Specific Covariates in Multinomial Choice Models — choicevar","text":"new variable used MCMCmnl() function.","code":""},{"path":[]},{"path":"/reference/dtomogplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Dynamic Tomography Plot — dtomogplot","title":"Dynamic Tomography Plot — dtomogplot","text":"dtomogplot used produce tomography plot (see King, 1997) series temporally ordered, partially observed 2 x 2 contingency tables.","code":""},{"path":"/reference/dtomogplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dynamic Tomography Plot — dtomogplot","text":"","code":"dtomogplot(   r0,   r1,   c0,   c1,   time.vec = NA,   delay = 0,   xlab = \"fraction of r0 in c0 (p0)\",   ylab = \"fraction of r1 in c0 (p1)\",   color.palette = heat.colors,   bgcol = \"black\",   ... )"},{"path":"/reference/dtomogplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dynamic Tomography Plot — dtomogplot","text":"r0 \\((ntables \\times 1)\\) vector row sums row 0. r1 \\((ntables \\times 1)\\) vector row sums row 1. c0 \\((ntables \\times 1)\\) vector column sums column 0. c1 \\((ntables \\times 1)\\) vector column sums column 1. time.vec Vector time periods correspond elements \\(r_0\\), \\(r_1\\), \\(c_0\\), \\(c_1\\). delay Time delay seconds plotting tomography lines. Setting positive delay useful visualizing temporal dependence. xlab x axis label plot. ylab y axis label plot. color.palette Color palette used encode temporal patterns. bgcol background color plot. ... arguments passed","code":""},{"path":"/reference/dtomogplot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Dynamic Tomography Plot — dtomogplot","text":"Consider following partially observed 2 2 contingency table: \\(r_0\\), \\(r_1\\), \\(c_0\\), \\(c_1\\), \\(N\\) non-negative integers observed. interior cell entries observed. assumed \\(Y_0|r_0 \\sim \\mathcal{B}inomial(r_0, p_0)\\) \\(Y_1|r_1 \\sim \\mathcal{B}inomial(r_1, p_1)\\). function plots bounds maximum likelihood estimates (p0, p1) color codes elements time.vec.","code":""},{"path":"/reference/dtomogplot.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Dynamic Tomography Plot — dtomogplot","text":"Gary King, 1997. Solution Ecological Inference Problem.  Princeton: Princeton University Press. Jonathan C. Wakefield. 2004. ``Ecological Inference 2 x 2 Tables.'' Journal Royal Statistical Society, Series . 167(3): 385445. Kevin Quinn. 2004. ``Ecological Inference Presence Temporal Dependence.\" Ecological Inference: New Methodological Strategies. Gary King, Ori Rosen, Martin . Tanner (eds.). New York: Cambridge University Press.","code":""},{"path":[]},{"path":"/reference/dtomogplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dynamic Tomography Plot — dtomogplot","text":"","code":"if (FALSE) { ## simulated data example 1 set.seed(3920) n <- 100 r0 <- rpois(n, 2000) r1 <- round(runif(n, 100, 4000)) p0.true <- pnorm(-1.5 + 1:n/(n/2)) p1.true <- pnorm(1.0 - 1:n/(n/4)) y0 <- rbinom(n, r0, p0.true) y1 <- rbinom(n, r1, p1.true) c0 <- y0 + y1 c1 <- (r0+r1) - c0  ## plot data dtomogplot(r0, r1, c0, c1, delay=0.1)  ## simulated data example 2 set.seed(8722) n <- 100 r0 <- rpois(n, 2000) r1 <- round(runif(n, 100, 4000)) p0.true <- pnorm(-1.0 + sin(1:n/(n/4))) p1.true <- pnorm(0.0 - 2*cos(1:n/(n/9))) y0 <- rbinom(n, r0, p0.true) y1 <- rbinom(n, r1, p1.true) c0 <- y0 + y1 c1 <- (r0+r1) - c0  ## plot data dtomogplot(r0, r1, c0, c1, delay=0.1) }"},{"path":"/reference/make.breaklist.html","id":null,"dir":"Reference","previous_headings":"","what":"Vector of break numbers — make.breaklist","title":"Vector of break numbers — make.breaklist","text":"function generates vector break numbers using output testpanelSubjectBreak.  function performs pairwise comparison models using Bayes Factors.","code":""},{"path":"/reference/make.breaklist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vector of break numbers — make.breaklist","text":"","code":"make.breaklist(BF, threshold = 3)"},{"path":"/reference/make.breaklist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vector of break numbers — make.breaklist","text":"BF output testpanelSubjectBreak. threshold Bayes Factor threshold pick best model.  Bayes factor two models smaller threshold, model smaller number break chosen avoid -identification problem.  Users can change threshold positive number.  default value 3 chosen indicates existence \"substantial evidence\" favor model numerator according Jeffreys' scale.","code":""},{"path":"/reference/make.breaklist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Vector of break numbers — make.breaklist","text":"Vector fo break numbers.","code":""},{"path":"/reference/make.breaklist.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Vector of break numbers — make.breaklist","text":"Jong Hee Park, 2012. ``Unified Method Dynamic   Cross-Sectional Heterogeneity: Introducing Hidden Markov Panel   Models.''  American Journal Political Science.56:   1040-1054. <doi: 10.1111/j.1540-5907.2012.00590.x> Harold Jeffreys, 1961. Theory Probability. Oxford University Press.","code":""},{"path":[]},{"path":"/reference/mptable.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the marginal posterior probabilities of predictors being included\nin a quantile regression model. — mptable","title":"Calculate the marginal posterior probabilities of predictors being included\nin a quantile regression model. — mptable","text":"function extracts marginal probability table produced summary.qrssvs.","code":""},{"path":"/reference/mptable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the marginal posterior probabilities of predictors being included\nin a quantile regression model. — mptable","text":"","code":"mptable(qrssvs)"},{"path":"/reference/mptable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the marginal posterior probabilities of predictors being included\nin a quantile regression model. — mptable","text":"qrssvs object class qrssvs. Typically gamma component list returned SSVSquantreg.","code":""},{"path":"/reference/mptable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the marginal posterior probabilities of predictors being included\nin a quantile regression model. — mptable","text":"table predictors listed together posterior marginal posterior probability inclusion.","code":""},{"path":[]},{"path":"/reference/mptable.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculate the marginal posterior probabilities of predictors being included\nin a quantile regression model. — mptable","text":"Craig Reed","code":""},{"path":"/reference/mptable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the marginal posterior probabilities of predictors being included\nin a quantile regression model. — mptable","text":"","code":"if (FALSE) { set.seed(1) epsilon<-rnorm(100) set.seed(2) x<-matrix(rnorm(1000),100,10) y<-x[,1]+x[,10]+epsilon qrssvs<-SSVSquantreg(y~x) mptable(qrssvs$gamma) }"},{"path":"/reference/plot.qrssvs.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot output from quantile regression stochastic search variable selection\n(QR-SSVS). — plot.qrssvs","title":"Plot output from quantile regression stochastic search variable selection\n(QR-SSVS). — plot.qrssvs","text":"function produces Trellis plot predictors y-axis versus marginal posterior probability inclusion x-axis.","code":""},{"path":"/reference/plot.qrssvs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot output from quantile regression stochastic search variable selection\n(QR-SSVS). — plot.qrssvs","text":"","code":"# S3 method for qrssvs plot(x, ...)"},{"path":"/reference/plot.qrssvs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot output from quantile regression stochastic search variable selection\n(QR-SSVS). — plot.qrssvs","text":"x object class qrssvs. Typically gamma component list returned SSVSquantreg. ... arguments","code":""},{"path":"/reference/plot.qrssvs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot output from quantile regression stochastic search variable selection\n(QR-SSVS). — plot.qrssvs","text":"object class \"trellis\". associated update print methods documented \"Lattice\" package.","code":""},{"path":"/reference/plot.qrssvs.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Plot output from quantile regression stochastic search variable selection\n(QR-SSVS). — plot.qrssvs","text":"Deepayan Sarkar. 2008. lattice: Lattice Graphics. R package version 0.17-17","code":""},{"path":[]},{"path":"/reference/plot.qrssvs.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot output from quantile regression stochastic search variable selection\n(QR-SSVS). — plot.qrssvs","text":"Craig Reed","code":""},{"path":"/reference/plot.qrssvs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot output from quantile regression stochastic search variable selection\n(QR-SSVS). — plot.qrssvs","text":"","code":"if (FALSE) { set.seed(1) epsilon<-rnorm(100) set.seed(2) x<-matrix(rnorm(1000),100,10) y<-x[,1]+x[,10]+epsilon qrssvs<-SSVSquantreg(y~x) plot(qrssvs$gamma) ## Modify the graph by increasing the fontsize on the axes qrssvsplot<-plot(qrssvs$gamma) update(qrssvsplot, scales=list(cex=3)) }"},{"path":"/reference/plotChangepoint.html","id":null,"dir":"Reference","previous_headings":"","what":"Posterior Density of Regime Change Plot — plotChangepoint","title":"Posterior Density of Regime Change Plot — plotChangepoint","text":"Plot posterior density regime change.","code":""},{"path":"/reference/plotChangepoint.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Posterior Density of Regime Change Plot — plotChangepoint","text":"","code":"plotChangepoint(   mcmcout,   main = \"Posterior Density of Regime Change Probabilities\",   xlab = \"Time\",   ylab = \"\",   verbose = FALSE,   start = 1,   overlay = FALSE )"},{"path":"/reference/plotChangepoint.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Posterior Density of Regime Change Plot — plotChangepoint","text":"mcmcout mcmc object containing posterior density sample changepoint model.  Note must prob.state attribute. main Title plot xlab Label x-axis. ylab Label y-axis. verbose verbose=TRUE, expected changepoints printed. start time first observation shown time series plot. overlay overlay=TRUE, probability regime change drawn separately, useful draw multiple plots one screen. See example MCMCpoissonChange. Otherwise, multiple plots regime change probabilities drawn.","code":""},{"path":[]},{"path":"/reference/plotHDPChangepoint.html","id":null,"dir":"Reference","previous_headings":"","what":"Posterior Changepoint Probabilities from HDP-HMM — plotHDPChangepoint","title":"Posterior Changepoint Probabilities from HDP-HMM — plotHDPChangepoint","text":"Plot posterior density regime change.","code":""},{"path":"/reference/plotHDPChangepoint.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Posterior Changepoint Probabilities from HDP-HMM — plotHDPChangepoint","text":"","code":"plotHDPChangepoint(   mcmcout,   main = \"Posterior Changepoint Probabilities\",   xlab = \"Time\",   ylab = \"\",   start = 1 )"},{"path":"/reference/plotHDPChangepoint.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Posterior Changepoint Probabilities from HDP-HMM — plotHDPChangepoint","text":"mcmcout mcmc object containing posterior density sample changepoint model. Note must   HDP-HMM sampler. main Title plot xlab Label x-axis. ylab Label y-axis. start time first observation shown time series plot.","code":""},{"path":[]},{"path":"/reference/plotState.html","id":null,"dir":"Reference","previous_headings":"","what":"Changepoint State Plot — plotState","title":"Changepoint State Plot — plotState","text":"Plot posterior probability time point state.","code":""},{"path":"/reference/plotState.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Changepoint State Plot — plotState","text":"","code":"plotState(   mcmcout,   main = \"Posterior Regime Probability\",   ylab = expression(paste(\"Pr(\", S[t], \"= k |\", Y[t], \")\")),   legend.control = NULL,   cex = 0.8,   lwd = 1.2,   start = 1 )"},{"path":"/reference/plotState.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Changepoint State Plot — plotState","text":"mcmcout mcmc object containing posterior density sample changepoint model.  Note must prob.state attribute. main Title plot. ylab Label y-axis. legend.control Control location legend.  necessary pass x y locations; .e., c(x,y). cex Control point size. lwd Line width parameter. start time first observation shown time series plot.","code":""},{"path":[]},{"path":"/reference/procrustes.html","id":null,"dir":"Reference","previous_headings":"","what":"Procrustes Transformation — procrustes","title":"Procrustes Transformation — procrustes","text":"function performs Procrustes transformation matrix X minimize squared distance X another matrix Xstar.","code":""},{"path":"/reference/procrustes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Procrustes Transformation — procrustes","text":"","code":"procrustes(X, Xstar, translation = FALSE, dilation = FALSE)"},{"path":"/reference/procrustes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Procrustes Transformation — procrustes","text":"X matrix transformed. Xstar target matrix. translation logical value indicating whether X translated. dilation logical value indicating whether X dilated.","code":""},{"path":"/reference/procrustes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Procrustes Transformation — procrustes","text":"list containing: X.new matrix Procrustes transformed version X, R rotation matrix, tt translation vector, s scale factor.","code":""},{"path":"/reference/procrustes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Procrustes Transformation — procrustes","text":"R, tt, s chosen : $$s X R + 1 tt' \\approx X^*$$ X.new given : $$X_{new} = s X R + 1 tt'$$","code":""},{"path":"/reference/procrustes.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Procrustes Transformation — procrustes","text":"Borg Groenen. 1997. Modern Multidimensional Scaling. New York: Springer. pp. 340-342.","code":""},{"path":[]},{"path":"/reference/read.Scythe.html","id":null,"dir":"Reference","previous_headings":"","what":"Read a Matrix from a File written by Scythe — read.Scythe","title":"Read a Matrix from a File written by Scythe — read.Scythe","text":"function reads matrix ASCII file form produced Scythe Statistical Library.  Scythe output files contain number rows columns first row, followed data.","code":""},{"path":"/reference/read.Scythe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read a Matrix from a File written by Scythe — read.Scythe","text":"","code":"read.Scythe(infile = NA)"},{"path":"/reference/read.Scythe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read a Matrix from a File written by Scythe — read.Scythe","text":"infile file read. can include path information.","code":""},{"path":"/reference/read.Scythe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read a Matrix from a File written by Scythe — read.Scythe","text":"matrix containing data stored read file.","code":""},{"path":"/reference/read.Scythe.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Read a Matrix from a File written by Scythe — read.Scythe","text":"Daniel Pemstein, Kevin M. Quinn, Andrew D. Martin.  2007. Scythe Statistical Library 1.0. http://scythe.lsa.umich.edu.","code":""},{"path":[]},{"path":"/reference/read.Scythe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read a Matrix from a File written by Scythe — read.Scythe","text":"","code":"if (FALSE) {   mymatrix <- read.Scythe(\"myfile.txt\")   }"},{"path":"/reference/summaryqrssvs.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarising the results of quantile regression stochastic search variable\nselection (QR-SSVS). — summaryqrssvs","title":"Summarising the results of quantile regression stochastic search variable\nselection (QR-SSVS). — summaryqrssvs","text":"function produces table predictors associated marginal posterior probability inclusion. also returns median probability model (see details section).","code":""},{"path":"/reference/summaryqrssvs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarising the results of quantile regression stochastic search variable\nselection (QR-SSVS). — summaryqrssvs","text":"","code":"# S3 method for qrssvs summary(object, ...)"},{"path":"/reference/summaryqrssvs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarising the results of quantile regression stochastic search variable\nselection (QR-SSVS). — summaryqrssvs","text":"object object class qrssvs. Typically gamma component list returned SSVSquantreg. ... arguments.","code":""},{"path":"/reference/summaryqrssvs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summarising the results of quantile regression stochastic search variable\nselection (QR-SSVS). — summaryqrssvs","text":"median probability model defined model contains predictor marginal posterior probability greater equal 0.5. goal select single model e.g. prediction, Barbieri Berger (2004) recommend median probability model. cases, coincide maximum probability model.","code":""},{"path":"/reference/summaryqrssvs.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Summarising the results of quantile regression stochastic search variable\nselection (QR-SSVS). — summaryqrssvs","text":"Maria M. Barbieri, James O. Berger (2004). \"Optimal predictive model selection\". Annals Statistics, 32, 870-897.","code":""},{"path":[]},{"path":"/reference/summaryqrssvs.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Summarising the results of quantile regression stochastic search variable\nselection (QR-SSVS). — summaryqrssvs","text":"Craig Reed","code":""},{"path":"/reference/summaryqrssvs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarising the results of quantile regression stochastic search variable\nselection (QR-SSVS). — summaryqrssvs","text":"","code":"if (FALSE) { set.seed(1) epsilon<-rnorm(100) set.seed(2) x<-matrix(rnorm(1000),100,10) y<-x[,1]+x[,10]+epsilon qrssvs<-SSVSquantreg(y~x) summary(qrssvs$gamma) }"},{"path":"/reference/testpanelGroupBreak.html","id":null,"dir":"Reference","previous_headings":"","what":"A Test for the Group-level Break using a Multivariate Linear Regression\nModel with Breaks — testpanelGroupBreak","title":"A Test for the Group-level Break using a Multivariate Linear Regression\nModel with Breaks — testpanelGroupBreak","text":"testpanelGroupBreak fits multivariate linear regression model parametric breaks using panel residuals test existence group-level breaks panel residuals. details discussed Park (2011).","code":""},{"path":"/reference/testpanelGroupBreak.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A Test for the Group-level Break using a Multivariate Linear Regression\nModel with Breaks — testpanelGroupBreak","text":"","code":"testpanelGroupBreak(   subject.id,   time.id,   resid,   m = 1,   mcmc = 1000,   burnin = 1000,   thin = 1,   verbose = 0,   b0,   B0,   c0,   d0,   a = NULL,   b = NULL,   seed = NA,   marginal.likelihood = c(\"none\", \"Chib95\"),   ... )"},{"path":"/reference/testpanelGroupBreak.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A Test for the Group-level Break using a Multivariate Linear Regression\nModel with Breaks — testpanelGroupBreak","text":"subject.id numeric vector indicating group number. start 1. time.id numeric vector indicating time unit. start 1. resid vector panel residuals m number changepoints. mcmc number MCMC iterations burn-. burnin number burn-iterations sampler. thin thinning interval used simulation.  number MCMC iterations must divisible value. verbose switch determines whether progress sampler printed screen.  verbose greater 0, iteration number posterior density samples printed screen every verboseth iteration. b0 prior mean residual mean. B0 prior precision residual variance c0 \\(c_0/2\\) shape parameter inverse Gamma prior \\(\\sigma^2\\). amount information inverse Gamma prior something like \\(c_0\\) pseudo-observations. d0 \\(d_0/2\\) scale parameter inverse Gamma prior \\(\\sigma^2\\). \\(\\) shape1 beta prior transition probabilities. default, expected duration computed corresponding b values assigned. expected duration sample period divided number states. b \\(b\\) shape2 beta prior transition probabilities. default, expected duration computed corresponding b values assigned. expected duration sample period divided number states. seed seed random number generator.  NA, current R system seed used. marginal.likelihood marginal likelihood calculated? Options : none case marginal likelihood calculated Chib95 case method Chib (1995) used. ... arguments passed","code":""},{"path":"/reference/testpanelGroupBreak.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A Test for the Group-level Break using a Multivariate Linear Regression\nModel with Breaks — testpanelGroupBreak","text":"mcmc object contains posterior sample. object can summarized functions provided coda package.  object contains attribute prob.state storage matrix contains probability \\(state_i\\) period, log-marginal likelihood model (logmarglike).","code":""},{"path":"/reference/testpanelGroupBreak.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A Test for the Group-level Break using a Multivariate Linear Regression\nModel with Breaks — testpanelGroupBreak","text":"testpanelGroupBreak fits multivariate linear regression model parametric breaks using panel residuals detect existence system-level breaks unobserved factors discussed Park (2011). model takes following form: $$e_{} \\sim \\mathcal{N}(\\beta_{m}, \\sigma^2_m )\\;\\; m = 1, \\ldots, M$$ assume standard, semi-conjugate priors: $$\\beta \\sim \\mathcal{N}(b0, B0)$$ : $$\\sigma^{-2} \\sim \\mathcal{G}amma(c_0/2, d_0/2)$$ \\(\\beta\\) \\(\\sigma^{-2}\\) assumed priori independent. : $$p_{mm} \\sim \\mathcal{B}eta(, b),\\;\\; m = 1, \\ldots, M$$ \\(M\\) number states.","code":""},{"path":"/reference/testpanelGroupBreak.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"A Test for the Group-level Break using a Multivariate Linear Regression\nModel with Breaks — testpanelGroupBreak","text":"Jong Hee Park, 2012. ``Unified Method Dynamic Cross-Sectional Heterogeneity: Introducing Hidden Markov Panel Models.'' American Journal Political Science.56: 1040-1054. <doi: 10.1111/j.1540-5907.2012.00590.x> Siddhartha Chib. 1998. ``Estimation comparison multiple change-point models.'' Journal Econometrics. 86: 221-241. <doi: 10.1080/01621459.1995.10476635>","code":""},{"path":"/reference/testpanelGroupBreak.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A Test for the Group-level Break using a Multivariate Linear Regression\nModel with Breaks — testpanelGroupBreak","text":"","code":"if (FALSE) {    ## data generating   set.seed(1977)   Q <- 3   true.beta1   <-  c(1, 1, 1) ; true.beta2   <-  c(1, -1, -1)   true.sigma2 <-  c(1, 3); true.D1 <- diag(.5, Q); true.D2 <- diag(2.5, Q)   N=20; T=100;   NT <- N*T   x1 <- rnorm(NT)   x2 <- runif(NT, 5, 10)   X <- cbind(1, x1, x2);   W <- X;   y <- rep(NA, NT)    ## true break numbers are one and at the center   break.point = rep(T/2, N); break.sigma=c(rep(1, N));   break.list <- rep(1, N)   id  <-  rep(1:N, each=NT/N)   K <-  ncol(X);   ruler <- c(1:T)    ## compute the weight for the break   W.mat <- matrix(NA, T, N)   for (i in 1:N){     W.mat[, i] <- pnorm((ruler-break.point[i])/break.sigma[i])   }   Weight <- as.vector(W.mat)    ## data generating by weighting two means and variances   j = 1   for (i in 1:N){     Xi <- X[j:(j+T-1), ]     Wi <- W[j:(j+T-1), ]     true.V1 <- true.sigma2[1]*diag(T) + Wi%*%true.D1%*%t(Wi)     true.V2 <- true.sigma2[2]*diag(T) + Wi%*%true.D2%*%t(Wi)     true.mean1 <- Xi%*%true.beta1     true.mean2 <- Xi%*%true.beta2     weight <- Weight[j:(j+T-1)]     y[j:(j+T-1)] <- (1-weight)*true.mean1 + (1-weight)*chol(true.V1)%*%rnorm(T) +       weight*true.mean2 + weight*chol(true.V2)%*%rnorm(T)     j <- j + T   }   ## model fitting   subject.id <- c(rep(1:N, each=T))   time.id <- c(rep(1:T, N))     resid <- rstandard(lm(y ~X-1 + as.factor(subject.id)))   G <- 100   out0 <- testpanelGroupBreak(subject.id, time.id, resid, m=0,            mcmc=G, burnin=G, thin=1, verbose=G,            b0=0, B0=1/100, c0=2, d0=2, marginal.likelihood = \"Chib95\")   out1 <- testpanelGroupBreak(subject.id, time.id, resid, m=1,            mcmc=G, burnin=G, thin=1, verbose=G,            b0=0, B0=1/100, c0=2, d0=2, marginal.likelihood = \"Chib95\")   out2 <- testpanelGroupBreak(subject.id, time.id, resid, m=2,            mcmc=G, burnin=G, thin=1, verbose=G,            b0=0, B0=1/100, c0=2, d0=2, marginal.likelihood = \"Chib95\")   out3 <- testpanelGroupBreak(subject.id, time.id, resid, m=3,            mcmc=G, burnin=G, thin=1, verbose=G,            b0=0, B0=1/100, c0=2, d0=2, marginal.likelihood = \"Chib95\")    ## Note that the code is for a hypothesis test of no break in panel residuals.   ## When breaks exist, the estimated number of break in the mean and variance of panel residuals   ## tends to be larger than the number of break in the data generating process.   ## This is due to the difference in parameter space, not an error of the code.   BayesFactor(out0, out1, out2, out3)    ## In order to identify the number of breaks in panel parameters,   ## use HMMpanelRE() instead.  }"},{"path":"/reference/testpanelSubjectBreak.html","id":null,"dir":"Reference","previous_headings":"","what":"A Test for the Subject-level Break using a Unitivariate Linear Regression\nModel with Breaks — testpanelSubjectBreak","title":"A Test for the Subject-level Break using a Unitivariate Linear Regression\nModel with Breaks — testpanelSubjectBreak","text":"testpanelSubjectBreak fits unitivariate linear regression model parametric breaks using panel residuals test existence subject-level breaks panel residuals. details discussed Park (2011).","code":""},{"path":"/reference/testpanelSubjectBreak.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A Test for the Subject-level Break using a Unitivariate Linear Regression\nModel with Breaks — testpanelSubjectBreak","text":"","code":"testpanelSubjectBreak(   subject.id,   time.id,   resid,   max.break = 2,   minimum = 10,   mcmc = 1000,   burnin = 1000,   thin = 1,   verbose = 0,   b0,   B0,   c0,   d0,   a = NULL,   b = NULL,   seed = NA,   Time = NULL,   ps.out = FALSE,   ... )"},{"path":"/reference/testpanelSubjectBreak.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A Test for the Subject-level Break using a Unitivariate Linear Regression\nModel with Breaks — testpanelSubjectBreak","text":"subject.id numeric vector indicating group number. start 1. time.id numeric vector indicating time unit. start 1. resid vector panel residuals. max.break upper bound break numbers test. minimum minimum length time series test. test skip subject time series shorter . mcmc number MCMC iterations burn-. burnin number burn-iterations sampler. thin thinning interval used simulation.  number MCMC iterations must divisible value. verbose switch determines whether progress sampler printed screen.  verbose greater 0, iteration number posterior density samples printed screen every verboseth iteration. b0 prior mean residual mean. B0 prior precision residual variance c0 \\(c_0/2\\) shape parameter inverse Gamma prior \\(\\sigma^2\\). amount information inverse Gamma prior something like \\(c_0\\) pseudo-observations. d0 \\(d_0/2\\) scale parameter inverse Gamma prior \\(\\sigma^2\\). \\(\\) shape1 beta prior transition probabilities. default, expected duration computed corresponding b values assigned. expected duration sample period divided number states. b \\(b\\) shape2 beta prior transition probabilities. default, expected duration computed corresponding b values assigned. expected duration sample period divided number states. seed seed random number generator.  NA, current R system seed used. Time Times observations. used find time first observations panel residuals. ps.ps.== TRUE, state probabilities exported. number panel subjects huge, users can turn save memory. ... arguments passed","code":""},{"path":"/reference/testpanelSubjectBreak.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A Test for the Subject-level Break using a Unitivariate Linear Regression\nModel with Breaks — testpanelSubjectBreak","text":"returned object matrix containing log marginal likelihoods HMMs.  dimension returned object number panel subjects max.break + 1.  psout == TRUE, returned object array attribute psout containing state probabilities HMMs.","code":""},{"path":"/reference/testpanelSubjectBreak.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A Test for the Subject-level Break using a Unitivariate Linear Regression\nModel with Breaks — testpanelSubjectBreak","text":"testpanelSubjectBreak fits univariate linear regression model subject-level residuals panel model.  details discussed Park (2011). model takes following form: $$e_{} = \\alpha_{im} + \\varepsilon_{}\\;\\; m = 1, \\ldots, M$$ errors assumed time-varying subject level: $$\\varepsilon_{} \\sim \\mathcal{N}(0, \\sigma^2_{im})$$ assume standard, semi-conjugate priors: $$\\beta \\sim \\mathcal{N}(b_0,B_0^{-1})$$ : $$\\sigma^{-2} \\sim \\mathcal{G}amma(c_0/2, d_0/2)$$ \\(\\beta\\) \\(\\sigma^{-2}\\) assumed priori independent. : $$p_{mm} \\sim \\mathcal{B}eta(, b),\\;\\; m = 1, \\ldots, M$$ \\(M\\) number states. OLS estimates used starting values.","code":""},{"path":"/reference/testpanelSubjectBreak.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"A Test for the Subject-level Break using a Unitivariate Linear Regression\nModel with Breaks — testpanelSubjectBreak","text":"Jong Hee Park, 2012. ``Unified Method Dynamic Cross-Sectional Heterogeneity: Introducing Hidden Markov Panel Models.'' American Journal Political Science.56: 1040-1054. <doi: 10.1111/j.1540-5907.2012.00590.x> Siddhartha Chib. 1998. ``Estimation comparison multiple change-point models.'' Journal Econometrics. 86: 221-241. <doi: 10.1080/01621459.1995.10476635>","code":""},{"path":"/reference/testpanelSubjectBreak.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A Test for the Subject-level Break using a Unitivariate Linear Regression\nModel with Breaks — testpanelSubjectBreak","text":"","code":"if (FALSE) {   set.seed(1974)   N <- 30   T <- 80   NT <- N*T    ## true parameter values   true.beta <- c(1, 1)   true.sigma <- 3   x1 <- rnorm(NT)   x2 <- runif(NT, 2, 4)    ## group-specific breaks   break.point = rep(T/2, N); break.sigma=c(rep(1, N));   break.list <- rep(1, N)    X <- as.matrix(cbind(x1, x2), NT, );   y <- rep(NA, NT)   id  <-  rep(1:N, each=NT/N)   K <-  ncol(X);   true.beta <- as.matrix(true.beta, K, 1)    ## compute the break probability   ruler <- c(1:T)   W.mat <- matrix(NA, T, N)   for (i in 1:N){     W.mat[, i] <- pnorm((ruler-break.point[i])/break.sigma[i])   }   Weight <- as.vector(W.mat)    ## draw time-varying individual effects and sample y   j = 1   true.sigma.alpha <- 30   true.alpha1 <- true.alpha2 <- rep(NA, N)   for (i in 1:N){     Xi <- X[j:(j+T-1), ]     true.mean <- Xi  %*% true.beta     weight <- Weight[j:(j+T-1)]     true.alpha1[i] <- rnorm(1, 0, true.sigma.alpha)     true.alpha2[i] <- -1*true.alpha1[i]     y[j:(j+T-1)] <- ((1-weight)*true.mean + (1-weight)*rnorm(T, 0, true.sigma) +             (1-weight)*true.alpha1[i]) +             (weight*true.mean + weight*rnorm(T, 0, true.sigma) + weight*true.alpha2[i])     j <- j + T   }    ## extract the standardized residuals from the OLS with fixed-effects   FEols <- lm(y ~ X + as.factor(id) -1 )   resid.all <- rstandard(FEols)   time.id <- rep(1:80, N)    ## model fitting   G <- 1000   BF <- testpanelSubjectBreak(subject.id=id, time.id=time.id,          resid= resid.all, max.break=3, minimum = 10,          mcmc=G, burnin = G, thin=1, verbose=G,          b0=0, B0=1/100, c0=2, d0=2, Time = time.id)    ## estimated break numbers   ## thresho   estimated.breaks <- make.breaklist(BF, threshold=3)    ## print all posterior model probabilities   print(attr(BF, \"model.prob\")) }"},{"path":"/reference/tomogplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Tomography Plot — tomogplot","title":"Tomography Plot — tomogplot","text":"tomogplot used produce tomography plot (see King, 1997) series partially observed 2 x 2 contingency tables.","code":""},{"path":"/reference/tomogplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tomography Plot — tomogplot","text":"","code":"tomogplot(   r0,   r1,   c0,   c1,   xlab = \"fraction of r0 in c0 (p0)\",   ylab = \"fraction of r1 in c0 (p1)\",   bgcol = \"white\",   ... )"},{"path":"/reference/tomogplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tomography Plot — tomogplot","text":"r0 \\((ntables \\times 1)\\) vector row sums row 0. r1 \\((ntables \\times 1)\\) vector row sums row 1. c0 \\((ntables \\times 1)\\) vector column sums column 0. c1 \\((ntables \\times 1)\\) vector column sums column 1. xlab x axis label plot. ylab y axis label plot. bgcol background color plot. ... arguments passed","code":""},{"path":"/reference/tomogplot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Tomography Plot — tomogplot","text":"Consider following partially observed 2 2 contingency table: \\(r_0\\), \\(r_1\\), \\(c_0\\), \\(c_1\\), \\(N\\) non-negative integers observed. interior cell entries observed. assumed \\(Y_0|r_0 \\sim \\mathcal{B}inomial(r_0, p_0)\\) \\(Y_1|r_1 \\sim \\mathcal{B}inomial(r_1, p_1)\\). function plots bounds maximum likelihood estimatess (p0, p1).","code":""},{"path":"/reference/tomogplot.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Tomography Plot — tomogplot","text":"Gary King, 1997. Solution Ecological Inference Problem.  Princeton: Princeton University Press. Jonathan C. Wakefield. 2004. ``Ecological Inference 2 x 2 Tables.'' Journal Royal Statistical Society, Series . 167(3): 385445.","code":""},{"path":[]},{"path":"/reference/tomogplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tomography Plot — tomogplot","text":"","code":"r0 <- rpois(100, 500) r1 <- rpois(100, 200) c0 <- rpois(100, 100) c1 <- (r0 + r1) - c0 tomogplot(r0, r1, c0, c1)  #> [1] 0"},{"path":"/reference/topmodels.html","id":null,"dir":"Reference","previous_headings":"","what":"Shows an ordered list of the most frequently visited models sampled during\nquantile regression stochastic search variable selection (QR-SSVS). — topmodels","title":"Shows an ordered list of the most frequently visited models sampled during\nquantile regression stochastic search variable selection (QR-SSVS). — topmodels","text":"Given output quantile regression stochastic search variable selection, function returns table 'best' models together associated empirical posterior probability.","code":""},{"path":"/reference/topmodels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shows an ordered list of the most frequently visited models sampled during\nquantile regression stochastic search variable selection (QR-SSVS). — topmodels","text":"","code":"topmodels(qrssvs, nmodels = 5, abbreviate = FALSE, minlength = 3)"},{"path":"/reference/topmodels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shows an ordered list of the most frequently visited models sampled during\nquantile regression stochastic search variable selection (QR-SSVS). — topmodels","text":"qrssvs object class qrssvs. Typically gamma component list returned SSVSquantreg. nmodels number models tabulate. abbreviate Logical: names predictors abbreviated? minlength abbreviate set TRUE, minimum length abbreviations.","code":""},{"path":"/reference/topmodels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shows an ordered list of the most frequently visited models sampled during\nquantile regression stochastic search variable selection (QR-SSVS). — topmodels","text":"table models associated posterior probability. models arranged descending order probability.","code":""},{"path":[]},{"path":"/reference/topmodels.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Shows an ordered list of the most frequently visited models sampled during\nquantile regression stochastic search variable selection (QR-SSVS). — topmodels","text":"Craig Reed","code":""},{"path":"/reference/topmodels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Shows an ordered list of the most frequently visited models sampled during\nquantile regression stochastic search variable selection (QR-SSVS). — topmodels","text":"","code":"if (FALSE) { set.seed(1) epsilon<-rnorm(100) set.seed(2) x<-matrix(rnorm(1000),100,10) y<-x[,1]+x[,10]+epsilon qrssvs<-SSVSquantreg(y~x) topmodels(qrssvs$gamma) }"},{"path":"/reference/vech.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Lower Triangular Elements from a Symmetric Matrix — vech","title":"Extract Lower Triangular Elements from a Symmetric Matrix — vech","text":"function takes symmetric matrix extracts list lower triangular elements.","code":""},{"path":"/reference/vech.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Lower Triangular Elements from a Symmetric Matrix — vech","text":"","code":"vech(x)"},{"path":"/reference/vech.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Lower Triangular Elements from a Symmetric Matrix — vech","text":"x symmetric matrix.","code":""},{"path":"/reference/vech.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Lower Triangular Elements from a Symmetric Matrix — vech","text":"list lower triangular elements.","code":""},{"path":"/reference/vech.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract Lower Triangular Elements from a Symmetric Matrix — vech","text":"function checks make sure matrix square, check symmetry (just pulls lower triangular elements).  elements stored column major order.  original matrix can restored using xpnd command.","code":""},{"path":[]},{"path":"/reference/vech.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Lower Triangular Elements from a Symmetric Matrix — vech","text":"","code":"symmat <- matrix(c(1,2,3,4,2,4,5,6,3,5,7,8,4,6,8,9),4,4)    vech(symmat) #>  [1] 1 2 3 4 4 5 6 7 8 9"},{"path":"/reference/write.Scythe.html","id":null,"dir":"Reference","previous_headings":"","what":"Write a Matrix to a File to be Read by Scythe — write.Scythe","title":"Write a Matrix to a File to be Read by Scythe — write.Scythe","text":"function writes matrix ASCII file can read Sycthe Statistical Library.  Scythe requires input files contain number rows columns first row, followed data.","code":""},{"path":"/reference/write.Scythe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write a Matrix to a File to be Read by Scythe — write.Scythe","text":"","code":"write.Scythe(outmatrix, outfile = NA, overwrite = FALSE)"},{"path":"/reference/write.Scythe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write a Matrix to a File to be Read by Scythe — write.Scythe","text":"outmatrix matrix written file. outfile file written. can include path information. overwrite logical determines whether existing file -written.  default, protects user -writing existing files.","code":""},{"path":"/reference/write.Scythe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write a Matrix to a File to be Read by Scythe — write.Scythe","text":"zero file properly written.","code":""},{"path":"/reference/write.Scythe.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Write a Matrix to a File to be Read by Scythe — write.Scythe","text":"Daniel Pemstein, Kevin M. Quinn, Andrew D. Martin.  2007. Scythe Statistical Library 1.0. http://scythe.lsa.umich.edu.","code":""},{"path":[]},{"path":"/reference/write.Scythe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write a Matrix to a File to be Read by Scythe — write.Scythe","text":"","code":"if (FALSE) {   write.Scythe(mymatrix, file.path(tempdir(), \"myfile.txt\"))   }"},{"path":"/reference/xpnd.html","id":null,"dir":"Reference","previous_headings":"","what":"Expand a Vector into a Symmetric Matrix — xpnd","title":"Expand a Vector into a Symmetric Matrix — xpnd","text":"function takes vector appropriate length (typically created using vech) creates symmetric matrix.","code":""},{"path":"/reference/xpnd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Expand a Vector into a Symmetric Matrix — xpnd","text":"","code":"xpnd(x, nrow = NULL)"},{"path":"/reference/xpnd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Expand a Vector into a Symmetric Matrix — xpnd","text":"x list elements expand symmetric matrix. nrow number rows (columns) returned matrix.  Look details.","code":""},{"path":"/reference/xpnd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Expand a Vector into a Symmetric Matrix — xpnd","text":"\\((nrows \\times nrows)\\) symmetric matrix.","code":""},{"path":"/reference/xpnd.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Expand a Vector into a Symmetric Matrix — xpnd","text":"function particularly useful dealing variance covariance matrices. Note R stores matrices column major order, items x recycled fill matrix need . number rows can specified automatically computed number elements given object via \\((-1 + \\sqrt{(1 + 8 * length(x))}) / 2\\).","code":""},{"path":[]},{"path":"/reference/xpnd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Expand a Vector into a Symmetric Matrix — xpnd","text":"","code":"xpnd(c(1,2,3,4,4,5,6,7,8,9),4) #>      [,1] [,2] [,3] [,4] #> [1,]    1    2    3    4 #> [2,]    2    4    5    6 #> [3,]    3    5    7    8 #> [4,]    4    6    8    9   xpnd(c(1,2,3,4,4,5,6,7,8,9)) #>      [,1] [,2] [,3] [,4] #> [1,]    1    2    3    4 #> [2,]    2    4    5    6 #> [3,]    3    5    7    8 #> [4,]    4    6    8    9"}]
